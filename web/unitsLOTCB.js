/**
 * Created by skyeguy on 1/22/17.
 */

//This class supports ALL of the games AI. Each individual will henceforth be called a Unit.
function Unit(unitX, unitY, type, isalpha, ID, ultra) //ultra is an object that allows for numerous unique arguments to be accessed.
{
    //TODO add a respawn function, and a respawn rate stat, and possibly respawn coords based roughly on their set coords.
    //Priority Variables
    this.mobile = true;
    this.stackDominance = Math.random();
    this.barcode = ((Math.random() - 1/2 * Math.random()) * Math.random() + Math.random()) / Math.random() + 4 * Math.random(); //this is a near impossible to replicate random identifyer for each unit in the game.
    this.ID = ID; //This is gives this unit an identity so that they can be identified if a problem comes up.
    this.X = unitX; // this is the units X position in the world
    this.Y = unitY; // this is the units Y position in the world
    this.initX = this.X; //this stores initial position X
    this.initY = this.Y; //this stores initial position Y
    this.dmx = map; // dimension
    this.type = type; //This determines what kind of unit it is.
    this.zIndex = 2;
    this.team = "wild"; //wild = all predators //herd = all passive or not predator animals //neutral = all creatures that are pure neutral but are not targeted //freynor = freynor faction etc.
    this.allys = []; // all non-enemy teams.
    this.target = "none";
    this.targetDistance = "none";
    this.extraRot = 0;
    this.traverse = false; //the ability to walk over other units but nothing else.
    this.contraPlayer = true; //this is manually set to false when defining a creature if it is a creature that never engages the player in combat.
    this.owned = false; //if this is owned by a faction then set owned to true;
    this.flotation = false; //if true this unit drops items and shows its body upon death in the water.
    this.boatphobic = false; //if true this unit will refuse to attack the player whilst they are riding in a boat
    this.colorized = [false, "green"];
    this.mounted = false; //this variable determines whether or not the player is riding it.
    this.mountRange = 0;
    this.tangible = true; //this flag determines whether or not the unit canbe phased through by everyone or not.
    this.removeFromDeath = false; //this flag determines whether a unit is allowed to enter the dead list.
    this.insect = false; //this determines if it is a small insect creature (the player and other Units can walk over insect creatures but they can't walk over each other.)
    this.bugger = false; //this variable determines whether or not a unit can hunt for insect type creatures (insects by default can regardless of this variable)

    //timers for AI
    this.aiTimer = 0; //the total time a unit has been in existence (unless reset)
    this.aiAttackingTimer = 0; //the total time a unit has been attacking without interruption (unless reset)
    this.aiKeepTime = 0; // a variable that is used in the function that increments the timers by 0.1 every 1/10 second.

    //team variables
    this.muzzle = false; //if true the unit will not be able to target the player.
    this.teamByID = true; //sets team based on ID once.
    //variables concerning code functionality
    this.ultra = ultra;
    //Important Game Variables
    this.health = 0;
    this.armour = 0;
    this.damage = 0;
    this.negateArmour = 0;
    this.magicalDamage = 0;
    this.heatResistance = 0;
    this.acidResistance = 0;
    this.magicalResistance = 0;
    this.speed = 0;
    this.rangeOfSight = 120;
    this.baseSight = 120;
    this.CNX = 0;
    this.alpha = false;
    this.effect = "none"; //This is a special effect that happens on attacks against the player.
    this.drops = []; //This is the list of items that this unit will drop upon death.
    this.experience = 1; //This is the amount of experience that the player will earn from slaying this creature. It becomes either regular or magical experience depending on what means the player used to get the killing blow.
    this.lessEXP = 0;
    this.resistances = [];
    this.unavoidable = false; //if this is true the player can not use jump back or any other immunity based dodging technique to dodge.
    //Operational game variables
    this.rotation = 0; //this is the unit's current rotation.
    this.newRotation = 0; //this is the target rotation, or the rotation that the unit would like to be at.
    this.costume = 0; //This is costume as in scratch's type of costume, like a frame... It is used for movement and attack animation frames.
    this.costume2 = 0; //This is an alternate costume for complex units that animate two things at once.
    this.rotationSpeed = 0.1; // this is the speed at which the unit rotates.
    this.rotatable = true; //when false the unit is unable to rotate.
    this.damagesPlayer = true; //this determines if spells cast by this unit can damage or affect the player.
    this.directPatrolTime = 0; //for patrol type humans this is the timer for the delay in auto rotate towards objective when confronted with an obstacle
    //functionality game variables
    this.engagementRadius = 15; //this is the distance before a target that the unit will stop at to leave itself appropriate room to attack or whatever interaction it will do.
    this.sizeRadius = 20; // this is the radius that represents the total size of the unit.
    this.alive = true;
    this.alpha = isalpha;
    this.alphaSize = 1;
    this.beastEntry = "none";
    this.hurtByPlayer = false; //set to true if the player physically injures this unit
    this.killNotByPlayer = false;
    this.killByPlayerTeam = false; //if killed by a player controlled unit.
    this.killedByCompanion = false; //if killed by a player companion.
    //AI and sensing variables
    this.closestDistance; //this is the distance away from this unit that the closest other unit is.
    this.closestUnit; // this is the exact unit that is the closest at the moment.
    this.playerSeen = false; //This shows whether or not this unit currently sees the player.
    this.extraRange = 0; //This is range that is added to rangeOfSight so that a unit can see the player if a packmember does.
    this.extraRangeTime = 0;
    this.disturbed = false; //When activated the creature will have twice as much sight!
    this.disturbedTime = 0; //this is the timer that regulates how long a creature is in the disturbed state.
    this.offended = false; //this is if the unit is mad at targetable AI that attacked first.
    //animation variables
    this.wepLayer = false; //for humans this determines what layer their weapon animation draws at.
    this.resetFrameOrder = true; //This switches the costumeEngine back to positive direction framerate
    this.resetFrameOrder2 = true; //For the alternate costumeEngine mode.
    this.attacking = false; //This flag is active while this unit is attacking so that the game knows when this unit is attacking.
    this.moving = false; //This flag is active while this unit is moving so that the game knows when this unit is moving.
    this.timeStoppedMoving = new Date().getTime(); //This variable is used to measure how long a unit has not been moving so that the unit can switch back to a stationary costume after an appropriate amount of time.
    //lesser animation variables
    this.healthShownTime = 0; //this is for showing health after being damaged in combat.
    this.showHealthTime = 0; //this is for showing health under any other circumstance.
    this.hostile = true;
    //attacking variables (excluding the attacking flag)
    this.doubleFrame = false; //this unit uses two costume Animators at once and thus only uses costumeEngine's alternate mode for attack sensing.
    this.spellCast = false; //use for primary spells only
    this.stopAttacking = false; // for units that use followThrough this manually ends the attack at the right time if the attack is more complex and is not able to be manually ended at the last frame.
    this.followThrough = false; //this variable determines if a unit finishes an attack even if the target isn't there to be hit by it.
    this.damageFrame = "automatic"; //When this is set to automatic it makes the last attack frame deal the damage to the target. If it is anything else the final attack frame needs to be triggered from within the front end of the animation.
    this.finalAttackCostume = false; //When this flag is triggered the Unit deals its damage to the player.
    this.damageDealt = false; //for manual Unit damage dealing (meaning damage dealt on a frame picked inside of the Units animation rather than automatically the final frame)
    this.attackStyle = "chunked";
    this.attackRate = 10;
    this.attackWait = 0.1;
    this.justAttacked = false; //This is the flag that shows whether or not a unit has just attacked.
    this.timeBetweenAttacks = new Date().getTime(); //this is a variable that regulates the wait timer for attacking.
    this.grudge = 0; //this is how long the unit will hold a grudge against the player for attacking them. 20 seconds is what it starts at so a grudge 0 seconds long would be - 20.
    this.combatMode = 0; //Some Units can switch between different styles of attacks or enter a beserker mode etc.
    this.attackType = false; //for units that have multiple attacks this variable stores which of their attacks is currently being used.
    //special attacking variables
    this.storeChargeTime = new Date().getTime();
    this.charge = false;
    this.chargeReady = true;
    //other extra variables for combat stuff
    this.keepSpeed = 0;
    this.staySpeed = 0;
    //other animations variables
    this.flashFrame = 0;
    this.flashFrameTime = new Date().getTime();
    //movement specific variables
    this.alwaysMove = false; //the creature never stops moving while this is true.
    this.followAttack = false; //the creature moves and attacks at the same time.
    this.fleeing = false;
    this.underground = false;
    this.flying = false;
    this.haste = false;
    this.charger = false; //A charger is a unit that keeps moving even after it passes through the engagement radius.
    this.chargeDist = 150; //the distance past the target the creature will run before turning around.
    this.doCharge = false; //if active the creature will no longer point to its target (as it is running past its target)
    //game pause related variables
    this.timeResistance = 1; //time resistance is 1 by default, if it is set equal to timeSpeed the unit effectively becomes time resistant.
    //death variables
    this.timeSinceDead = 0;
    this.wasAlive = true;
    this.revived = false;
    //Humanoid related Variables (for humanlike units only)
    this.lLegY = 0;
    this.rLegY = 0;
    this.legSwitch = 0;
    this.doOnDeathOnce = true; //this is for unique characters, upon their death they trigger a flag letting the game know never to respawn them.
    //team variables
    this.follower = false; //if true the creature follows through with attack without being disturbed but does not actually harm the player.
    //taming variables
    this.tamable = true;
    this.tameREQ = 20;
    //landscape variables
    this.water = false;
    this.land = false;
    //Other variables
    this.other = false; //this is unique for every unit... do whith it what you will.
    this.interactable = false; //this allows a creature other than a human to be interacted with in the dialogue system.
    this.engagedInDialogue = false;
    this.attackBusy = false; //used to see if the attack is happening and the creature is not just waiting to attack.
    this.emerge = false; //this is for the creatures that use an animation phase like lombrises. blah blah blah
    this.creatureBiz = false; //reference evadeObstructions to see purpose
    this.suspendConflictingPointSystems = false; //reference evadeObstructions to see purpose
    this.spin = 0; //this is the rotation aspect of flash animate.
    this.plantedX = this.X;
    this.plantedY = this.Y;
    this.mofuTargetFood = "none";
    this.mofuFood = 0;
    this.eggTimer = 0;
    this.loopTimer = new Date().getTime();
    this.kidSize = 0.72;
    this.kid = false;
    if (typeof(this.ultra) != "undefined")
    {
        if (typeof(this.ultra.kid) != "undefined")
        {
            if (this.ultra.kid == true)
            {
                this.kid = true;
            }
        }
    }
    this.numberOfSameTypeNearby = 0;
    this.invisible = false; //this determines if a unit can be seen at all
    this.ghost = false; //this determines if a unit is a ghost (it makes it fade out to only 30% opacity
    this.shortSighted = false;
    this.disdained = false; // in some factions people who are generally hated within the faction will not be protected by other members of the faction and they will not rush to their own faction's aid.

    //Sound variables
    this.voicedSounds = [];
    this.voiceTime = new Date().getTime();
    this.voiceFrequency = 45;
    this.startVoice = false;
    //swimming
    this.swimMAX = 25;
    this.swim = 25;
    this.swimming = false;
    this.swimSpeed = 1;
    //effects variables
    this.petrified = false;
    this.petrificationResistance = false;
    this.rangedSwitch = false; //this is triggered when the unit's switchToRanged function decides to switch to an alternative weapon for ranged confrontations (it warns the function switchToSwimming not to switch back to the base weapon but rather tha one chosen by switchToRanged function)
    this.blindedTime = 0;
    this.blinded = false;
    this.burningTime = 0;
    this.burningTime2 = new Date().getTime();
    this.frozenTime = 0;
    this.stunTime = 0;
    this.stunTimer = 0;
    this.stunI = false;
    this.stunII = false;
    this.stunIII = false;
    this.stunIV = false;
    this.stunV = false;
    this.stunned = 1;
    this.shockedTime = 0;
    this.shockedTime2 = new Date().getTime();
    this.acidV = false;
    this.acidIV = false;
    this.acidIII = false;
    this.acidII = false;
    this.acidI = false;
    this.halfAcid = false;
    this.quarterAcid = false;
    this.acidTime = new Date().getTime();
    this.charmedTeam = false;
    this.charmedTime = new Date().getTime();
    this.isCharmed = false;
    this.marked = false;
    this.webbedTime = new Date().getTime();
    this.webbedNum = 0;
    this.stayTime = new Date().getTime();
    this.stay = false;
    this.guaranteeTime = new Date().getTime();
    this.guarantee = false;
    this.buffout = 1;
    this.buffoutTime = 0;
    this.buffoutTimer = 0;
    this.subBuffoutToggle = false;
    this.subBuffout = 0;
    this.initBuffout = 1;
    this.undeath = false;
    this.bloodQuenched = false;
    this.baskVenomedStoreTime = new Date().getTime();
    this.baskVenomed = false;
    this.scared = false;
    this.antiLeech = false;
    this.leeches = 0;
    this.leechWiggle = 0;
    this.leechPop = false;
    this.leechWiggleRand = 0;
    this.leechTime = 0;

    //Artificial Intelligence
    this.setTeamByID = function()
    {
        //set team based on ID
        if (this.ID == "arena1")
        {
            this.muzzle = true;
            this.baseTeam = "arena1";
            this.team = "arena1";
        }
        else if (this.ID == "arena2")
        {
            this.muzzle = true;
            this.baseTeam = "arena2";
            this.team = "arena2";
        }
        else if (this.ID == "arena3")
        {
            this.muzzle = false;
            this.baseTeam = "arena3";
            this.team = "arena3";
        }
    };

    this.removeSelfFromCompanionList = function()
    {
        var doSubtract = -1;
        for (var i = 0; i < player.companions.length; i++)
        {
            if (player.companions[i].barcode == this.barcode)
            {
                doSubtract = i;
            }
        }
        if (doSubtract > -1)
        {
            this.guarantee = false;
            player.companions.splice(doSubtract, 1);
        }
    };

    var tameShrink = 0;
    var tameSize = 8 + Math.random() * 5;
    var tameSpeed = 0.2 + 0.3 * Math.random();
    var tameAttempt = false;
    this.teamCommands = function()
    {
        //TAMING (a survivalism based skill)
        if (this.alive && this.muzzle == false && this.dmx == player.dmx && this.owned == false && this.baseTeam != "player" && this.team != "player" && yKey == true && this.tamable && player.getSurvivalism() >= this.tameREQ && this.health < ((50 + Math.max(0, player.getSurvivalism() - this.tameREQ))/200 * this.healthMAX))
        {
            if (this.DTP() < this.engagementRadius + 8)
            {
                XXX.beginPath();
                if (100 - tameShrink <= tameSize && tameShrink < 92)
                {
                    tameShrink = Math.min(99, tameShrink + 2.5 * tameSpeed);
                    XXX.fillStyle="green";
                    tameAttempt = true;
                }
                else
                {
                    tameShrink = Math.min(99, tameShrink + tameSpeed);
                    XXX.fillStyle="orange";
                    tameAttempt = false;
                }
                XXX.fillRect(1/2 * CCC.width - 50 + 1/2 * tameShrink, 1/2 * CCC.height - 40, 100 - tameShrink, 7);
            }
        }

        if (this.alive && this.muzzle == false && this.dmx == player.dmx && this.owned == false && this.baseTeam != "player" && this.team != "player" && yKey == false && this.tamable && player.getSurvivalism() >= this.tameREQ && this.health < ((50 + Math.max(0, player.getSurvivalism() - this.tameREQ))/200 * this.healthMAX))
        {
            tameShrink = 0;
            tameSize = 14 + Math.random() * 19;
            tameSpeed = 0.2 + 0.3 * Math.random();
            if (tameAttempt)
            {
                this.baseTeam = "player";
                this.team = "player";
            }
            tameAttempt = false;
        }

        //PLAYER TEAM COMMANDS
        if (this.team == "player")
        {
            //STAY
            if (!shiftKey && vKey && this.DTP() < 140 && !this.stay && this.stayTime <= new Date().getTime() && !this.mounted) //makes minions who are in direct proximity to the player stay put
            {
                this.stay = true;
                if (this.keepSpeed < this.speed)
                {
                    this.staySpeed = this.speed;
                }
                else
                {
                    this.staySpeed = this.keepSpeed;
                }

                this.speed = 0;
                this.stayTime = new Date().getTime() + 900;
            }
            else if (tKey && vKey && shiftKey && this.stayTime <= new Date().getTime() && !this.mounted) //stays all minions
            {
                if (!this.stay)
                {
                    this.stay = true;
                    if (this.keepSpeed < this.speed)
                    {
                        this.staySpeed = this.speed;
                    }
                    else
                    {
                        this.staySpeed = this.keepSpeed;
                    }

                    this.speed = 0;
                    this.stayTime = new Date().getTime() + 900;
                }
            }
            else if (!shiftKey && vKey && this.stay && this.DTP() < 140 && this.stayTime <= new Date().getTime()) //un-stays minions in direct proximity to the player
            {
                this.stay = false;
                this.speed = this.staySpeed;
                this.stayTime = new Date().getTime() + 900;
            }
            else if (vKey && shiftKey && this.stay && this.stayTime <= new Date().getTime()) //un-stays all minions
            {
                this.stay = false;
                this.speed = this.staySpeed;
                this.stayTime = new Date().getTime() + 900;
            }
            //GUARANTEE (toggles a creature between being a preserved companion and being an expendable follower)
            if (!shiftKey && gKey && !this.guarantee && this.guaranteeTime <= new Date().getTime() && this.DTP() < 140 && player.companions.length < player.companionLimit)
            {
                this.guaranteeTime = new Date().getTime() + 3000;
                var noAdd = false;
                for (var i = 0; i < player.companions.length; i++)
                {
                    if (player.companions[i].barcode == this.barcode || !this.alive)
                    {
                        noAdd = true;
                    }
                }
                if (!noAdd)
                {
                    this.guarantee = true;
                    player.companions.push(this);
                }
            }
            else if (!shiftKey && gKey && this.guarantee && this.guaranteeTime <= new Date().getTime() && this.DTP() < 140)
            {
                this.guaranteeTime = new Date().getTime() + 3000;
                this.removeSelfFromCompanionList();
            }
            else if (shiftKey && gKey && this.guarantee && this.guaranteeTime <= new Date().getTime())
            {
                this.guarantee = false;
                //player.companions.splice(player.companions.indexOf(this), 1);
                player.companions = [];
                this.guaranteeTime = new Date().getTime() + 3000;
            }

            if (this.guarantee)
            {
                this.showHealthTime = new Date().getTime();
                if (!this.attacking && this.stay)
                {
                    if (player.getSurvivalism() >= 20)
                    {
                        this.health = Math.min(this.healthMAX, this.health + 0.006); //companions have an increased health regeneration while not attacking and while staying put (by player's command)
                    }
                    else
                    {
                        this.health = Math.min(this.healthMAX, this.health + 0.004); //companions have an increased health regeneration while not attacking and while staying put (by player's command)
                    }
                }
                else if (!this.attacking)
                {
                    if (player.getSurvivalism() >= 20)
                    {
                        this.health = Math.min(this.healthMAX, this.health + 0.004); //companions have a slight health regeneration while not attacking.
                    }
                    else
                    {
                        this.health = Math.min(this.healthMAX, this.health + 0.002); //companions have a slight health regeneration while not attacking.
                    }
                }
            }
        }
        else
        {
            if (this.stay)
            {
                this.stay = false;
                this.speed = this.staySpeed;
            }

            if (this.guarantee)
            {
                this.guarantee = false;
                player.companions.splice(player.companions.indexOf(this), 1);
            }
        }
    };

    this.incrementAITimer = function()
    {
        if (new Date().getTime() > this.aiKeepTime + 100)
        {
            //counts up the attacking timer
            if (this.attacking)
            {
                this.aiAttackingTimer += 0.1;
            }
            else
            {
                this.aiAttackingTimer = 0;
            }
            //Counts up the AI TIMER
            this.aiTimer += 0.1;
            this.aiKeepTime = new Date().getTime();
        }
    };
    //This makes sure that each existing Unit has a different dominance ranking and so when they get stuck on eachother the one with lower dominance will move out of the way.
    this.stackSorter = function()
    {
        this.stackDominance = Math.random();
        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            if (this.stackDominance == ArtificialIntelligenceAccess[i].stackDominance)
            {
                this.stackSorter();
                break;
            }
        }
    };

    this.mount = function(num)
    {
        if (this.baseTeam == "player")
        {
            if (!this.mounted && player.mounted != true && this.dmx == player.dmx)
            {
                if (this.DTP() <= this.engagementRadius + this.mountRange)
                {
                    if (this.DTM() <= this.sizeRadius)
                    {
                        if (dClick)
                        {
                            dClick = false;
                            //unmounts all other units
                            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                            {
                                ArtificialIntelligenceAccess[i].mounted = false;
                            }

                            this.mounted = true;
                            player.mounted = true;
                        }
                    }
                }
            }
            else if (this.mounted)
            {
                if (this.DTM() <= this.sizeRadius)
                {
                    if (dClick)
                    {
                        //unmounts player from this unit
                        dClick = false;
                        this.mounted = false;
                        player.mounted = false;
                    }
                }

                //Do Mount Stuff
                this.dmx = player.dmx;
                X = this.X + Math.cos(this.rotation) * num;
                Y = this.Y + Math.sin(this.rotation) * num;
            }
        }
        else
        {
            this.mounted = false;
        }
    };

    this.attackBubble = function(bubbleConstructorList) // [[radius, this.rotation, relativeAngle, distance], ["", "", ""] etc. //relative angle is angle plus the units current angle.
    {
        var dfbtt;
        //if the player is in one of the proper attack bubbles return true.
        if (this.target == player)
        {
            for (var i = 0; i < bubbleConstructorList.length; i++)
            {
                dfbtt = Math.sqrt(((this.X + Math.cos(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3]))- X)*((this.X + Math.cos(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) - X) + ((this.Y + Math.sin(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) - Y)*((this.Y + Math.sin(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) - Y));
                if (dfbtt <= bubbleConstructorList[i][0])
                {
                    return true;
                }
            }
        }
        else if (this.target != "none" && typeof(this.target) != "undefined")
        {
            //console.log(this.target);
            for (var i = 0; i < bubbleConstructorList.length; i++)
            {
                dfbtt = Math.sqrt(((this.X + Math.cos(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3]))- this.target.X)*((this.X + Math.cos(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) - this.target.X) + ((this.Y + Math.sin(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) - this.target.Y)*((this.Y + Math.sin(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) - this.target.Y));
                //console.log("radDist: " + dfbtt + " <? " + (bubbleConstructorList[i][0] + this.target.sizeRadius));
                if (dfbtt <= bubbleConstructorList[i][0] + this.target.sizeRadius)
                {
                    return true;
                }
            }
        }
        //draw all of the attack bubbles.
        if (showUnitAttackBubble)
        {
            for (var i = 0; i < bubbleConstructorList.length; i++)
            {
                XXX.beginPath();
                XXX.lineWidth = 2;
                XXX.strokeStyle = "blue";
                XXX.arc(X - (this.X + Math.cos(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) + 1/2 * CCC.width, Y - (this.Y + Math.sin(bubbleConstructorList[i][1] + bubbleConstructorList[i][2]) * (-bubbleConstructorList[i][3])) + 1/2 * CCC.height, bubbleConstructorList[i][0], 0, 2 * Math.PI);
                XXX.stroke();
            }
        }
    };

    this.evadeObstruction = function()
    {
        if (this.creatureBiz)
        {
            this.creatureBiz = false;
        }
        else
        {
            if (!this.attacking)
            {
                var testMovX;
                var testMovY;
                var testMovFail = 0;
                this.suspendConflictingPointSystems = true;
                for (var i = 0; i < 48; i++)
                {
                    testMovX = this.X - Math.cos((this.rotation + ((15 * i) / 360 * Math.PI))) * ((TTD / 16.75) * this.speed) * this.stunned * timeSpeed / this.timeResistance;
                    testMovY = this.Y - Math.sin((this.rotation + ((15 * i) / 360 * Math.PI))) * ((TTD / 16.75) * this.speed) * this.stunned * timeSpeed / this.timeResistance;

                    if (!this.isObstructed(testMovX, testMovY))
                    {
                        testMovFail = i + 1;
                        break;
                    }
                }

                this.newRotation = this.rotation + ((15 * testMovFail) / 360 * Math.PI);
            }
        }
    };

    this.stackSorter();

    this.selfPosition = function(target, nextX, nextY)
    {
        var obstructorDist = Math.sqrt((target.X - nextX) * (target.X - nextX) + (target.Y - nextY) * (target.Y - nextY));
        if (obstructorDist <= this.sizeRadius + target.sizeRadius && this.attacking == false)
        {
            return true;
        }
    };

    this.unStack = function()
    {
        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            if (gameLoopNumber % 5 == 0 && ArtificialIntelligenceAccess[i] !== this) //todo whilst this is set to == 0 it will not truly ever work but it think i prefer it not working.
            {
                var upcX = this.X - Math.cos(this.rotation) * (TTD / 16.75) * this.speed;
                var upcY = this.Y - Math.sin(this.rotation) * (TTD / 16.75) * this.speed;

                var obstrDist = Math.sqrt((ArtificialIntelligenceAccess[i].X - upcX) * (ArtificialIntelligenceAccess[i].X - upcX) + (ArtificialIntelligenceAccess[i].Y - upcY) * (ArtificialIntelligenceAccess[i].Y - upcY));

                if (obstrDist <= this.sizeRadius + ArtificialIntelligenceAccess[i].sizeRadius && this.attacking == false)
                {
                    if (this.mobile)
                    {
                        if (this.target == player)
                        {
                            if (this.stackDominance < ArtificialIntelligenceAccess[i].stackDominance || ArtificialIntelligenceAccess[i].attacking)
                            {
                                this.X += (this.speed * (1.25 + Math.random())) * Math.cos(Math.atan2(Y - this.Y, X - this.X) + Math.PI / 2);
                                this.Y += (this.speed * (1.25 + Math.random())) * Math.sin(Math.atan2(Y - this.Y, X - this.X) + Math.PI / 2);
                            }
                        }
                        else if (this.target != "none")
                        {
                            if (this.stackDominance < ArtificialIntelligenceAccess[i].stackDominance || ArtificialIntelligenceAccess[i].attacking)
                            {
                                this.X += (this.speed * (1.25 + Math.random())) * Math.cos(Math.atan2(this.target.Y - this.Y, this.target.X - this.X) + Math.PI / 2);
                                this.Y += (this.speed * (1.25 + Math.random())) * Math.sin(Math.atan2(this.target.Y - this.Y, this.target.X - this.X) + Math.PI / 2);
                            }
                        }
                        else
                        {
                            if (this.stackDominance < ArtificialIntelligenceAccess[i].stackDominance)
                            {
                                this.X += (this.speed * (1.25 + Math.random())) * Math.cos(Math.atan2(Y - this.Y, X - this.X) + Math.PI / 2);
                                this.Y += (this.speed * (1.25 + Math.random())) * Math.sin(Math.atan2(Y - this.Y, X - this.X) + Math.PI / 2);
                            }
                        }
                    }
                }
            }
        }
    };

    //this function determines the distance to the player [Distance To Player]
    this.DTP = function()
    {
        return Math.sqrt((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y));
    };

    this.DTU = function(target)
    {
        return Math.sqrt((target.X - this.X) * (target.X - this.X) + (target.Y - this.Y) * (target.Y - this.Y));
    };

    this.DTM = function()
    {
        return Math.sqrt((this.X - (X - mouseX + (1/2 * CCC.width)))*(this.X - (X - mouseX + (1/2 * CCC.width))) + (this.Y - (Y - mouseY + (1/2 * CCC.height)))*(this.Y - (Y - mouseY + (1/2 * CCC.height))));
    };

    this.webTargeting = function()
    {
        this.target = "none";
        this.targetDistance = 1000000000;

        for (var i = 0; i < scenicList.length; i++)
        {
            if (this.team != "neutral" && scenicList[i].type == "web")
            {
                for (var k = 0; k < scenicList[i].webbed.length; k++)
                {
                    var swtchTrgt = false;
                    for (var j = 0; j < this.allys.length; j++)
                    {
                        if (this.allys[j] == scenicList[i].webbed[k].team || scenicList[i].webbed[k].dmx != this.dmx)
                        {
                            swtchTrgt = true;
                            break;
                        }
                    }

                    if (!swtchTrgt && scenicList[i].webbed[k] != this && !scenicList[i].webbed[k].underground || !swtchTrgt && scenicList[i].webbed[k] != this && this.underground)
                    {
                        if (scenicList[i].webbed[k] == player)
                        {
                            var storeDTU = this.DTP();
                            if (this.targetDistance > storeDTU)
                            {
                                this.targetDistance = storeDTU;
                                this.target = player;
                            }
                        }
                        else
                        {
                            var storeDTU = this.DTU(scenicList[i].webbed[k]);
                            if (this.targetDistance > storeDTU)
                            {
                                this.targetDistance = storeDTU;
                                this.target = scenicList[i].webbed[k];
                            }
                        }
                    }
                }
            }
        }
    };

    this.targeting = function()
    {
        if (!this.muzzle)
        {
            if (player.lycanthropy != true || this.baseTeam != "wolf" || this.disturbed || this.team == "player")
            {
                if (this.boatphobic != true || player.weaponEquipped != "boat") //some creatures do not target the player while the player is in a boat.
                {
                    if (!this.mounted)
                    {
                        if (this.team == "player" || player.mounted != true)
                        {
                            this.target = player;
                        }
                    }
                }
            }
        }

        if (this.team == "player" && cKey || this.muzzle || this.boatphobic && player.weaponEquipped == "boat" || this.mounted || player.mounted && this.baseTeam != "player") //charge command player team units will target their master only as a last resort while "C" is pressed
        {
            this.targetDistance = 1000000000;
        }
        else //this is the normal code for all other units given all other circumstances
        {
            this.targetDistance = this.DTP();
        }


        if (this.team != "neutral")
        {
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var swtchTrgt = false;
                for (var j = 0; j < this.allys.length; j++)
                {
                    if (this.allys[j] == ArtificialIntelligenceAccess[i].team || ArtificialIntelligenceAccess[i].dmx != this.dmx || ArtificialIntelligenceAccess[i].petrified && this.type != "Basilisk" || ArtificialIntelligenceAccess[i].petrified && ArtificialIntelligenceAccess[i].health <= 0 && this.type == "Basilisk" || ArtificialIntelligenceAccess[i].insect == true && this.insect == false && this.bugger == false)
                    {
                        if (ArtificialIntelligenceAccess[i].disdained == true && ArtificialIntelligenceAccess[i].disturbed == false || ArtificialIntelligenceAccess[i].disdained == false || player.title != "Highfolk" && player.title != "Nobility" && player.title != "Royalty" && player.raceName == "Nirwaden" || player.title != "Nobility" && player.title != "Royalty" && player.raceName != "Nirwaden" || this.disdained)
                        {
                            swtchTrgt = true;
                            break;
                        }
                    }
                }

                if (!swtchTrgt && ArtificialIntelligenceAccess[i] != this && !ArtificialIntelligenceAccess[i].underground || !swtchTrgt && ArtificialIntelligenceAccess[i] != this && this.underground)
                {
                    var storeDTU = this.DTU(ArtificialIntelligenceAccess[i]);
                    if (this.targetDistance > storeDTU)
                    {
                        this.targetDistance = storeDTU;
                        this.target = ArtificialIntelligenceAccess[i];
                    }
                }
            }
        }

        if (this.target != "none")
        {
            if (this.target != player && this.DTU(this.target) > this.baseSight)
            {
                this.target = "none";
                this.offended = false;
                this.attacking = false;
            }
        }

        if (typeof(this.target) == "undefined")
        {
            this.target = "none";
            this.offended = false;
            this.attacking = false;
        }

        if (fKey || tKey)
        {
            if (this.allys.indexOf("player") != -1)
            {
                this.target = player;
                this.targetDistance = this.DTP();
            }
        }
    };

    this.friendDecider = function()
    {
        this.allys = [this.team, "neutral"];

        if (this.team != "player")
        {
            this.allys.push("neutral2");
        }

        if (this.team == "arena4")
        {
            this.allys.splice(0, 1);
        }

        if (this.team != "arena1" && this.team != "arena2" && this.team != "arena3" && this.team != "arena4" && this.team != "arena5")
        {
            this.allys.push("arena1");
            this.allys.push("arena2");
            if (this.team != "player")
            {
                this.allys.push("arena3");
                this.allys.push("arena4");
            }
        }

        if (this.team == "player")
        {
            if (player.kelPeace)
            {
                this.allys.push("Kel");
            }
            if (player.thengarPeace)
            {
                this.allys.push("Thengar");
            }
            if (player.freynorPeace)
            {
                this.allys.push("Freynor");
            }
            if (player.aldrekPeace)
            {
                this.allys.push("Aldrek");
            }
            if (player.orgellPeace)
            {
                this.allys.push("Orgell");
            }
            if (player.vardanPeace)
            {
                this.allys.push("Vardan");
            }
            if (player.cephritePeace)
            {
                this.allys.push("Cephrite");
            }
            if (player.nirwadenPeace)
            {
                this.allys.push("Nirwaden");
            }
            if (player.theBalgurMercenariesPeace)
            {
                this.allys.push("TheBalgurMercenaries");
            }
            if (player.estolGangPeace)
            {
                this.allys.push("EstolGang");
                this.allys.push("EstolGang2");
            }
            if (player.sylkeemPeace)
            {
                this.allys.push("Sylkeem");
            }
        }
        if (this.team == "arena1" || this.team == "arena2" || this.team == "arena3" || this.team == "arena4" || this.team == "arena5")
        {
            if (this.team != "arena3" && this.team != "arena4" && this.team != "arena5")
            {
                this.allys.push("player");
            }
            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            this.allys.push("Kel");
            this.allys.push("Freynor");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
            this.allys.push("Sylkeem");
        }
        if (this.team == "Freynor")
        {
            if (player.freynorPeace && player.freynorFaction > -50)
            {
                this.allys.push("player");
            }

            if (this.type == "Person" || this.type == "Soldier")
            {
                if (typeof(this.ultra) != "undefined")
                {
                    if (this.ultra.race == "Sylkeem")
                    {
                        this.allys.push("herd");
                    }
                }
            }
            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            this.allys.push("Kel");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
        }
        if (this.team == "Vardan")
        {
            if (player.vardanPeace && player.vardanFaction > -50)
            {
                this.allys.push("player");
            }
            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            this.allys.push("Kel");
            this.allys.push("Freynor");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
            this.allys.push("Sylkeem");
        }
        if (this.team == "Kel")
        {
            if (player.kelPeace && player.kelFaction > -50 && quests.atalinEmpressWarPermission == false)
            {
                this.allys.push("player");
            }

            this.allys.push("herdia");
            this.allys.push("Freynor");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            if (quests.atalinEmpressWarPermission == false)
            {
                this.allys.push("Nirwaden");
            }
            this.allys.push("clamia");
            this.allys.push("EstolGang");
            this.allys.push("Sylkeem");
        }
        if (this.team == "Thengar")
        {
            if (player.thengarPeace && player.thengarFaction > -50)
            {
                this.allys.push("player");
            }
            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Freynor");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
        }
        if (this.team == "Aldrek")
        {
            if (player.aldrekPeace && player.aldrekFaction > -50)
            {
                this.allys.push("player");
            }

            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            this.allys.push("Kel");
            this.allys.push("Freynor");
            this.allys.push("Vardan");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
            this.allys.push("Sylkeem");
        }
        if (this.team == "Orgell")
        {
            if (player.orgellPeace && player.orgellFaction > -50)
            {
                this.allys.push("player");
            }
            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            this.allys.push("Kel");
            this.allys.push("Freynor");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
            this.allys.push("Sylkeem");
        }
        if (this.team == "Cephrite")
        {
            if (player.cephritePeace && player.cephriteFaction > -50)
            {
                this.allys.push("player");
            }

            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            this.allys.push("Kel");
            this.allys.push("Freynor");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
            this.allys.push("Sylkeem");
        }
        if (this.team == "Nirwaden")
        {
            if (player.nirwadenPeace && player.nirwadenFaction > -50)
            {
                this.allys.push("player");
            }

            this.allys.push("herdia");
            this.allys.push("TheBalgurMercenaries");
            this.allys.push("Thengar");
            if (quests.atalinEmpressWarPermission == false)
            {
                this.allys.push("Kel");
            }
            this.allys.push("Freynor");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
        }
        if (this.team == "TheBalgurMercenaries")
        {
            if (player.theBalgurMercenariesPeace && player.theBalgurMercenariesFaction > -50)
            {
                this.allys.push("player");
            }

            this.allys.push("herdia");
            this.allys.push("Thengar");
            this.allys.push("Freynor");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
        }
        if (this.team == "EstolGang")
        {
            if (player.estolGangPeace && player.estolgangFaction > -50)
            {
                this.allys.push("player");
            }

            this.allys.push("TheBalgurMercenaries");
            this.allys.push("herdia");
            this.allys.push("Thengar");
            this.allys.push("Freynor");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("Nirwaden");
            this.allys.push("clamia");
            this.allys.push("EstolGang2");
            this.allys.push("Sylkeem");
        }
        if (this.team == "EstolGang2")
        {
            if (player.estolGangPeace && player.estolgangFaction > -1)
            {
                this.allys.push("player");
            }

            this.allys.push("herdia");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
        }
        if (this.team == "Sylkeem")
        {
            if (player.sylkeemPeace && player.sylkeemRepublicansFaction > -50)
            {
                this.allys.push("player");
            }

            this.allys.push("herd");
            this.allys.push("herdia");
            this.allys.push("Aldrek");
            this.allys.push("Orgell");
            this.allys.push("Vardan");
            this.allys.push("Cephrite");
            this.allys.push("clamia");
            this.allys.push("EstolGang");
        }
        if (this.team == "werewolf")
        {
            this.allys.push("wolf");
        }
        if (this.team == "wolf")
        {
            if (player.lycanthropy)
            {
                this.allys.push("player");
            }
            this.allys.push("wild");
            this.allys.push("werewolf");
            this.allys.push("etnia");
            this.allys.push("shehidia");
            this.allys.push("narthwarpia");
            this.allys.push("docile");
            this.allys.push("bearia");
            this.allys.push("ulgoyia");
            this.allys.push("clamia");
        }
        if (this.team == "wild")
        {
            this.allys.push("etnia");
            this.allys.push("shehidia");
            this.allys.push("narthwarpia");
            this.allys.push("docile");
            this.allys.push("bearia");
            this.allys.push("ulgoyia");
            this.allys.push("clamia");
            this.allys.push("wolf");
        }
        if (this.team == "herd")
        {
            if (player.form == "selkie" && !cKey && !rKey && !this.disturbed)
            {
                this.allys.push("player");
            }

            this.allys.push("docile");
            this.allys.push("herdia");
            this.allys.push("clamia");
            this.allys.push("walrusia");
        }
        if (this.team == "herdia")
        {
            this.allys.push("herd");
            this.allys.push("docile");
        }
        if (this.team == "undead")
        {
            if (player.vamprism)
            {
                this.allys.push("player");
            }
            this.allys.push("docile");
            this.allys.push("gargoyle");
        }
        if (this.team == "sprite")
        {
            this.allys.push("herd");
            this.allys.push("cheshiria");
            this.allys.push("docile");
        }
        if (this.team == "clamia")
        {
            this.allys.push("docile");
            this.allys.push("walrusia"); //walruses are scary to them so they stay inside their shells
            this.allys.push("moltia"); //same
        }
        if (this.team == "etnia")
        {
            this.allys.push("lombrisia");
            this.allys.push("shehidia");
            this.allys.push("ulgoyia");
            this.allys.push("docile");
            this.allys.push("clamia");
        }
        if (this.team == "cangrejia")
        {
            this.allys.push("docile");
            this.allys.push("clamia");
        }
        if (this.team == "ulgoyia")
        {
            this.allys.push("lombrisia");
            this.allys.push("shehidia");
            this.allys.push("anemonia");
            this.allys.push("docile");
            this.allys.push("clamia");
            this.allys.push("moltia");
        }
        if (this.team == "lombrisia")
        {
            this.allys.push("shehidia");
            this.allys.push("ulgoyia");
            this.allys.push("anemonia");
            this.allys.push("docile");
            this.allys.push("clamia");
        }
        if (this.team == "shehidia")
        {
            this.allys.push("etnia");
            this.allys.push("lombrisia");
            this.allys.push("ulgoyia");
            this.allys.push("anemonia");
            this.allys.push("docile");
            this.allys.push("clamia");
            this.allys.push("moltia");
        }
        if (this.team == "narthwarpia")
        {
            this.allys.push("wild");
            this.allys.push("gribia");
            this.allys.push("bearia");
            this.allys.push("docile");
        }
        if (this.team == "balkuria")
        {
            this.allys.splice(this.allys.indexOf("balkuria"), 1);
            this.allys.push("docile");
            this.allys.push("clamia");
        }
        if (this.team == "docile") //Narthwarps that are not in a hunting mood. //Gribs that have betrayed their very nature and have dedicated their lives solely to hunting the player. //Bears that just aren't in the mood to hunt... anything but you.
        {
            this.allys.push("herd");
            this.allys.push("wild");
            this.allys.push("gribia");
            this.allys.push("bearia");
            this.allys.push("shehidia");
            this.allys.push("ulgoyia");
            this.allys.push("narthwarpia");
            this.allys.push("berulnia");
            this.allys.push("lombrisia");
            this.allys.push("etnia");
            this.allys.push("cangrejia");
            this.allys.push("anemonia");
            this.allys.push("balkuria");
            this.allys.push("clamia");
            this.allys.push("moltia");
        }
        if (this.team == "gribia")
        {
            this.allys.push("shehidia");
            this.allys.push("narthwarpia");
            this.allys.push("docile");
            this.allys.push("bearia");
            this.allys.push("ulgoyia");
            this.allys.push("clamia");
        }
        if (this.team == "moltia")
        {
            this.allys.push("shehidia");
            this.allys.push("docile");
            this.allys.push("ulgoyia");
            this.allys.push("clamia");
        }
        if (this.team == "anemonia")
        {
            this.allys.push("docile");
            this.allys.push("shehidia");
            this.allys.push("ulgoyia");
            this.allys.push("lombrisia");
            this.allys.push("clamia");
        }
        if (this.team == "bearia")
        {
            this.allys.push("shehidia");
            this.allys.push("narthwarpia");
            this.allys.push("docile");
            this.allys.push("gribia");
            this.allys.push("wild");
            this.allys.push("clamia");
        }
        if (this.team == "berulnia")
        {
            this.allys.push("docile");
            this.allys.push("clamia");
        }
        if (this.team == "gargoyle")
        {
            this.allys.push("docile");
            this.allys.push("undead");
        }
        if (this.team == "walrusia")
        {
            this.allys.push("docile");
            this.allys.push("clamia");
            this.allys.push("herd");
        }
    };

    this.isSameTypeNearby = function(x, y, range, type)
    {
        this.numberOfSameTypeNearby = 0;
        var rotfl = false;
        for (var lol = 0; lol < ArtificialIntelligenceAccess.length; lol++)
        {
            if (ArtificialIntelligenceAccess[lol].type == type && ArtificialIntelligenceAccess[lol] !== this)
            {
                if (ArtificialIntelligenceAccess[lol].X <= x + range && ArtificialIntelligenceAccess[lol].X >= x - range && ArtificialIntelligenceAccess[lol].Y <= y + range && ArtificialIntelligenceAccess[lol].Y >= y - range)
                {
                    this.numberOfSameTypeNearby += 1;
                    rotfl = true;
                }
            }
        }
        return rotfl;
    };

    //this points the unit toward the main character.
    this.pointTowardsPlayer = function()
    {
        if (!this.suspendConflictingPointSystems && !this.petrified && !this.scared)
        {
            var dtp = this.DTP();
            if (dtp < this.rangeOfSight && this.blinded == false) //if the player is close enough to the unit the unit will rotate toward him/her.
            {
                this.playerSeen = true;
                if (this.team != "player")
                {
                    this.newRotation = Math.atan2(Y - this.Y, X - this.X) + Math.PI;
                    //console.log(this.rotation + " | " + this.newRotation);
                }
                else
                {
                    if (rKey)
                    {
                        this.fleeing = true;
                        this.newRotation = Math.atan2(Y - this.Y, X - this.X); //The player sends their minions away from them with the tild key
                    }
                    else if (tKey)
                    {
                        this.fleeing = true;
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI; //The player sends their minions away from them with the tild key
                    }
                    else
                    {
                        this.newRotation = Math.atan2(Y - this.Y, X - this.X) + Math.PI; //the player's minions return to their master if the master is in sight
                    }
                }
            }
            else if (this.blinded == true)
            {
                this.playerSeen = false;
                var rndmz = Math.floor(Math.random() * 13);
                if (rndmz <= 3)
                {
                    this.newRotation += 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation -= 1/2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(Y - this.Y, X - this.X) + Math.PI;
                }
            }
            else
            {
                this.playerSeen = false;
            }
        }
    };

    this.noticePlayer = function()
    {
        var dtp = this.DTP();
        if (dtp < this.rangeOfSight && this.blinded == false) //if the player is close enough to the unit the unit will rotate toward him/her.
        {
            this.playerSeen = true;
        }
        else
        {
            this.playerSeen = false;
        }
    };

    this.pointAway = function(thing)
    {
        if (!this.suspendConflictingPointSystems && !this.petrified)
        {
            if (this.blinded == false)
            {
                this.newRotation = Math.atan2(thing.Y - this.Y, thing.X - this.X);
            }
            else if (this.blinded == true)
            {
                var rndmz = Math.floor(Math.random() * 13);
                if (rndmz <= 3)
                {
                    this.newRotation += 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation -= 1/2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(thing.Y - this.Y, thing.X - this.X);
                }
            }
        }
    };

    //this points away from the player.
    this.pointAwayFromPlayer = function()
    {
        if (!this.suspendConflictingPointSystems && !this.petrified)
        {
            var dtp = this.DTP();
            if (dtp < this.rangeOfSight && this.blinded == false) //if the player is close enough to the unit the unit will rotate toward him/her.
            {
                this.playerSeen = true;
                if (this.team != "player")
                {
                    this.fleeing = true;
                    this.newRotation = Math.atan2(Y - this.Y, X - this.X);
                    //console.log(this.rotation + " | " + this.newRotation);
                }
                else
                {
                    if (rKey)
                    {
                        this.fleeing = true;
                        this.newRotation = Math.atan2(Y - this.Y, X - this.X); //The player sends their minions away from them with the tild key
                    }
                    else if (tKey)
                    {
                        this.fleeing = true;
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI; //The player sends their minions away from them with the tild key
                    }
                    else
                    {
                        this.newRotation = Math.atan2(Y - this.Y, X - this.X) + Math.PI; //the player's minions return to their master if the master is in sight
                    }
                }
            }
            else if (this.blinded == true)
            {
                this.playerSeen = false;
                var rndmz = Math.floor(Math.random() * 14);
                if (rndmz <= 3)
                {
                    this.newRotation -= 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation += 1 / 2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(Y - this.Y, X - this.X);
                }
            }
            else
            {
                this.fleeing = false;
                this.playerSeen = false;
            }
        }
    };

    this.isChargeBlocked = function() //if a charger is blocked from getting to its target it cannot exploit its unnaturally long range to attack the target from afar.
    {
        var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * this.speed);
        var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * this.speed);

        if (!this.isObstructed(nextX, nextY) || this.flying == true || this.underground == true)
        {
            return false;
        }
        else
        {
            return true;
        }
    };


    //Wander -- move between randomly selected points within a set radius.
    this.wanderX = this.X;
    this.wanderY = this.Y;
    this.wandering = false;
    this.wanderHold = false;

    this.wander = function(XX, YY, totalZone, stepZone, manual) //total zone is the total amount of area that is allowed for wandering, while step zone is the a of space available for determining where the next movement objective should be.
    {
        this.dtd = function() // distance to destination
        {
            return Math.sqrt((this.wanderX - this.X)*(this.wanderX - this.X) + (this.wanderY - this.Y)*(this.wanderY - this.Y));
        };

        //if unit is outside of wander zone reset to center
        if (this.X > XX + totalZone && this.X < XX - totalZone && this.Y > YY + totalZone && this.Y < YY - totalZone)
        {
            this.wanderX = XX;
            this.wanderY = YY;
            this.wandering = true;
        }

        if (!this.wandering && !this.wanderHold)
        {
            if (stepZone == false || stepZone >= totalZone)
            {
                this.wandering = true;
                this.wanderX = XX + ((Math.random() * totalZone) - 1/2 * totalZone);
                this.wanderY = YY + ((Math.random() * totalZone) - 1/2 * totalZone);
            }
            else
            {
                this.wanderX = this.X + ((Math.random() * stepZone) - 1/2 * stepZone);
                this.wanderY = this.Y + ((Math.random() * stepZone) - 1/2 * stepZone);

                if (this.wanderX <= XX + totalZone && this.wanderX >= XX - totalZone && this.wanderY <= YY + totalZone && this.wanderY >= YY - totalZone)
                {
                    this.wandering = true;
                }
            }
        }
        else
        {
            if (!this.suspendConflictingPointSystems && !this.petrified)
            {
                this.newRotation = Math.atan2(this.wanderY - this.Y, this.wanderX - this.X) + Math.PI; //Point toward the destination.

                if (this.dtd() > ((TTD / 16.75) * this.speed + 1))
                {
                    var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned * timeSpeed / this.timeResistance;
                    var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned * timeSpeed / this.timeResistance;

                    if (!this.isObstructed(nextX, nextY) || this.flying == true || this.underground == true)
                    {
                        this.X = nextX;
                        this.Y = nextY;
                        this.moving = true;
                    }
                    else
                    {
                        this.evadeObstruction();
                    }
                }
                else
                {
                    if (manual)
                    {
                        this.wandering = false;
                        this.wanderHold = true;
                    }
                    this.moving = false;
                }
            }
        }
    };

    //Patrol -- move between set locations on the map.
    this.patrolStart = true;

    this.patrolDTP = this.DTP();
    this.patrolDestinationX;
    this.patrolDestinationY;
    this.patrolDistance;
    this.patrolArrived = false;
    this.patrolProgress = 0;

    this.patrol = function(numberOfStops, loop) //number of places that the unit goes to; whether or not the unit will head back towards the first stop or retrace its steps;
    {

        this.dtd = function() // distance to destination
        {
            this.patrolDistance = Math.sqrt((this.patrolDestinationX - this.X)*(this.patrolDestinationX - this.X) + (this.patrolDestinationY - this.Y)*(this.patrolDestinationY - this.Y));
        };

        if (numberOfStops == 1)
        {
            this.patrolArrived = false;
            this.patrolDestinationX = this.ultra.route[0][0];
            this.patrolDestinationY = this.ultra.route[0][1];
            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 2)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 2 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }

            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 3)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 3 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }

            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 4)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 4 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }

            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 5)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 5 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }

            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 6)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 6 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }

            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 7)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 7 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 8)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 8 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 9)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 9 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 10)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 10 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 11)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 11 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 12)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 12 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 13)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 13 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 14)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 14 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 15)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 15 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 16)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 17)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 18)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 19)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 20)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 21)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 22)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 23)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 24)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 25)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 26)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 27)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 28)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 29)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 30)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }
            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 31)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 32)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[31][0];
                this.patrolDestinationY = this.ultra.route[31][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 32 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 33)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[31][0];
                this.patrolDestinationY = this.ultra.route[31][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 32 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[32][0];
                this.patrolDestinationY = this.ultra.route[32][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 33 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 34)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[31][0];
                this.patrolDestinationY = this.ultra.route[31][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 32 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[32][0];
                this.patrolDestinationY = this.ultra.route[32][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 33 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[33][0];
                this.patrolDestinationY = this.ultra.route[33][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 34 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 35)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[31][0];
                this.patrolDestinationY = this.ultra.route[31][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 32 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[32][0];
                this.patrolDestinationY = this.ultra.route[32][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 33 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[33][0];
                this.patrolDestinationY = this.ultra.route[33][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 34 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[34][0];
                this.patrolDestinationY = this.ultra.route[34][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 35 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 36)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[31][0];
                this.patrolDestinationY = this.ultra.route[31][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 32 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[32][0];
                this.patrolDestinationY = this.ultra.route[32][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 33 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[33][0];
                this.patrolDestinationY = this.ultra.route[33][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 34 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[34][0];
                this.patrolDestinationY = this.ultra.route[34][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 35 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[35][0];
                this.patrolDestinationY = this.ultra.route[35][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 36 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }
        else if (numberOfStops == 36)
        {
            if (this.patrolProgress == 0)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 1 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[1][0];
                this.patrolDestinationY = this.ultra.route[1][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 2 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[2][0];
                this.patrolDestinationY = this.ultra.route[2][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 3 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[3][0];
                this.patrolDestinationY = this.ultra.route[3][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 4 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[4][0];
                this.patrolDestinationY = this.ultra.route[4][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 5 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[5][0];
                this.patrolDestinationY = this.ultra.route[5][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 6 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[6][0];
                this.patrolDestinationY = this.ultra.route[6][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 7 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[7][0];
                this.patrolDestinationY = this.ultra.route[7][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 8 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[8][0];
                this.patrolDestinationY = this.ultra.route[8][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 9 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[9][0];
                this.patrolDestinationY = this.ultra.route[9][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 10 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[10][0];
                this.patrolDestinationY = this.ultra.route[10][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 11 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[11][0];
                this.patrolDestinationY = this.ultra.route[11][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 12 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[12][0];
                this.patrolDestinationY = this.ultra.route[12][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 13 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[13][0];
                this.patrolDestinationY = this.ultra.route[13][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 14 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[14][0];
                this.patrolDestinationY = this.ultra.route[14][1];
                this.patrolArrived = false;
            }
            else if (this.patrolProgress == 15 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[15][0];
                this.patrolDestinationY = this.ultra.route[15][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 16 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[16][0];
                this.patrolDestinationY = this.ultra.route[16][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 17 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[17][0];
                this.patrolDestinationY = this.ultra.route[17][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 18 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[18][0];
                this.patrolDestinationY = this.ultra.route[18][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 19 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[19][0];
                this.patrolDestinationY = this.ultra.route[19][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 20 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[20][0];
                this.patrolDestinationY = this.ultra.route[20][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 21 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[21][0];
                this.patrolDestinationY = this.ultra.route[21][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 22 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[22][0];
                this.patrolDestinationY = this.ultra.route[22][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 23 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[23][0];
                this.patrolDestinationY = this.ultra.route[23][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 24 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[24][0];
                this.patrolDestinationY = this.ultra.route[24][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 25 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[25][0];
                this.patrolDestinationY = this.ultra.route[25][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 26 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[26][0];
                this.patrolDestinationY = this.ultra.route[26][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 27 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[27][0];
                this.patrolDestinationY = this.ultra.route[27][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 28 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[28][0];
                this.patrolDestinationY = this.ultra.route[28][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 29 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[29][0];
                this.patrolDestinationY = this.ultra.route[29][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 30 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[30][0];
                this.patrolDestinationY = this.ultra.route[30][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 31 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[31][0];
                this.patrolDestinationY = this.ultra.route[31][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 32 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[32][0];
                this.patrolDestinationY = this.ultra.route[32][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 33 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[33][0];
                this.patrolDestinationY = this.ultra.route[33][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 34 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[34][0];
                this.patrolDestinationY = this.ultra.route[34][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 35 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[35][0];
                this.patrolDestinationY = this.ultra.route[35][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 36 && this.patrolArrived == true)
            {
                this.patrolDestinationX = this.ultra.route[36][0];
                this.patrolDestinationY = this.ultra.route[36][1];
                this.patrolArrived = false;
            }

            if (this.patrolProgress == 37 && this.patrolArrived == true && loop == true)
            {
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                this.patrolProgress = 0;
                this.patrolArrived = false;
            }


            if (this.patrolArrived == false)
            {
                this.dtd();
            }
        }

        this.patrolDTP = this.DTP();
        if (this.patrolDTP < this.rangeOfSight) //if the player is close enough to the unit the unit will rotate toward him/her.
        {
            this.playerSeen = true;
        }
        else
        {
            this.playerSeen = false;
        }

        if (numberOfStops != 0)
        {
            if (!this.suspendConflictingPointSystems && !this.petrified)
            {
                this.newRotation = Math.atan2(this.patrolDestinationY - this.Y, this.patrolDestinationX - this.X) + Math.PI; //Point toward the destination.

                if (this.patrolDistance > ((TTD / 16.75) * this.speed + 1)) //If the buffer between the target and this unit is not reached yet, and this has not been obstructed by anything, and the target is within sight then move a little bit in the direction of that target.
                {
                    var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned * timeSpeed / this.timeResistance;
                    var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned * timeSpeed / this.timeResistance;

                    if (!this.isObstructed(nextX, nextY) || this.flying == true || this.underground == true)
                    {
                        this.X = nextX;
                        this.Y = nextY;
                        this.moving = true;

                        if (this.type == "Person" || this.type == "Soldier")
                        {
                            if (new Date().getTime() - this.directPatrolTime > 1500)
                            {
                                this.rotation = Math.atan2(this.patrolDestinationY - this.Y, this.patrolDestinationX - this.X) + Math.PI; //Point toward the destination.
                            }
                        }
                    }
                    else
                    {
                        this.evadeObstruction();
                        if (this.type == "Person" || this.type == "Soldier")
                        {
                            this.directPatrolTime = new Date().getTime();
                        }
                    }
                }
                else
                {
                    this.patrolArrived = true;
                    this.moving = false;
                    if (this.patrolProgress == 0)
                    {
                        this.patrolProgress = 1;
                    }
                    else if (this.patrolProgress == 1)
                    {
                        this.patrolProgress = 2;
                    }
                    else if (this.patrolProgress == 2)
                    {
                        this.patrolProgress = 3;
                    }
                    else if (this.patrolProgress == 3)
                    {
                        this.patrolProgress = 4;
                    }
                    else if (this.patrolProgress == 4)
                    {
                        this.patrolProgress = 5;
                    }
                    else if (this.patrolProgress == 5)
                    {
                        this.patrolProgress = 6;
                    }
                    else if (this.patrolProgress == 6)
                    {
                        this.patrolProgress = 7;
                    }
                    else if (this.patrolProgress == 7)
                    {
                        this.patrolProgress = 8;
                    }
                    else if (this.patrolProgress == 8)
                    {
                        this.patrolProgress = 9;
                    }
                    else if (this.patrolProgress == 9)
                    {
                        this.patrolProgress = 10;
                    }
                    else if (this.patrolProgress == 10)
                    {
                        this.patrolProgress = 11;
                    }
                    else if (this.patrolProgress == 11)
                    {
                        this.patrolProgress = 12;
                    }
                    else if (this.patrolProgress == 12)
                    {
                        this.patrolProgress = 13;
                    }
                    else if (this.patrolProgress == 13)
                    {
                        this.patrolProgress = 14;
                    }
                    else if (this.patrolProgress == 14)
                    {
                        this.patrolProgress = 15;
                    }
                    else if (this.patrolProgress == 15)
                    {
                        this.patrolProgress = 16;
                    }
                    else if (this.patrolProgress == 16)
                    {
                        this.patrolProgress = 17;
                    }
                    else if (this.patrolProgress == 17)
                    {
                        this.patrolProgress = 18;
                    }
                    else if (this.patrolProgress == 18)
                    {
                        this.patrolProgress = 19;
                    }
                    else if (this.patrolProgress == 19)
                    {
                        this.patrolProgress = 20;
                    }
                    else if (this.patrolProgress == 20)
                    {
                        this.patrolProgress = 21;
                    }
                    else if (this.patrolProgress == 21)
                    {
                        this.patrolProgress = 22;
                    }
                    else if (this.patrolProgress == 22)
                    {
                        this.patrolProgress = 23;
                    }
                    else if (this.patrolProgress == 23)
                    {
                        this.patrolProgress = 24;
                    }
                    else if (this.patrolProgress == 24)
                    {
                        this.patrolProgress = 25;
                    }
                    else if (this.patrolProgress == 25)
                    {
                        this.patrolProgress = 26;
                    }
                    else if (this.patrolProgress == 26)
                    {
                        this.patrolProgress = 27;
                    }
                    else if (this.patrolProgress == 27)
                    {
                        this.patrolProgress = 28;
                    }
                    else if (this.patrolProgress == 28)
                    {
                        this.patrolProgress = 29;
                    }
                    else if (this.patrolProgress == 29)
                    {
                        this.patrolProgress = 30;
                    }
                    else if (this.patrolProgress == 30)
                    {
                        this.patrolProgress = 31;
                    }
                    else if (this.patrolProgress == 31)
                    {
                        this.patrolProgress = 32;
                    }
                    else if (this.patrolProgress == 32)
                    {
                        this.patrolProgress = 33;
                    }
                    else if (this.patrolProgress == 33)
                    {
                        this.patrolProgress = 34;
                    }
                    else if (this.patrolProgress == 34)
                    {
                        this.patrolProgress = 35;
                    }
                    else if (this.patrolProgress == 35)
                    {
                        this.patrolProgress = 36;
                    }
                    else if (this.patrolProgress == 36)
                    {
                        this.patrolProgress = 37;
                    }
                }
            }
        }

    };

    //this determines a unit's range of sight in a number of different situations.
    this.rangeOfSightCalculator = function(baseSight, hostile) //base sight is the base amount of rangeOfSight that the unit has, hostile implys that this particular type of unit will persue its prey for much longer than others would.
    {
        if (timeOfDay == "Night" && this.nightVision != true)
        {
            this.baseSight = baseSight * 0.65;
        }
        else
        {
            this.baseSight = baseSight;
        }
        // if the extra range is expired then set it to 0.
        if (new Date().getTime() - this.extraRangeTime > 4000)
        {
            this.extraRange = 0;
        }
        if (this.team == "player" && this.target == player) //this allows the units under the player character's control to see the player at any distance.
        {
            if (fKey || tKey)
            {
                this.extraRange = this.DTP();
            }
        }
        var canStealth = false;
        if (this.type == "Person" && !this.disturbed && !this.playerSeen || this.type == "Person" && this.disturbed && !this.playerSeen || this.type == "Soldier" && !this.disturbed && !this.playerSeen || this.type == "Soldier" && this.disturbed && !this.playerSeen || this.type != "Person" && this.type != "Soldier" && !this.disturbed && !this.playerSeen)
        {
            canStealth = true;
        }
        else if (this.type == "Person" && this.playerSeen || this.type == "Soldier" && this.playerSeen || this.type != "Person" && this.type != "Soldier" && this.playerSeen)
        {
            if (this.type != "Neev")
            {
                player.obscurity = false; //Cancels player's invisibility if the player is seen
            }
        }

        if (this.target == player)
        {
            if (wKey == true && shiftKey == true && this.playerSeen == false && !altKey && player.subtlety != true)
            {
                if (hostile == false)
                {
                    this.rangeOfSight = this.baseSight * 1.1 + this.extraRange;
                }
                else
                {
                    this.rangeOfSight = this.baseSight * 1.35 + this.extraRange;
                }
            }
            else if (canStealth && altKey == true && this.resistances.indexOf("stealth") == -1 || canStealth && player.subtlety && this.resistances.indexOf("stealth") == -1) // If sneaking and the player has not yet been noticed by the enemy...
            {
                if (player.subtlety)
                {
                    this.rangeOfSight = this.baseSight * (13 / (14 + (70 * 2))) + this.extraRange;
                }
                else
                {
                    this.rangeOfSight = this.baseSight * (13 / (14 + (player.getDexterity() * 2))) + this.extraRange; // the enemy's sight is severely lowered.
                }
            }
            else if (this.playerSeen == false) //otherwise if the enemy had already noticed the player...
            {
                this.rangeOfSight = this.baseSight + this.extraRange; //the enemy will retain its rangeOfSight.
            }
            else if (this.playerSeen == true && hostile == "none" || this.disturbed == true && hostile == "none")
            {
                this.rangeOfSight = this.baseSight + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == false || this.disturbed == true && hostile == false)
            {
                this.rangeOfSight = this.baseSight * 1.2 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "mildly" || this.disturbed == true && hostile == "mildly")
            {
                this.rangeOfSight = this.baseSight * 1.45 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == true || this.disturbed == true && hostile == true)
            {
                this.rangeOfSight = this.baseSight * 1.7 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "very" || this.disturbed == true && hostile == "very")
            {
                this.rangeOfSight = this.baseSight * 2 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "extremely" || this.disturbed == true && hostile == "extremely")
            {
                this.rangeOfSight = this.baseSight * 2.5 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "unrelenting" || this.disturbed == true && hostile == "unrelenting")
            {
                this.rangeOfSight = this.baseSight * 3 + this.extraRange;
            }

            if (this.disturbed == true)
            {
                if (this.type == "Person" && this.playerSeen || this.type == "Soldier" && this.playerSeen || this.type != "Person" && this.type != "Soldier")
                {
                    if (!this.shortSighted)
                    {
                        this.rangeOfSight = this.baseSight * 4 + this.extraRange;
                    }
                }
            }

            //If superstealth is active and the player is not yet seen then the the unit fails to notice the player.
            if (this.playerSeen == false && player.superStealth && this.resistances.indexOf("stealth") == -1)
            {
                this.rangeOfSight = 0;
            }
            else if (this.team != "player")
            {
                if (this.type == "Person" && this.disturbed && this.playerSeen || this.type == "Soldier" && this.disturbed && this.playerSeen || this.type != "Person" && this.type != "Soldier" && this.playerSeen)
                {
                    player.superStealthTime = 0;
                }
            }
        }
        else if (this.target != "none")
        {
            if (this.target.flying != true && this.target.speed >= 4)
            {
                if (hostile == false)
                {
                    this.rangeOfSight = this.baseSight * 1.1 + this.extraRange;
                }
                else
                {
                    this.rangeOfSight = this.baseSight * 1.35 + this.extraRange;
                }
            }
            else if (!this.flying && this.target.flying && !this.disturbed || this.target.speed <= 1 && !this.disturbed) // slow and flying enemies are harder to track for non-flying units.
            {
                this.rangeOfSight = this.baseSight * 0.85 + this.extraRange; // the enemy's sight is a bit lowered.
            }
            else if (hostile == "none" || this.disturbed == true && hostile == "none")
            {
                this.rangeOfSight = this.baseSight + this.extraRange;
            }
            else if (hostile == false || this.disturbed == true && hostile == false)
            {
                this.rangeOfSight = this.baseSight * 1.2 + this.extraRange;
            }
            else if (hostile == "mildly" || this.disturbed == true && hostile == "mildly")
            {
                this.rangeOfSight = this.baseSight * 1.45 + this.extraRange;
            }
            else if (hostile == true || this.disturbed == true && hostile == true)
            {
                this.rangeOfSight = this.baseSight * 1.7 + this.extraRange;
            }
            else if (hostile == "very" || this.disturbed == true && hostile == "very")
            {
                this.rangeOfSight = this.baseSight * 2 + this.extraRange;
            }
            else if (hostile == "extremely" || this.disturbed == true && hostile == "extremely")
            {
                this.rangeOfSight = this.baseSight * 2.5 + this.extraRange;
            }
            else if (hostile == "unrelenting" || this.disturbed == true && hostile == "unrelenting")
            {
                this.rangeOfSight = this.baseSight * 3 + this.extraRange;
            }
            else
            {
                this.rangeOfSight = this.baseSight + this.extraRange; //the enemy will retain its rangeOfSight.
            }

            if (this.disturbed == true)
            {
                if (!this.shortSighted)
                {
                    this.rangeOfSight = this.baseSight * 4 + this.extraRange;
                }
            }

            if (this.target.superStealth && this.resistances.indexOf("stealth") == -1)
            {
                this.rangeOfSight = 0;
            }
        }
        else
        {
            this.rangeOfSight = this.baseSight + this.extraRange;
        }
    };

    //Units may casually speak every so often. //VOICE
    this.voice = function(soundList, range, repeat, startSoundRange)
    {
        if (startSoundRange != false)
        {
            if (this.DTP() <= startSoundRange)
            {
                this.startVoice = true;
            }
        }
        else
        {
            this.startVoice = true;
        }

        if (this.startVoice == true)
        {
            var sounds = soundList;
            for (var v = 0; v < soundList.length; v++)
            {
                sounds[v].volume = Math.max(0, Math.min(1, 1 - (this.DTP() / range)));
            }

            if (new Date().getTime() - this.voiceTime >= this.voiceFrequency * 1000)
            {
                this.voiceTime = new Date().getTime();

                var rnd = Math.floor(Math.random() * soundList.length);
                var hitz = false;

                if (!repeat)
                {
                    for (var i = 0; i < this.voicedSounds.length; i++)
                    {
                        if (this.voicedSounds[i] == rnd)
                        {
                            hitz = true;
                        }
                    }
                }

                if (hitz == false)
                {
                    if (this.DTP() <= range)
                    {
                        for (var j = 0; j < soundList.length; j++)
                        {
                            if (j == rnd)
                            {
                                if (player.cyrinthilimTrip)
                                {
                                    sounds[j].playbackRate = -2;
                                    sounds[j].currentTime = soundList[j].duration;
                                }
                                else
                                {
                                    sounds[j].playbackRate = 1;
                                    sounds[j].currentTime = 0;
                                }

                                this.voicedSounds.push(rnd);
                                sounds[j].play();
                            }
                        }
                    }
                }
            }
        }
    };

    //This moves the unit forwards either away from or toward the player.
    this.moveInRelationToPlayer = function() //the fraction of PI is the amount of angle-adjustment for the specific type of unit.
    {
        if (!this.suspendConflictingPointSystems && !this.petrified)
        {
            var dtp = this.DTP();
            if (dtp > this.engagementRadius && dtp < this.rangeOfSight && !this.stay || this.fleeing == true && dtp < this.rangeOfSight && !this.stay || this.charger == true && dtp <= this.rangeOfSight && !this.stay || this.followAttack && player.movingType != 0 && dtp < this.rangeOfSight && !this.stay || this.alwaysMove) //If the buffer between the target and this unit is not reached yet, and this has not been obstructed by anything, and the target is within sight then move a little bit in the direction of that target.
            {
                var spd;
                if (this.swimming)
                {
                    spd = this.swimSpeed;
                }
                else
                {
                    spd = this.speed;
                }

                var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * spd) * this.stunned * timeSpeed / this.timeResistance;
                var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * spd) * this.stunned * timeSpeed / this.timeResistance;

                if (!this.isObstructed( nextX, nextY ) || this.flying == true || this.underground == true)
                {
                    this.X = nextX;
                    this.Y = nextY;
                    this.moving = true;
                }
                else
                {
                    this.evadeObstruction();
                }
                /*else
                 {
                 if (this.moving && this.attacking == false)
                 {
                 this.timeStoppedMoving = new Date().getTime();
                 }
                 this.moving = false;

                 if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                 {
                 this.costume = 0;
                 }
                 }*/
            }
            else
            {
                if (this.moving && this.attacking == false)
                {
                    this.timeStoppedMoving = new Date().getTime();
                }
                this.moving = false;

                if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                {
                    this.costume = 0;
                }
            }
        }
    };

    this.nearbyPlants = function(numberToList, excludeSubVariety, nectarOnly, nonPickedOnly)
    {
        var nearPlants = [];
        var checkedAlready = [];
        var nearestDistance = false;
        var closest = -1;
        var skip = false;
        var dist = false;

        for (var n = 0; n < numberToList; n++)
        {
            for (var i = 0; i < scenicList.length; i++)
            {
                if (typeof(excludeSubVariety) != "undefined")
                {
                    var nect = true;
                    var pikked = true;
                    if (nectarOnly)
                    {
                        if (scenicList[i].nectarNum <= 0)
                        {
                            nect = false;
                        }
                    }

                    if (nonPickedOnly)
                    {
                        if (scenicList[i].phase == "picked")
                        {
                            pikked = false;
                        }
                    }

                    if (scenicList[i].subVariety != excludeSubVariety && scenicList[i].variety == "plant" && nect && pikked)
                    {
                        skip = false;
                        for (var j = 0; j < checkedAlready.length; j++)
                        {
                            if (checkedAlready[j] == i)
                            {
                                skip = true;
                            }
                        }
                        if (!skip)
                        {
                            var dist = this.distanceFinder(scenicList[i].X, scenicList[i].Y);
                            //console.log("dist " + dist);
                            if (nearestDistance == false)
                            {
                                nearestDistance = dist;
                                closest = i;
                            }
                            else if (dist < nearestDistance)
                            {
                                nearestDistance = dist;
                                closest = i;
                            }
                        }
                    }
                }
                else if (scenicList[i].variety == "plant")
                {
                    skip = false;
                    for (var j = 0; j < checkedAlready.length; j++)
                    {
                        if (checkedAlready[j] == i)
                        {
                            skip = true;
                        }
                    }
                    if (!skip)
                    {
                        var dist = this.distanceFinder(scenicList[i].X, scenicList[i].Y);
                        if (nearestDistance == false)
                        {
                            nearestDistance = dist;
                            closest = i;
                        }
                        else if (dist < nearestDistance)
                        {
                            nearestDistance = dist;
                            closest = i;
                        }
                    }
                }
            }
            if (closest != -1)
            {
                nearPlants.push(scenicList[closest]);
                checkedAlready.push(closest);
                nearestDistance = false;
            }
        }
        //console.log(nearPlants);
        return nearPlants;
    };

    this.distanceFinder = function(thing1, thing2)
    {
        return Math.sqrt((thing1.X - thing2.X)*(thing1.X - thing2.X)+(thing1.Y - thing2.Y)*(thing1.Y - thing2.Y));
    };

    this.pointTowards = function(thing)
    {
        if (!this.suspendConflictingPointSystems && !this.petrified && !this.scared)
        {
            if (this.blinded == false)
            {
                this.newRotation = Math.atan2(thing.Y - this.Y, thing.X - this.X) + Math.PI;
            }
            else if (this.blinded == true)
            {
                var rndmz = Math.floor(Math.random() * 13);
                if (rndmz <= 3)
                {
                    this.newRotation += 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation -= 1/2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(thing.Y - this.Y, thing.X - this.X) + Math.PI;
                }
            }
        }
    };

    this.moveInRelationToThing = function(thing, extraSight) //move towards target thing.
    {
        //This finds out if the Thing is a unit or not.
        var isUnit = false;
        if (thing instanceof Unit)
        {
            isUnit = true;
        }

        var thingMoving = false;
        if (isUnit)
        {
             thingMoving = thing.moving;
        }

        if (!this.suspendConflictingPointSystems && !this.petrified)
        {
            var extraS = extraSight;
            if (typeof(extraS) == "undefined")
            {
                extraS = 0;
            }
            var dTo = this.distanceFinder(this, thing);
            if (dTo > this.engagementRadius && dTo < (this.rangeOfSight + extraS) && !this.stay || this.fleeing == true && dTo < (this.rangeOfSight + extraS) && !this.stay || this.charger == true && dTo <= this.rangeOfSight && !this.stay || this.followAttack && thingMoving && dTo < this.rangeOfSight && !this.stay || this.alwaysMove) //If the buffer between the target and this unit is not reached yet, and this has not been obstructed by anything, and the target is within sight then move a little bit in the direction of that target.
            {
                var spd;
                if (this.swimming)
                {
                    spd = this.swimSpeed;
                }
                else
                {
                    spd = this.speed;
                }

                if (this.mounted) //mounts go faster because they are urged to...
                {
                    var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * spd) * this.stunned * timeSpeed / this.timeResistance * 1.15 + (Math.min(0.09, 0.002 * player.getSurvivalism()) * timeSpeed / this.timeResistance);
                    var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * spd) * this.stunned * timeSpeed / this.timeResistance * 1.15 + (Math.min(0.09, 0.002 * player.getSurvivalism()) * timeSpeed / this.timeResistance);
                }
                else
                {
                    var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * spd) * this.stunned * timeSpeed / this.timeResistance;
                    var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * spd) * this.stunned * timeSpeed / this.timeResistance;
                }

                if (!this.isObstructed( nextX, nextY ) || this.flying == true || this.underground == true)
                {
                    this.X = nextX;
                    this.Y = nextY;
                    this.moving = true;
                }
                else
                {
                    this.evadeObstruction();
                }
                /*else
                 {
                 if (this.moving && this.attacking == false)
                 {
                 this.timeStoppedMoving = new Date().getTime();
                 }
                 this.moving = false;

                 if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                 {
                 this.costume = 0;
                 }
                 }*/
            }
            else
            {
                if (this.moving && this.attacking == false)
                {
                    this.timeStoppedMoving = new Date().getTime();
                }
                this.moving = false;

                if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                {
                    this.costume = 0;
                }
            }
        }
    };

    this.Attack = function(randomDamage, setDamage)
    {
        if (!this.petrified)
        {
            if (this.target == player && this.team != "player")
            {
                //this method relies on the class variable being set: this.timeBetweenAttacks = new Date().getTime();
                var dtp = this.DTP();

                if (dtp <= this.engagementRadius && dtp <= this.rangeOfSight)
                {
                    this.attacking = true;
                }
                else if (this.followThrough == false)
                {
                    this.attacking = false;
                }

                if (this.attacking == true)
                {
                    player.inCombat = true;
                    if (this.attackStyle == "rapid")
                    {
                        if (this.damage > player.armourTotal)
                        {
                            this.damage = (Math.floor(Math.random() * (randomDamage + 1)) + setDamage) * this.buffout;

                            if (player.immune && this.unavoidable == false)
                            {
                                this.damage = 0;
                            }

                            player.health -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / (16.75 + (100 * this.attackRate)));
                            player.decreaseInHealth += Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / (16.75 + (100 * this.attackRate))); // this is how much health is displayed as blood red for the player;
                        }
                    }
                    if (this.attackStyle == "chunked")
                    {
                        if (this.justAttacked == true)
                        {
                            this.finalAttackCostume = false;
                            this.justAttacked = false;
                        }

                        if (this.finalAttackCostume)
                        {
                            this.damage = (Math.floor(Math.random() * (randomDamage + 1)) + setDamage) * this.buffout;
                            if (player.immune && this.unavoidable == false)
                            {
                                this.damage = 0;
                            }
                            //console.log(this.damage + " is the damage done by " + this.ID + " through an armour total of " + player.armourTotal + ". The resulting damage was " + Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / 16.75) + ".");
                            if (player.mageShield > 0)
                            {
                                player.mageShield -= this.damage;
                                this.justAttacked = true;
                            }
                            else
                            {
                                player.health += player.mageShield;
                                //player.decreaseInHealth -= player.mageShield;
                                player.mageShield = 0;

                                player.health -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour));
                                player.decreaseInHealth += Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour));
                                this.justAttacked = true;

                                //Special Attacking Effects
                                if (this.effect == "poisonV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.poisonV = true;
                                }
                                else if (this.effect == "poisonIV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.poisonIV = true;
                                }
                                else if (this.effect == "poisonIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.poisonIII = true;
                                }
                                else if (this.effect == "poisonII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.poisonII = true;
                                }
                                else if (this.effect == "poisonI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.poisonI = true;
                                }
                                else if (this.effect == "basiliskVenom" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.poisonVI = true;
                                }
                                else if (this.effect == "stunIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.stunnedIII = true;
                                    player.stunnedTime = 11;
                                }
                                else if (this.effect == "stunII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.stunnedII = true;
                                    player.stunnedTime = 8;
                                }
                                else if (this.effect == "stunI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.stunnedI = true;
                                    player.stunnedTime = 5;
                                }
                                else if (this.effect == "sleepifyI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.sleep -= 0.5;
                                }
                                else if (this.effect == "sleepifyII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.sleep -= 1;
                                }
                                else if (this.effect == "sleepifyIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.sleep -= 2;
                                }
                                else if (this.effect == "etnaVenom" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.etnaVenTime = new Date().getTime();
                                }
                                else if (this.effect == "freezingStun")
                                {
                                    player.stunnedIII = true;
                                    player.stunnedTime = 20;
                                    player.warmth -= 20;

                                    XXX.save();
                                    XXX.translate(1/2 * CCC.width, 1/2 * CCC.height);
                                    XXX.globalAlpha = 0.6;
                                    XXX.drawImage(polypol, 1691, 240, 28, 24, - 1/2 * (28 * 1.2), - 1/2 * (24 * 1.2), (28 * 1.2), (24 * 1.2));
                                    XXX.restore();
                                }
                                else if (this.effect == "narthwarpToxin" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energy -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) / 1.5;
                                }
                                else if (this.effect == "fatigueI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 60;
                                    player.fatigueI = true;
                                }
                                else if (this.effect == "fatigueII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 60;
                                    player.fatigueII = true;
                                }
                                else if (this.effect == "fatigueIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 60;
                                    player.fatigueIII = true;
                                }
                                else if (this.effect == "fatigueIV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 60;
                                    player.fatigueIV = true;
                                }
                                else if (this.effect == "fatigueV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 60;
                                    player.fatigueV = true;
                                }
                                else if (this.effect == "grewbleToxinI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 300;
                                    player.fatigueI = true;
                                }
                                else if (this.effect == "grewbleToxinII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 300;
                                    player.fatigueII = true;
                                }
                                else if (this.effect == "grewbleToxinIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.energilTime = 360;
                                    player.fatigueIV = true;
                                }
                                else if (this.effect == "smashbackI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    var twrdsUnit = Math.atan2(this.Y - Y, this.X - X);
                                    X -= Math.cos(twrdsUnit) * 50;
                                    Y -= Math.sin(twrdsUnit) * 50;
                                    player.stunnedIII = true;
                                    player.stunnedTime = 3;
                                }
                                else if (this.effect == "smashbackII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    var twrdsUnit = Math.atan2(this.Y - Y, this.X - X);
                                    X -= Math.cos(twrdsUnit) * 125;
                                    Y -= Math.sin(twrdsUnit) * 125;
                                    player.stunnedIII = true;
                                    player.stunnedTime = 4;
                                }
                                else if (this.effect == "smashbackIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    var twrdsUnit = Math.atan2(this.Y - Y, this.X - X);
                                    X -= Math.cos(twrdsUnit) * 325;
                                    Y -= Math.sin(twrdsUnit) * 325;
                                    player.stunnedIII = true;
                                    player.stunnedTime = 4;
                                }
                                else if (this.effect == "smashbackIV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    var twrdsUnit = Math.atan2(this.Y - Y, this.X - X);
                                    X -= Math.cos(twrdsUnit) * 550;
                                    Y -= Math.sin(twrdsUnit) * 550;
                                    player.stunnedIII = true;
                                    player.stunnedTime = 5;
                                }
                                else if (this.effect == "fire" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.burningTime = new Date().getTime();
                                }
                                else if (this.effect == "blindingI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.blinded = true;
                                    player.blindedStoreTime = new Date().getTime();
                                    player.blindedTime = 2;
                                }
                                else if (this.effect == "blindingII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.blinded = true;
                                    player.blindedStoreTime = new Date().getTime();
                                    player.blindedTime = 3;
                                }
                                else if (this.effect == "blindingIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.blinded = true;
                                    player.blindedStoreTime = new Date().getTime();
                                    player.blindedTime = 5;
                                }
                                else if (this.effect == "blindingIV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.blinded = true;
                                    player.blindedStoreTime = new Date().getTime();
                                    player.blindedTime = 8;
                                }
                                else if (this.effect == "blindingV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.blinded = true;
                                    player.blindedStoreTime = new Date().getTime();
                                    player.blindedTime = 13;
                                }
                                else if (this.effect == "quarterAcid" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.quarterAcid = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "halfAcid" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.halfAcid = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "acidI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.acidI = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "acidII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.acidII = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "acidIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.acidIII = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "acidIV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.acidIV = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "acidV" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.acidV = true;
                                    player.acidTime = new Date().getTime() + 8000;
                                }
                                else if (this.effect == "superAcid" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                                {
                                    player.acidV = true;
                                    player.acidTime = new Date().getTime() + 22000;
                                }
                            }
                        }
                    }
                }
            }
            else if (this.target != "none")
            {
                //this method relies on the class variable being set: this.timeBetweenAttacks = new Date().getTime();
                var dtu = this.DTU(this.target);

                if (dtu <= this.engagementRadius + (this.target.sizeRadius - 10) && dtu <= this.baseSight)
                {
                    this.attacking = true;
                }
                else if (this.followThrough == false)
                {
                    this.attacking = false;
                }

                if (this.attacking == true)
                {
                    if (this.attackStyle == "rapid")
                    {
                        if (this.damage > this.target.armour)
                        {
                            this.damage = (Math.floor(Math.random() * (randomDamage + 1)) + setDamage) * this.buffout;
                            this.target.health -= Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) * (TTD / (16.75 + (100 * this.attackRate)));
                        }
                    }
                    if (this.attackStyle == "chunked")
                    {
                        if (this.justAttacked == true)
                        {
                            this.finalAttackCostume = false;
                            this.justAttacked = false;
                        }

                        if (this.finalAttackCostume)
                        {
                            this.damage = (Math.floor(Math.random() * (randomDamage + 1)) + setDamage) * this.buffout;
                            //console.log(this.damage + " is the damage done by " + this.ID + " through an armour total of " + player.armourTotal + ". The resulting damage was " + Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / 16.75) + ".");

                            this.target.health -= Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour));
                            this.target.lessEXP += this.target.experience * (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) / this.target.healthMAX);
                            this.target.offended = true;
                            if (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour) > 0))
                            {
                                if (this.team == "player")
                                {
                                    this.target.disturbedTime = new Date().getTime();
                                }
                                this.target.healthShownTime = new Date().getTime();
                            }
                            if (this.target.health <= 0)
                            {
                                if (this.team == "player")
                                {
                                    if (this.guarantee)
                                    {
                                        this.target.killedByCompanion = true;
                                    }
                                    this.target.killByPlayerTeam = true;
                                    this.target.killNotByPlayer = true;
                                }
                                else
                                {
                                    this.target.killNotByPlayer = true;
                                }
                            }
                            this.justAttacked = true;

                            //Special Attacking Effects

                            if (this.effect == "stunV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunV = true;
                                this.target.stunTimer = 12;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "basiliskVenom" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                if (this.target.type != "Basilisk")
                                {
                                    this.target.baskVenomed = true;
                                }
                            }
                            else if (this.effect == "etnaVenom" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunV = true;
                                this.target.stunTimer = 20;
                                this.target.stunTime = new Date().getTime();
                                this.target.buffoutTime = new Date().getTime();
                                this.target.buffoutTimer = 17;
                                this.target.initBuffout = 0.65;
                                this.target.subBuffoutToggle = true;
                            }
                            else if (this.effect == "stunIV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunIV = true;
                                this.target.stunTimer = 12;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "stunIII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunIII = true;
                                this.target.stunTimer = 11;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "stunII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunII = true;
                                this.target.stunTimer = 8;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "stunI" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunI = true;
                                this.target.stunTimer = 5;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "freezingStun" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.stunV = true;
                                this.target.stunTimer = 12;
                                this.target.stunTime = new Date().getTime();
                                this.target.frozenTime = new Date().getTime();
                            }
                            else if (this.effect == "smashbackI" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                var twrdsUnit = Math.atan2(this.Y - this.target.Y, this.X - this.target.X);
                                this.target.X -= Math.cos(twrdsUnit) * 50;
                                this.target.Y -= Math.sin(twrdsUnit) * 50;
                                this.target.stunIII = true;
                                this.target.stunTimer = 3;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "smashbackII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                var twrdsUnit = Math.atan2(this.Y - this.target.Y, this.X - this.target.X);
                                this.target.X -= Math.cos(twrdsUnit) * 125;
                                this.target.Y -= Math.sin(twrdsUnit) * 125;
                                this.target.stunIII = true;
                                this.target.stunTimer = 4;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "smashbackIII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                var twrdsUnit = Math.atan2(this.Y - this.target.Y, this.X - this.target.X);
                                this.target.X -= Math.cos(twrdsUnit) * 325;
                                this.target.Y -= Math.sin(twrdsUnit) * 325;
                                this.target.stunIII = true;
                                this.target.stunTimer = 4;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "smashbackIV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                var twrdsUnit = Math.atan2(this.Y - this.target.Y, this.X - this.target.X);
                                this.target.X -= Math.cos(twrdsUnit) * 550;
                                this.target.Y -= Math.sin(twrdsUnit) * 550;
                                this.target.stunIV = true;
                                this.target.stunTimer = 4;
                                this.target.stunTime = new Date().getTime();
                            }
                            else if (this.effect == "fire" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.burningTime = new Date().getTime();
                            }
                            else if (this.effect == "blindingI" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.blinded = true;
                                this.target.blindedStoreTime = new Date().getTime();
                                this.target.blindedTime = 2;
                            }
                            else if (this.effect == "blindingII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.blinded = true;
                                this.target.blindedStoreTime = new Date().getTime();
                                this.target.blindedTime = 3;
                            }
                            else if (this.effect == "blindingIII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.blinded = true;
                                this.target.blindedStoreTime = new Date().getTime();
                                this.target.blindedTime = 5;
                            }
                            else if (this.effect == "blindingIV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.blinded = true;
                                this.target.blindedStoreTime = new Date().getTime();
                                this.target.blindedTime = 8;
                            }
                            else if (this.effect == "blindingV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.blinded = true;
                                this.target.blindedStoreTime = new Date().getTime();
                                this.target.blindedTime = 13;
                            }
                            else if (this.effect == "quarterAcid" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.quarterAcid = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "halfAcid" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.halfAcid = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "acidI" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidI = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "acidII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidII = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "acidIII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidIII = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "acidIV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidIV = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "acidV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidV = true;
                                this.target.acidTime = new Date().getTime() + 8000;
                            }
                            else if (this.effect == "superAcid" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidV = true;
                                this.target.acidTime = new Date().getTime() + 22000;
                            }
                            else if (this.effect == "poisonI" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidI = true;
                                this.target.acidTime = new Date().getTime() + 40000;
                            }
                            else if (this.effect == "poisonII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidII = true;
                                this.target.acidTime = new Date().getTime() + 40000;
                            }
                            else if (this.effect == "poisonIII" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidIII = true;
                                this.target.acidTime = new Date().getTime() + 40000;
                            }
                            else if (this.effect == "poisonIV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidIV = true;
                                this.target.acidTime = new Date().getTime() + 40000;
                            }
                            else if (this.effect == "poisonV" && (Math.max(0, this.damage - Math.max(0, this.target.armour - this.negateArmour)) > 0))
                            {
                                this.target.acidV = true;
                                this.target.acidTime = new Date().getTime() + 40000;
                            }
                        }
                    }
                }
            }
        }
    };

    this.flashAnimate = function(framerate, rotation, transparency, list)
    {
        //use a list with coords for images: [{image:, imgX:, imgY:, portionW:, portionH:, adjX:, adjY:, width:, height:}, ... etc.]
        if (this.flashFrame >= list.length)
        {
            this.flashFrame = 0;
        }

        if (rotation != false)
        {
            if (this.colorized[0] == true) //for things like petrification the normal draw is overridden with a colorized draw
            {
                var colorization = this.drawColorized(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].width, list[this.flashFrame].height, this.getGlobalAlpha(), this.colorized[1]);
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                XXX.rotate(rotation);
                XXX.drawImage(colorization, 0, 0, list[this.flashFrame].width, list[this.flashFrame].height, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                XXX.rotate(rotation);
                XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }
        }
        else
        {
            if (this.colorized[0] == true) //for things like petrification the normal draw is overridden with a colorized draw
            {
                var colorization = this.drawColorized(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].width, list[this.flashFrame].height, this.getGlobalAlpha(), this.colorized[1]);
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                XXX.drawImage(colorization, 0, 0, list[this.flashFrame].width, list[this.flashFrame].height, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, X - this.X + (1 / 2 * CCC.width) + list[this.flashFrame].adjX, Y - this.Y + (1 / 2 * CCC.height) + list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }
        }

        if (!this.petrified)
        {
            if (new Date().getTime() - this.flashFrameTime >= (framerate / timeSpeed * this.timeResistance))
            {
                this.flashFrameTime = new Date().getTime();
                this.flashFrame += 1;
            }
        }
    };

    //this function deals with all of the effects that can effect AI UNITS.
    this.effected = function(resistancesList)
    {
        //Resistances to effects
        //variables that signify restant or not.
        var frozenResistance = false;
        var burningResistance = false;
        var blindedResistance = false;
        var stunResistance = false;
        var shockResistance = false;
        var acidResistance = false;
        var charmResistance = false;
        var webResistance = false;
        var buffoutResistance = false;
        var drowningResistance = false;
        var petrifiedResistance = false;
        var basiliskVenomResistance = false;
        var leechResistance = false;
        var timeAlterResistance = false;
        var nightResistance = false;

        //for loop to check for resistance
        for (var i = 0; i < resistancesList.length; i++)
        {
            if (resistancesList[i] == "frozen")
            {
                frozenResistance = true;
            }
            else if (resistancesList[i] == "burning")
            {
                burningResistance = true;
            }
            else if (resistancesList[i] == "blinded")
            {
                blindedResistance = true;
            }
            else if (resistancesList[i] == "stun")
            {
                stunResistance = true;
            }
            else if (resistancesList[i] == "shock")
            {
                shockResistance = true;
            }
            else if (resistancesList[i] == "acid")
            {
                acidResistance = true;
            }
            else if (resistancesList[i] == "charm")
            {
                charmResistance = true;
            }
            else if (resistancesList[i] == "web")
            {
                webResistance = true;
            }
            else if (resistancesList[i] == "buffout")
            {
                buffoutResistance = true;
            }
            else if (resistancesList[i] == "water")
            {
                drowningResistance = true;
            }
            else if (resistancesList[i] == "petrification")
            {
                petrifiedResistance = true;
            }
            else if (resistancesList[i] == "basilisk")
            {
                basiliskVenomResistance = true;
            }
            else if (resistancesList[i] == "leech")
            {
                leechResistance = true;
            }
            else if (resistancesList[i] == "time")
            {
                timeAlterResistance = true;
            }
            else if (resistancesList[i] == "night")
            {
                nightResistance = true;
            }
        }

        //Petrification Effect
        if (petrifiedResistance == false && this.petrified)
        {
            this.colorized = [true, "lightGrey"];
            this.playerSeen = false;
            this.petrificationResistance = false;
        }
        else if (petrifiedResistance == true)
        {
            this.petrificationResistance = true;
            this.petrified = false;
        }

        //Basilisk Venom Effect
        if (basiliskVenomResistance == false && this.baskVenomed)
        {
            if (new Date().getTime() - this.baskVenomedStoreTime > 200)
            {
                //reset the timer for the poison.
                this.baskVenomedStoreTime = new Date().getTime();
                //Take away health
                this.health -= Math.max(0, 11);
            }
        }
        else
        {
            this.baskVenomedStoreTime = new Date().getTime();
        }

        //Time Alter
        if (timeAlterResistance == true)
        {
            this.timeResistance = timeSpeed;
        }
        else
        {
            this.timeResistance = 1;
        }

        //Leeches Effect
        if (leechResistance == false)
        {
            if (this.type == "Person" || this.type == "Soldier")
            {
                this.extraLeech = 4;
            }
            else
            {
                this.extraLeech = -3;
            }
            this.antiLeech = false;
            //leeches sucking blood from you
            if (this.leeches > 0)
            {
                this.leechWiggle += 1;
                for (var ll = 0; ll < this.leeches; ll++)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.globalAlpha = this.getGlobalAlpha;
                    if (ll > 15)
                    {
                        XXX.rotate(this.rotation + (1/36 * 2*Math.PI + 1/9 * 2 * Math.PI * ll));
                    }
                    else if (ll > 8)
                    {
                        XXX.rotate(this.rotation + (1/18 * 2*Math.PI + 1/9 * 2 * Math.PI * ll));
                    }
                    else
                    {
                        XXX.rotate(this.rotation + (1/9 * 2 * Math.PI * ll));
                    }
                    if (this.leechPop == true && ll == this.leechWiggleRand)
                    {
                        XXX.drawImage(dmil, 434, 711, 44, 24, -1/2 * 44 * 0.5 -(this.sizeRadius + this.extraLeech), -1/2 * 24 * 0.5, 44 * 0.5, 24 * 0.5);
                    }
                    else if (this.leechWiggle < 5)
                    {
                        XXX.drawImage(dmil, 367, 755, 44, 24, -1/2 * 44 * 0.5 -(this.sizeRadius + this.extraLeech), -1/2 * 24 * 0.5, 44 * 0.5, 24 * 0.5);
                    }
                    else if (this.leechWiggle < 10)
                    {
                        XXX.drawImage(dmil, 432, 755, 44, 24, -1/2 * 44 * 0.5 -(this.sizeRadius + this.extraLeech), -1/2 * 24 * 0.5, 44 * 0.5, 24 * 0.5);
                    }
                    else if (this.leechWiggle < 18)
                    {
                        XXX.drawImage(dmil, 496, 757, 44, 24, -1/2 * 44 * 0.5 -(this.sizeRadius + this.extraLeech), -1/2 * 24 * 0.5, 44 * 0.5, 24 * 0.5);
                    }
                    XXX.restore();
                }
                if (this.leechWiggle > 15)
                {
                    if (this.leechPop == true)
                    {
                        this.leechPop = false;
                        this.leeches = Math.max(0, this.leeches - 1);
                    }
                    this.leechWiggle = 0;
                }
            }

            if (this.leeches > 0)
            {
                //pop leeches
                this.leechTime += 1;
                if (this.type == "Person" || this.type == "Soldier")
                {
                    this.leechTime += 1;
                }
                if (this.leechPop == false && this.leechTime > 100)
                {
                    if (this.healthMAX > 9)
                    {
                        this.leechTime = 0;
                        this.leechPop = true;
                        this.leechWiggleRand = Math.round(Math.random() * this.leeches);
                    }
                }

                //leeches drain target
                this.health -= 0.025 * this.leeches;
                if (this.health <= 0)
                {
                    this.killNotByPlayer = true;
                }

                //petrification clause: leeches stop eating when petrified
                if (this.petrified)
                {
                    for (var iii = 0; iii < this.leeches; iii++)
                    {
                        var leechy = new Unit(this.X, this.Y, "Leech", false, "corpseLeech");
                        leechy.petrified = true;
                        ArtificialIntelligenceAccess.push(leechy);

                    }
                    this.leeches = 0;
                }
            }
        }
        else
        {
            this.antiLeech = true;
        }

        //Night Effect
        if (nightResistance == false)
        {
            this.nightVision = false;
        }
        else
        {
            this.nightVision = true;
        }

        //Buffout Effect
        if (buffoutResistance == false && new Date().getTime() - this.buffoutTime <= this.buffoutTimer * 1000)
        {
            //subBuffouts
            this.subBuffout = 0;
            if (webResistance == false && this.webbedNum > 0)
            {
                this.subBuffout -= 0.2;
            }

            if (this.subBuffoutToggle)
            {
                this.buffout = this.initBuffout + this.subBuffout;
            }
            else
            {
                this.buffout = this.initBuffout;
            }
        }
        else
        {
            this.initBuffout = 1;
            this.buffout = 1;
            this.buffoutTime = 0;
            this.buffoutTimer = 0;
            this.subBuffout = 0;
            this.subBuffoutToggle = false;
        }

        //Burning Effect
        if (burningResistance == false && new Date().getTime() - this.burningTime <= 9000 && (1.2 - this.heatResistance) > 0)
        {
            this.frozenTime = 0;
            this.flashAnimate(90, false, 0.90, [{image: polypol, imgX: 1691, imgY: 184, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}, {image: polypol, imgX: 1721, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}, {image: polypol, imgX: 1750, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}, {image: polypol, imgX: 1783, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}]);
            if (new Date().getTime() - this.burningTime2 >= 99)
            {
                this.burningTime2 = new Date().getTime();
                this.health -= Math.max(0, 0.12 - (this.heatResistance / 10));
            }
        }
        if (this.water == true && this.land != true) //being in water puts out fire
        {
            this.burningTime = 0;
        }

        //Shock Effect
        if (shockResistance == false && new Date().getTime() - this.shockedTime <= 3000)
        {
            this.flashAnimate(90, false, 0.90, [{image: mofu, imgX: 415, imgY: 4, portionW: 28, portionH: 28, adjX: -1 / 2 * ((28 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((28 * 1.5)/10) * this.sizeRadius, width: ((28 * 1.5)/10) * this.sizeRadius, height: ((28 * 1.5)/10) * this.sizeRadius}, {image: mofu, imgX: 455, imgY: 3, portionW: 28, portionH: 28, adjX: -1 / 2 * ((28 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((28 * 1.5)/10) * this.sizeRadius, width: ((28 * 1.5)/10) * this.sizeRadius, height: ((28 * 1.5)/10) * this.sizeRadius}, {image: mofu, imgX: 497, imgY: 4, portionW: 28, portionH: 28, adjX: -1 / 2 * ((28 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((28 * 1.5)/10) * this.sizeRadius, width: ((28 * 1.5)/10) * this.sizeRadius, height: ((28 * 1.5)/10) * this.sizeRadius}]);
            if (new Date().getTime() - this.shockedTime2 >= 250)
            {
                this.shockedTime2 = new Date().getTime();
                this.health -= 1;
            }
        }

        //Frozen Effect
        if (new Date().getTime() - this.frozenTime > 4500)
        {
            if (this.hasBeenFrozen)
            {
                this.speed = this.freezeKeepSpeed;
            }
            this.freezeKeepSpeed = this.speed;
            this.hasBeenFrozen = false;
        }
        if (frozenResistance == false && new Date().getTime() - this.frozenTime <= 4500)
        {
            this.burningTime = 0;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.globalAlpha = 0.9;
            XXX.drawImage(polypol, 1691, 240, 28, 24, - 1/2 * (28 * 1.2) / 10 * this.sizeRadius, - 1/2 * (24 * 1.2) / 10 * this.sizeRadius, (28 * 1.2) / 10 * this.sizeRadius, (24 * 1.2) / 10 * this.sizeRadius);
            XXX.restore();

            this.speed = this.freezeKeepSpeed / 4.5;
            this.hasBeenFrozen = true;
        }

        //Charmed/Marked Effect
        if (charmResistance == false && this.team != "neutral" && new Date().getTime() < this.charmedTime)
        {
            this.isCharmed = true;
            if (this.marked == true)
            {
                this.spin += 1/17 * Math.PI;
                this.flashAnimate(90, this.spin, 0.37, [{image: zapa, imgX: 308, imgY: 42, portionW: 18, portionH: 31, adjX: -1 / 2 * ((18 * 1.7)/10) * this.sizeRadius, adjY: -1 / 2 * ((31 * 1.7)/10) * this.sizeRadius, width: ((18 * 1.7)/10) * this.sizeRadius, height: ((31 * 1.7)/10) * this.sizeRadius}]);
            }
            else if (this.marked != "shome")
            {
                this.spin += 1/30;
                this.flashAnimate(90, this.spin, 0.86, [{image: polpol, imgX: 120, imgY: 375, portionW: 23, portionH: 23, adjX: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((23 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}]);
            }
            this.team = this.charmedTeam;
        }
        else
        {
            this.isCharmed = false;
            this.team = this.baseTeam;
            this.marked = false;
        }

        //Acid Effect
        if (acidResistance == false)
        {
            if (this.acidTime > new Date().getTime())
            {
                if (this.acidV == true)
                {
                    this.health -= Math.max(0, 0.05 - (this.acidResistance / 1000));
                }
                else if (this.acidIV == true)
                {
                    this.health -= Math.max(0, 0.04 - (this.acidResistance / 1000));
                }
                else if (this.acidIII == true)
                {
                    this.health -= Math.max(0, 0.03 - (this.acidResistance / 1000));
                }
                else if (this.acidII == true)
                {
                    this.health -= Math.max(0, 0.02 - (this.acidResistance / 1000));
                }
                else if (this.acidI == true)
                {
                    this.health -= Math.max(0, 0.01 - (this.acidResistance / 1000));
                }
                else if (this.halfAcid == true)
                {
                    this.health -= Math.max(0, 0.005 - (this.acidResistance / 1000));
                }
                else if (this.quarterAcid == true)
                {
                    this.health -= Math.max(0, 0.0025 - (this.acidResistance / 1000));
                }
            }
            else
            {
                this.acidV = false;
                this.acidIV = false;
                this.acidIII = false;
                this.acidII = false;
                this.acidI = false;
                this.halfAcid = false;
                this.quarterAcid = false;
            }
        }

        //Blinded Effect
        if (blindedResistance == false && new Date().getTime() - this.blindedTime <= 5000)
        {
            this.blinded = true;
        }
        else
        {
            this.blinded = false;
        }
        //Stun Effect
        if (stunResistance == false && new Date().getTime() - this.stunTime <= this.stunTimer * 1000)
        {
            if (this.stunV)
            {
                this.stunned = 0;
            }
            else if (this.stunIV)
            {
                this.stunned = 0.1;
            }
            else if (this.stunIII)
            {
                this.stunned = 0.2;
            }
            else if (this.stunII)
            {
                this.stunned = 0.3;
            }
            else if (this.stunI)
            {
                this.stunned = 0.5;
            }
        }
        else if (stunResistance == false)
        {
            this.stunned = 1;
            this.stunV = false;
            this.stunIV = false;
            this.stunIII = false;
            this.stunII = false;
            this.stunI = false;
        }
        //Web Effect
        if (webResistance == false && this.webbedNum > 0)
        {
            if (new Date().getTime() < this.webbedTime + 1000)
            {
                this.webbedTime = new Date().getTime();
                this.webbedNum -= 1;
            }
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            //XXX.globalAlpha = 0.9;
            XXX.drawImage(nognog, 739, 351, 70, 62, - 1/2 * ((70 * 1.2) / 23 * this.sizeRadius), - 1/2 * ((62 * 1.2) / 23 * this.sizeRadius), (70 * 1.2) / 23 * this.sizeRadius, (62 * 1.2) / 23 * this.sizeRadius);
            XXX.restore();
            this.stunned = 0.09;
        }
        else if (webResistance == false && !this.stunV && !this.stunIV && !this.stunIII && !this.stunII && !this.stunI)
        {
            this.stunned = 1;
        }

        //Drowning Effect / Swimming
        if (this.water == true && this.land == false && !this.flying)
        {
            this.swimming = true; //this is for animating sminning for those units that do.

            if (drowningResistance == false && this.type != "Person" && this.type != "Soldier") //I'm lazy so I am excluding human type Units from swimming manually here instead of changing their resistances.
            {
                this.swim -= 0.04;

                if (this.swim <= 0)
                {
                    this.stunned = 0;
                    this.killNotByPlayer = true;
                    this.health -= 1/74 * this.healthMAX;
                    this.deleteBody = true;
                }
            }
        }
        else if (this.land)
        {
            this.swim = this.swimMAX;
            this.swimming = false;
        }

        //keep this at the bottom
        if (!this.petrified) //any other effect that causes it to colorize will need to be false too as a condition here in order to reset colorized.
        {
            this.colorized = [false, "green"];
        }
    };
    //This function increases the rangeOfSight of all of the surrounding nearby units.
    this.callForNearbyHelpFromType = function(range, type)
    {
        var nearbyUnitsList = [];
        this.findNearbyUnitTypeGroup(range, type, nearbyUnitsList);

        if (this.playerSeen == true) // If this unit sees the player call friends over to help in the attack.
        {
            for (var i = 0; i < nearbyUnitsList.length; i++)
            {
                //distanceFromOtherToPlayer
                var dfotp = Math.sqrt((X-nearbyUnitsList[i].X)*(X-nearbyUnitsList[i].X) + (Y-nearbyUnitsList[i].Y)*(Y-nearbyUnitsList[i].Y));

                if (nearbyUnitsList[i].rangeOfSight < dfotp) //If other units range is less than their distance from the player...
                {
                    var rangeNeeded = Math.max(0, dfotp - nearbyUnitsList[i].rangeOfSight);
                    nearbyUnitsList[i].extraRange = rangeNeeded + 20; // the extra range they will need to spy the player will be added.
                    nearbyUnitsList[i].extraRangeTime = new Date().getTime();
                }
                else
                {
                    if (type == "Soldier" && nearbyUnitsList[i].ultra.faction == this.ultra.faction && this.dmx == nearbyUnitsList[i].dmx && nearbyUnitsList[i].disdained == false || type == "Shehid")
                    {
                        nearbyUnitsList[i].disturbed = true;
                    }
                }
            }
        }
    };

    this.callForHelp = function(range, type)
    {
        var nearbyUnitsList = [];
        this.findNearbyUnitTypeGroup(range, type, nearbyUnitsList);

        for (var i = 0; i < nearbyUnitsList.length; i++)
        {
            nearbyUnitsList[i].offended = true;
        }
    };

    //this unit's rangeOfSight is shown as a transparent red bubble.
    this.visibleSight = function()
    {
        if (showSight == true || showSightCheat == true)
        {
            XXX.beginPath();
            XXX.fillStyle = "rgba( 255, 0, 0, 0.075)";
            XXX.arc(X - this.X + CCC.width / 2, Y - this.Y + CCC.height / 2, this.rangeOfSight, 0, 2 * Math.PI);
            XXX.fill();
        }
    };

    this.isObstructed = function(x, y)
    {
        var creaturesO = false;
        var sceneryO = false;
        var barrierO = false;

        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            if (ArtificialIntelligenceAccess[i] !== this && !ArtificialIntelligenceAccess[i].flying && ArtificialIntelligenceAccess[i].tangible)
            {
                var focusUnit = ArtificialIntelligenceAccess[i]; //This is the current unit focused on other than this unit.
                var x1 = focusUnit.X; //the focus unit's X position.
                var y1 = focusUnit.Y; //the focus unit's Y position.
                var d = Math.sqrt( (x-x1)*(x-x1) + (y-y1)*(y-y1) ); //This is the distance between this unit and the focus unit.
                if (d < this.sizeRadius + focusUnit.sizeRadius && focusUnit.alive == true) // if the total distance between this unit and the focus unit is less than the size of the two radiuses then it returns true to the movement function which calls it.
                {
                    if (ArtificialIntelligenceAccess[i].mobile)
                    {
                        this.creatureBiz = true; // this lets the creatures sort out there own stuff by suspending the normal processes (evadeObstruction) that would happen upon getting stuck.
                    }

                    if (this.target != ArtificialIntelligenceAccess[i] || !this.charger) //this is so that a chargers attack is not hindered upon contact with its own target.
                    {
                        if (!this.traverse)
                        {
                            if (!this.insect || this.insect == true && ArtificialIntelligenceAccess[i].insect == true)
                            {
                                if (ArtificialIntelligenceAccess[i].insect == false && this.insect == false || this.insect)
                                {
                                    creaturesO = true; //d == this.sizeRadius + focusUnit.sizeRadius :: this is the point at which the two units would be exactly touching eachother with no overlap.
                                }
                            }
                        }
                    }
                }
            }
        }
        for (var i = 0; i < scenicList.length; i++)
        {
            var scnCrds = false;
            if (x > scenicList[i].X - scenicList[i].radius && x < scenicList[i].X + scenicList[i].radius && y > scenicList[i].Y - scenicList[i].radius && y < scenicList[i].Y + scenicList[i].radius)
            {
                scnCrds = true;
            }
            if (scenicList[i].solid == true || scenicList[i].type == "campFire" && scenicList[i].lit == true && scnCrds || scenicList[i].type == "yeolCampFire" && scenicList[i].lit == true && scnCrds || scenicList[i].type == "pire" && scenicList[i].lit != "burnt" && scnCrds || scenicList[i].type == "wobeaPlant" && scnCrds)
            {
                var focusObject = scenicList[i]; //This is the current unit focused on other than this unit.
                var x1 = focusObject.X; //the focus unit's X position.
                var y1 = focusObject.Y; //the focus unit's Y position.
                var d = Math.sqrt( (x-x1)*(x-x1) + (y-y1)*(y-y1) ); //This is the distance between this unit and the focus unit.
                if (!this.haste || focusObject.unpassable)
                {
                    if (d < this.sizeRadius + focusObject.radius) // if the total distance between this unit and the focus unit is less than the size of the two radiuses then it returns true to the movement function which calls it.
                    {
                        this.creatureBiz = false; //if the creatures are stuck on an obstacle it is more important to get unstuck than to attempt to encircle the player.
                        sceneryO = true;
                    }
                }
            }
        }
        for (var i = 0; i < barrierList.length; i++)
        {
            var focusObject = barrierList[i]; //This is the current unit focused on other than this unit.
            var x1 = focusObject.X; //the focus unit's X position.
            var y1 = focusObject.Y; //the focus unit's Y position.
            if (x - this.sizeRadius < x1 + focusObject.width && x + this.sizeRadius > x1 && y - this.sizeRadius < y1 + focusObject.height && y + this.sizeRadius > y1)
            {
                barrierO = true;
            }
        }

        if (creaturesO || sceneryO || barrierO)
        {
            return true;
        }
        else
        {
            return false;
        }
    };

    this.drawHumanArms = function()
    {
        var playerFriendly = false;
        if (this.team == "player" && this.target == player) //this is so that ranged weapon using humans will not attack the player if they are on the players team.
        {
            playerFriendly = true;
            this.damagesPlayer = false; //for the magic system only
        }
        else
        {
            this.damagesPlayer = true; //for the magic system only
        }

        if (this.ranged == true && !playerFriendly && this.weapon != "swimming")
        {
            var dtp;
            var dtu;
            if (this.target == player)
            {
                dtp = this.DTP();
            }
            else if (this.target != "none")
            {
                dtu = this.DTU(this.target);
            }

            if (this.disturbed == true && dtp <= this.rangeOfSight && this.playerSeen == true || dtu <= this.baseSight && this.target != player) //otherwise if it is attacking then initiate attacking animation, and if neither...
            {
                this.attacking = true;

                if(new Date().getTime() - this.timeBetweenAttacks > (this.ultra.ranged[8] * 1000 / timeSpeed * this.timeResistance))
                {
                    if (this.weapon == "longbow")
                    {
                        this.costumeEngine(8, 0.20, false);
                    }
                    else if (this.weapon == "aldrekiiLongbow")
                    {
                        this.costumeEngine(8, 0.20, false);
                    }
                    else if (this.weapon == "crossbow")
                    {
                        this.costumeEngine(28, 0.10, false);
                    }
                    else if (this.weapon == "m16Carbine")
                    {
                        this.costumeEngine(2, 0.35, false);
                    }
                    else if (this.weapon == "shotgun")
                    {
                        this.costumeEngine(2, 0.35, false);
                    }
                }

                //this is the actual launch
                if (this.finalAttackCostume == true)
                {
                    if (player.gamemode != "protagonist")
                    {
                        this.rotation = this.newRotation; //turn instantly to player at time of projection
                    }
                    this.finalAttackCostume = false;
                    this.timeBetweenAttacks = new Date().getTime();
                    if (this.target == player)
                    {
                        if (this.weapon == "shotgun")
                        {
                            unitProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, (this.rotation -  1 / 2 * Math.PI), this.ultra.ranged[2] + Math.random(), this.ultra.ranged[3], this.ultra.ranged[4], unitProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7], true, this.team));
                            for (var kk = 0; kk < 10; kk++)
                            {
                                unitProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, (this.rotation -  1 / 2 * Math.PI) + (Math.random() * ((Math.PI / 360) * 20)) - ((Math.PI / 360) * 10), this.ultra.ranged[2] + Math.random(), this.ultra.ranged[3], this.ultra.ranged[4], unitProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7], true, this.team));
                            }
                        }
                        else
                        {
                            unitProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, this.rotation -  1 / 2 * Math.PI, this.ultra.ranged[2], this.ultra.ranged[3], this.ultra.ranged[4], unitProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7], true, this.team));
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.weapon == "shotgun")
                        {
                            playerProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, (this.rotation -  1 / 2 * Math.PI), this.ultra.ranged[2] + Math.random(), this.ultra.ranged[3], this.ultra.ranged[4], playerProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7], true, this.team));
                            for (var kk = 0; kk < 10; kk++)
                            {
                                playerProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, (this.rotation -  1 / 2 * Math.PI) + (Math.random() * ((Math.PI / 360) * 20)) - ((Math.PI / 360) * 10), this.ultra.ranged[2] + Math.random(), this.ultra.ranged[3], this.ultra.ranged[4], playerProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7], true, this.team));
                            }
                            console.log(playerProjectiles[0]);
                        }
                        else
                        {
                            playerProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, this.rotation -  1 / 2 * Math.PI, this.ultra.ranged[2], this.ultra.ranged[3], this.ultra.ranged[4], playerProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7], true, this.team));
                        }
                    }
                }
            }
        }

        XXX.save();
        var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
        //manual damaging
        if (this.weapon == "none" || this.weapon == "burningHands")
        {
            if (theCostume <= 0)
            {
                this.drawUnit(polyPNG, 631, 55, 92, 30, -22, -17, 46, 22, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polyPNG, 638, 118, 80, 37, -24, -17, 46, 22, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polyPNG, 639, 195, 80, 37, -26, -20, 46, 22, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polyPNG, 643, 276, 80, 37, -28.5, -20, 48, 23, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 4)
            {
                this.drawUnit(polyPNG, 653, 352, 80, 37, -26.5, -21, 48, 23, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "swimming") //this is irregular, do not copy it
        {
            //stage engine
            this.swimStage += 0.15;

            //ATTACK ANIMATION
            if (this.swimStage <= 1)
            {
                this.drawUnit(norc, 844, 582, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 2)
            {
                this.drawUnit(norc, 844, 633, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 3)
            {
                this.drawUnit(norc, 844, 676, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 4)
            {
                this.drawUnit(norc, 845, 722, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 5)
            {
                this.drawUnit(norc, 844, 676, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 6)
            {
                this.drawUnit(norc, 844, 633, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 7)
            {
                this.drawUnit(norc, 844, 582, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 8)
            {
                this.drawUnit(norc, 925, 617, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 9)
            {
                this.drawUnit(norc, 925, 661, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 10)
            {
                this.drawUnit(norc, 926, 711, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else if (this.swimStage <= 11)
            {
                this.drawUnit(norc, 925, 661, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
            }
            else
            {
                this.drawUnit(norc, 925, 617, 64, 35, -1/2 * 64 * 1.4 -0.5, -1/2 * 35 * 1.4 + 0, 64 * 1.4, 35 * 1.4, 1 / 2 * Math.PI);
                if (this.swimStage >= 12)
                {
                    this.swimStage = 0;
                }
            }
        }
        else if (this.weapon == "longbow")
        {
            if (theCostume <= 0)
            {
                this.drawUnit(polyPNG, 421, 589, 40, 43, -17, -41, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polyPNG, 487, 589, 40, 43, -11, -42, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polyPNG, 536, 589, 40, 43, -16, -39, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polyPNG, 576, 588, 40, 43, -19, -41, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polyPNG, 608, 588, 40, 43, -21, -41, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polyPNG, 645, 589, 40, 43, -16, -40, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(polyPNG, 681, 582, 40, 43, -22, -38.5, 50, 53.75, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 7)
            {
                this.drawUnit(polyPNG, 717, 583, 40, 43, -17, -38.5, 50, 53.75, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "m16Carbine")
        {
            if (theCostume <= 0)
            {
                this.drawUnit(troli, 818, 34, 133, 95, -1/2 * 133 * 0.75 + 2, -1/2 * 95 * 0.75 - 18, 133 * 0.75, 95 * 0.75, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 1)
            {
                if (theCostume > 1.6)
                {
                    theCostume = 0;
                }
                this.drawUnit(troli, 820, 164, 133, 95, -1/2 * 133 * 0.75 + 4, -1/2 * 95 * 0.75 - 22, 133 * 0.75, 95 * 0.75, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "shotgun")
        {
            if (theCostume <= 0)
            {
                this.drawUnit(gent, 699, 1073, 70, 149, -1/2 * 70 * 1 + 0, -1/2 * 149 * 1 - 0, 70 * 1, 149 * 1, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 1)
            {
                if (theCostume > 1.6)
                {
                    theCostume = 0;
                }
                this.drawUnit(gent, 622, 1074, 70, 149, -1/2 * 70 * 1 + 0, -1/2 * 149 * 1 - 0, 70 * 1, 149 * 1, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "aldrekiiLongbow")
        {
            if (theCostume <= 0)
            {
                this.drawUnit(balkur, 368, 667, 70, 89, -1/2 * 70 + 0, -1/2 * 89 - 4, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(balkur, 566, 666, 70, 89, -1/2 * 70 + 0, -1/2 * 89 - 4, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(balkur, 422, 577, 70, 89, -1/2 * 70 + 0, -1/2 * 89 - 4, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(balkur, 422, 577, 70, 89, -1/2 * 70 + 0, -1/2 * 89 - 4, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(balkur, 570, 577, 70, 89, -1/2 * 70 + 1, -1/2 * 89 - 4, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(balkur, 689, 576, 70, 89, -1/2 * 70 + 1, -1/2 * 89 - 4, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(balkur, 27, 670, 70, 89, -1/2 * 70 - 1.5, -1/2 * 89 - 2.5, 70, 89, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 7)
            {
                this.drawUnit(balkur, 196, 672, 70, 89, -1/2 * 70 - 3, -1/2 * 89 - 0.3, 70, 89, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "crossbow")
        {
            if (theCostume <= 0)
            {
                this.drawUnit(verse, 3911, 695, 50, 40, -27, -43, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(verse, 2788, 695, 50, 40, -25, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(verse, 2843, 695, 50, 40, -26, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(verse, 2899, 695, 50, 40, -28, -39.5, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(verse, 2950, 695, 50, 40, -26, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(verse, 2994, 695, 50, 40, -28, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(verse, 3044, 695, 50, 40, -25.5, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 7)
            {
                this.drawUnit(verse, 3089, 695, 50, 40, -27, -39.5, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 8)
            {
                this.drawUnit(verse, 3135, 695, 50, 40, -26, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 9)
            {
                this.drawUnit(verse, 3183, 695, 50, 40, -27.85, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 10)
            {
                this.drawUnit(verse, 3227, 695, 50, 40, -26.85, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 11)
            {
                this.drawUnit(verse, 3270, 695, 50, 40, -28, -39.5, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 12)
            {
                this.drawUnit(verse, 3313, 695, 50, 40, -26.35, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 13)
            {
                this.drawUnit(verse, 3358, 695, 50, 40, -26.85, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 14)
            {
                this.drawUnit(verse, 3403, 695, 50, 40, -26.85, -42, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 15)
            {
                this.drawUnit(verse, 3452, 695, 50, 40, -25.85, -41, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 16)
            {
                this.drawUnit(verse, 3498, 695, 50, 40, -25, -40, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 17)
            {
                this.drawUnit(verse, 3552, 695, 50, 40, -23.6, -39, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 18)
            {
                this.drawUnit(verse, 3608, 698, 50, 40, -22.5, -36, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 19)
            {
                this.drawUnit(verse, 3665, 698, 50, 40, -23.5, -37.25, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 20)
            {
                this.drawUnit(verse, 3717, 698, 50, 40, -26, -38.25, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 21)
            {
                this.drawUnit(verse, 3770, 698, 50, 40, -26, -38.25, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 22)
            {
                this.drawUnit(verse, 3817, 698, 50, 40, -27, -38.25, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 23)
            {
                this.drawUnit(verse, 3865, 698, 50, 40, -27, -38.25, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 26)
            {
                this.drawUnit(verse, 3865, 698, 50, 40, -27, -38.25, 52.5, 42, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 27)
            {
                this.drawUnit(verse, 3911, 695, 50, 40, -27, -43, 52.5, 42, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "fishingpole")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(norc, 214, 641, 37, 105, -1/2 * 37 * 1.5 -2, -1/2 * 105 * 1.5 - 76, 37 * 1.5, 105 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(norc, 266, 643, 37, 105, -1/2 * 37 * 1.5 -2, -1/2 * 105 * 1.5 - 76, 37 * 1.5, 105 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(norc, 320, 644, 37, 105, -1/2 * 37 * 1.5 -2, -1/2 * 105 * 1.5 - 76, 37 * 1.5, 105 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(norc, 367, 645, 37, 105, -1/2 * 37 * 1.5 -2, -1/2 * 105 * 1.5 - 76, 37 * 1.5, 105 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 4)
            {
                this.drawUnit(norc, 408, 645, 37, 105, -1/2 * 37 * 1.5 -2, -1/2 * 105 * 1.5 - 76, 37 * 1.5, 105 * 1.5, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "crateLight" || this.weapon == "crateDark" || this.weapon == "basketLight" || this.weapon == "basketDark")
        {
            this.damageFrame = "manual";
            if (theCostume <= 0)
            {
                if (this.weapon == "basketLight")
                {
                    this.drawUnit(mofu, 457, 175, 32, 30, -22, -28, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
                    this.drawUnit(atal, 1201, 2790, 32, 23, -1/2 * 32 * 1 -0, -1/2 * 23 * 1 - 20, 32 * 1, 23 * 1, 1 / 2 * Math.PI);
                }
                else if (this.weapon == "basketDark")
                {
                    this.drawUnit(mofu, 457, 175, 32, 30, -22, -28, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
                    this.drawUnit(atal, 1248, 2790, 32, 23, -1/2 * 32 * 1 -0, -1/2 * 23 * 1 - 20, 32 * 1, 23 * 1, 1 / 2 * Math.PI);
                }
                else if (this.weapon == "crateDark")
                {
                    this.drawUnit(polypol, 1862, 109, 44, 24, -22, -20, 44, 24, 1 / 2 * Math.PI);
                    this.drawUnit(polpol, 89, 212, 66, 40, -(1/2 * 66 * 1.2), -(1/2 * 40 * 1.2 + 26), 66 * 1.2, 40 * 1.2, 1 / 2 * Math.PI);
                }
                else if (this.weapon == "crateLight")
                {
                    this.drawUnit(polypol, 1862, 109, 44, 24, -22, -20, 44, 24, 1 / 2 * Math.PI);
                    this.drawUnit(polpol, 298, 273, 49, 57, -(1/2 * 49 * 1.2), -(1/2 * 57 * 1.2 + 26), 49 * 1.2, 57 * 1.2, 1 / 2 * Math.PI);
                }
            }
            else if (theCostume >= 1)
            {
                if (this.weapon == "basketLight")
                {
                    this.drawUnit(mofu, 457, 175, 32, 30, -22, -28, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
                    this.drawUnit(atal, 1201, 2790, 32, 23, -1/2 * 32 * 1 -0, -1/2 * 23 * 1 - 20, 32 * 1, 23 * 1, 1 / 2 * Math.PI);
                }
                else if (this.weapon == "basketDark")
                {
                    this.drawUnit(mofu, 457, 175, 32, 30, -22, -28, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
                    this.drawUnit(atal, 1248, 2790, 32, 23, -1/2 * 32 * 1 -0, -1/2 * 23 * 1 - 20, 32 * 1, 23 * 1, 1 / 2 * Math.PI);
                }
                else if (this.weapon == "crateDark")
                {
                    this.drawUnit(polypol, 1862, 109, 44, 24, -22, -20, 44, 24, 1 / 2 * Math.PI);
                    this.drawUnit(polpol, 89, 212, 66, 40, -(1/2 * 66 * 1.2), -(1/2 * 40 * 1.2 + 26), 66 * 1.2, 40 * 1.2, 1 / 2 * Math.PI);
                }
                else if (this.weapon == "crateLight")
                {
                    this.drawUnit(polypol, 1862, 109, 44, 24, -22, -20, 44, 24, 1 / 2 * Math.PI);
                    this.drawUnit(polpol, 298, 273, 49, 57, -(1/2 * 49 * 1.2), -(1/2 * 57 * 1.2 + 26), 49 * 1.2, 57 * 1.2, 1 / 2 * Math.PI);
                }
            }
        }
        else if (this.weapon == "freydicSword")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(oldverse, 2210, 1, 73, 63, -13, -60, 91.875, 78.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(oldverse, 2290, 1, 73, 63, -17.5, -60, 91.875, 78.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(oldverse, 2367, 1, 73, 63, -25, -61, 91.875, 78.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(oldverse, 2438, 1, 73, 63, -31, -61.5, 91.875, 78.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(oldverse, 2513, 1, 73, 63, -36, -64, 91.875, 78.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(oldverse, 2577, 1, 73, 63, -44, -69, 91.875, 78.75, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(oldverse, 2635, 1, 73, 63, -49.25, -69, 91.875, 78.75, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "estoc")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(dolls, 400, 301, 60, 134, -24, -81, 60, 134, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(dolls, 393, 165, 60, 134, -27, -79, 60, 134, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(dolls, 400, 301, 60, 134, -24, -81, 60, 134, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(dolls, 411, 422, 60, 134, -26, -77, 60, 134, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(dolls, 411, 422, 60, 134, -26, -77, 60, 134, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 5)
            {
                this.drawUnit(dolls, 497, 182, 60, 134, -26, -79, 60, 134, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "vardanianHalberd")
        {
            this.damageFrame = "manual";
            if (theCostume <= 0)
            {
                this.drawUnit(gent, 69, 1286, 232, 274, -1/2* 232 * 0.77 -2.45, -1/2* 274 * 0.77 + 1, 232 * 0.77, 274 * 0.77, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(gent, 323, 1291, 232, 274, -1/2* 232 * 0.74 -1.3, -1/2* 274 * 0.74 -0.5, 232 * 0.74, 274 * 0.74, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(gent, 527, 1283, 232, 274, -1/2* 232 * 0.77 -1.4, -1/2* 274 * 0.77 -2, 232 * 0.77, 274 * 0.77, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(gent, 22, 1735, 232, 261, -1/2* 232 * 0.77 -1, -1/2* 261 * 0.77 -76.6, 232 * 0.77, 261 * 0.77, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(gent, 16, 1583, 232, 274, -1/2* 232 * 0.75 -1.8, -1/2* 274 * 0.75 -2.25, 232 * 0.75, 274 * 0.75, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.doAttackThisFrame = true;
                this.drawUnit(gent, 278, 1567, 232, 271, -1/2* 232 * 0.75 -0.25, -1/2* 271 * 0.75 -25, 232 * 0.75, 271 * 0.75, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                if (theCostume < 7)
                {
                    //this is the frame that should do the damage.
                    if (this.doAttackThisFrame)
                    {
                        this.doAttackThisFrame = false;
                        this.finalAttackCostume = true;
                    }
                }
                this.drawUnit(gent, 531, 1548, 232, 271, -1/2* 232 * 0.77 -0, -1/2* 271 * 0.77 -46, 232 * 0.77, 271 * 0.77, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "nirineseSabre")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(verse, 373, 2, 90, 96, -55, -41, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(verse, 455, 2, 90, 96, -40, -44, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(verse, 529, 2, 90, 96, -44, -39, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(verse, 600, 2, 90, 96, -45, -44, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(verse, 696, 2, 90, 96, -32, -44, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(verse, 798, 2, 90, 96, -32, -48, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(verse, 896, 2, 90, 96, -36, -46, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 7)
            {
                this.drawUnit(verse, 996, 2, 90, 96, -42, -71.5, 90, 96, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 8)
            {
                this.drawUnit(verse, 1085, 2, 90, 96, -49, -84, 90, 96, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "thenganDagger")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(dolls, 7, 153, 80, 95, -1/2 * 80 + 3.4, -1/2 * 95 + -0.5, 80, 95, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(dolls, 4, 68, 80, 95, -1/2 * 80 + 2.4, -1/2 * 95 + -0.5, 80, 95, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(dolls, 7, 153, 80, 95, -1/2 * 80 + 3.4, -1/2 * 95 + -0.5, 80, 95, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(dolls, 9, 242, 80, 95, -1/2 * 80 + 3.9, -1/2 * 95 + -1.5, 80, 95, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(dolls, 16, 341, 80, 95, -1/2 * 80 + 4.7, -1/2 * 95 + -1.6, 80, 95, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 5)
            {
                this.drawUnit(dolls, 21, 453, 80, 95, -1/2 * 80 + 5.6, -1/2 * 95 + -5, 80, 95, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "freydicSpear")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(oldverse, 382, 104, 53, 76, -39, -65, 53, 76, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(oldverse, 434, 104, 53, 76, -37.5, -67, 53, 76, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(oldverse, 484, 104, 53, 76, -35.25, -68, 53, 76, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(oldverse, 535, 104, 53, 76, -28.5, -71, 53, 76, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 4)
            {
                this.drawUnit(oldverse, 591, 104, 53, 76, -21.5, -73.75, 53, 76, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "mace")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polyPNG, 51, 70, 105, 46, -26, -22, 70, 45, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polyPNG, 169, 62, 105, 46, -26, -29, 70, 45, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polyPNG, 282, 47, 105, 53, -33, -40, 70, 45, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polyPNG, 399, 68, 105, 59, -38, -43, 72, 45, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 4)
            {
                this.drawUnit(polyPNG, 520, 59, 105, 69, -28, -43, 72, 47, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "freydicGreatSword")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(oldverse, 2205, 203, 89, 88, -7, -80, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(oldverse, 2305, 203, 89, 88, -6, -83.5, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(oldverse, 2405, 203, 89, 88, -8, -85.5, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(oldverse, 2505, 203, 89, 88, -13.5, -87, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(oldverse, 2605, 203, 89, 88, -21, -90, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(oldverse, 2678, 203, 89, 88, -49, -93, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(oldverse, 2750, 203, 89, 88, -55, -92.5, 106.8, 105.6, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 7)
            {
                this.drawUnit(oldverse, 2830, 203, 89, 88, -65, -90, 106.8, 105.6, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "electricBolt")
        {
            this.damageFrame = "manual";
            if (theCostume <= 0)
            {
                this.spellCast = false;

                this.drawUnit(mofu, 455, 103, 32, 30, -17, -25, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(mofu, 455, 144, 32, 30, -19, -25, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(mofu, 457, 175, 32, 30, -22, -28, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(mofu, 458, 207, 32, 30, -21, -27, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(mofu, 460, 236, 32, 30, -22, -30, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(mofu, 461, 267, 32, 30, -21, -33, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                if (this.spellCast == false)
                {
                    if (player.gamemode != "protagonist")
                    {
                        this.rotation = this.newRotation; //turn instantly to player at time of projection
                    }
                    this.spellCast = true;
                    magicList.push(new Magic({ID: "electricBolt", CNX: this.CNX}, false, false, this, this.damagesPlayer));
                }
                this.drawUnit(mofu, 461, 267, 32, 30, -21, -33, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 7)
            {
                this.drawUnit(mofu, 461, 267, 32, 30, -21, -33, 32 * 1.25, 30 * 1.25, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "iceSpikes")
        {
            this.damageFrame = "manual";
            if (theCostume <= 0)
            {
                this.spellCast = false;
                this.drawUnit(polypol, 1862, 109, 44, 24, -22, -20, 44, 24, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polypol, 1864, 141, 44, 24, -22, -20, 44, 24, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polypol, 1864, 203, 44, 24, -21, -21, 44, 24, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polypol, 1864, 230, 44, 24, -21, -21, 44, 24, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polypol, 1865, 172, 44, 24, -21, -21, 44, 24, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polypol, 1864, 260, 44, 24, -21, -21, 44, 24, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                if (this.spellCast == false)
                {
                    if (player.gamemode != "protagonist")
                    {
                        this.rotation = this.newRotation; //turn instantly to player at time of projection
                    }
                    this.spellCast = true;

                    if (this.CNX >= 50)
                    {
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 1, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 2, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 3, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 4, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 5, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 6, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 7, this, this.damagesPlayer));
                    }
                    else if (this.CNX >= 40)
                    {
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 1, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 2, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 3, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 4, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 5, this, this.damagesPlayer));
                    }
                    else if (this.CNX >= 30)
                    {
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 1, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 2, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 3, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 4, this, this.damagesPlayer));
                    }
                    else if (this.CNX >= 20)
                    {
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 1, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 2, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 3, this, this.damagesPlayer));
                    }
                    else if (this.CNX >= 10)
                    {
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 1, this, this.damagesPlayer));
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 2, this, this.damagesPlayer));
                    }
                    else
                    {
                        magicList.push(new Magic({ID: "iceSpikes", CNX: this.CNX}, false, 1, this, this.damagesPlayer));
                    }
                }
                this.drawUnit(polypol, 1864, 260, 44, 24, -21, -21, 44, 24, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "thenganWarhammer")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.wepLayer = "over";
                this.drawUnit(theng, 44, 1406, 62, 139, -29.35, -85.5, 62 * 1.05, 139 * 1.05, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.wepLayer = "over";
                this.drawUnit(theng, 143, 1411, 62, 138, -28.86, -80, 62 * 1.05, 139 * 1.05, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.wepLayer = "over";
                this.drawUnit(theng, 237, 1411, 62, 138, -28.86, -80, 62 * 1.05, 139 * 1.05, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.wepLayer = "over";
                this.drawUnit(theng, 310, 1416, 62, 138, -28.86, -77.5, 62 * 1.05, 139 * 1.05, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.wepLayer = "standard";
                this.drawUnit(theng, 381, 1417, 62, 138, -28.86, -77.5, 62 * 1.05, 139 * 1.05, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 5)
            {
                this.wepLayer = "standard";
                this.drawUnit(theng, 450, 1417, 62, 138, -27.8, -77.5, 62 * 1.05, 139 * 1.05, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "smashStick")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(mofu, 187, 132, 64, 55, -65, -44, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(mofu, 252, 132, 64, 55, -64, -47, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(mofu, 190, 190, 64, 55, -51, -52.5, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(mofu, 242, 191, 64, 55, -48.5, -58, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(mofu, 187, 245, 64, 55, -42, -60, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(mofu, 239, 250, 64, 55, -36, -51, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(mofu, 186, 307, 64, 55, -37, -49, 64 * 1.5, 55 * 1.5, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "burningSmashStick")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.flashAnimate(90, this.rotation + 1 / 2 * Math.PI, 1, [{image: mofu, imgX: 60, imgY: 404, portionW: 66, portionH: 65, adjX: -58, adjY: -52, width: 66 * 1.5, height: 65 * 1.5}, {image: mofu, imgX: 56, imgY: 353, portionW: 66, portionH: 65, adjX: -63, adjY: -52, width: 66 * 1.5, height: 65 * 1.5}, {image: mofu, imgX: 43, imgY: 131, portionW: 66, portionH: 65, adjX: -63, adjY: -47, width: 66 * 1.5, height: 65 * 1.5}, {image: mofu, imgX: 60, imgY: 404, portionW: 66, portionH: 65, adjX: -58, adjY: -52, width: 66 * 1.5, height: 65 * 1.5}, {image: mofu, imgX: 56, imgY: 353, portionW: 66, portionH: 65, adjX: -63, adjY: -52, width: 66 * 1.5, height: 65 * 1.5}]);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(mofu, 109, 127, 66, 65, -60, -55, 66 * 1.5, 65 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(mofu, 41, 180, 66, 65, -56, -70, 66 * 1.5, 65 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(mofu, 97, 186, 66, 65, -48, -65, 66 * 1.5, 65 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(mofu, 41, 245, 66, 65, -44, -62, 66 * 1.5, 65 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(mofu, 92, 248, 66, 65, -38, -55, 66 * 1.5, 65 * 1.5, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(mofu, 40, 306, 66, 65, -38, -51.5, 66 * 1.5, 65 * 1.5, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "thenganSword")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polyPNG, 917, 566, 96, 86, -18, -31, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polyPNG, 918, 487, 96, 86, -12, -39, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polyPNG, 915, 421, 96, 86, -16, -57, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polyPNG, 909, 342, 96, 86, -22, -67, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polyPNG, 905, 239, 96, 86, -29, -77, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polyPNG, 898, 100, 96, 86, -35, -81, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(polyPNG, 825, 1, 96, 86, -35, -78, 88, 86, 1/2 * Math.PI);
            }
            else if (theCostume >= 7)
            {
                this.drawUnit(polyPNG, 788, 111, 96, 86, -48, -75, 88, 86, 1/2 * Math.PI);
            }
        }
        else if (this.weapon == "meatCleaver")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(balkur, 46, 748, 123, 101, -1/2* 123 * 0.74 + 2, -1/2* 101 * 0.74 - 23, 123 * 0.74, 101 * 0.74, 1/2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(balkur, 180, 749, 123, 101, -1/2* 123 * 0.74 + 2, -1/2* 101 * 0.74 - 23, 123 * 0.74, 101 * 0.74, 1/2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(balkur, 329, 747, 123, 101, -1/2* 123 * 0.74 + 2, -1/2* 101 * 0.74 - 23, 123 * 0.74, 101 * 0.74, 1/2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(balkur, 481, 742, 123, 101, -1/2* 123 * 0.74 + 1, -1/2* 101 * 0.74 - 23, 123 * 0.74, 101 * 0.74, 1/2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(balkur, 614, 742, 123, 101, -1/2* 123 * 0.74 + 1.5, -1/2* 101 * 0.74 - 23, 123 * 0.74, 101 * 0.74, 1/2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(balkur, 711, 741, 123, 101, -1/2* 123 * 0.74 + 9.7, -1/2* 101 * 0.74 - 23, 123 * 0.74, 101 * 0.74, 1/2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(balkur, 10, 857, 123, 89, -1/2* 123 * 0.74 + 10, -1/2* 89 * 0.74 - 28, 123 * 0.74, 89 * 0.74, 1/2 * Math.PI);
            }
        }
        else if (this.weapon == "hammer")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polypol, 399, 703, 70, 70, -19, -36, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polypol, 518, 704, 70, 70, -22, -39, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polypol, 615, 708, 70, 70, -24, -39, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polypol, 732, 708, 70, 70, -25, -41, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polypol, 814, 701, 70, 70, -29, -45, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polypol, 918, 704, 70, 70, -41, -44, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(polypol, 1002, 702, 70, 70, -43, -36, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
            else if (theCostume >= 7)
            {
                this.drawUnit(polypol, 1083, 703, 70, 70, -47, -34, 70 / 1.3, 70 / 1.3, 1/2 * Math.PI);
            }
        }
        else if (this.weapon == "timberAxe")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(verse, 334, 332, 54, 49, -60.25, -42, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(verse, 390, 328, 54, 49, -56.25, -47, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(verse, 453, 330, 54, 49, -44.25, -60, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(verse, 516, 330, 54, 49, -35, -60, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(verse, 576, 332, 54, 49, -30, -56, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(verse, 634, 332, 54, 49, -25, -49, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(verse, 680, 332, 54, 49, -16, -43, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "longSpikedMorningStar")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(poly, 207, 143, 55, 58, -34, -39, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(poly, 260, 145, 55, 58, -30, -42, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(poly, 307, 147, 55, 58, -31, -40, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(poly, 356, 147, 55, 58, -33, -39, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(poly, 400, 142, 55, 58, -30, -47, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(poly, 452, 141, 55, 58, -31, -51, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(poly, 452, 141, 55, 58, -31, -51, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "kellishSpear")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(balkur, 30, 1125, 124, 101, -1/2 * 124 + 7, -1/2 * 101 - 22.4, 124, 101, 1 / 2 * Math.PI);
                this.drawUnit(balkur, 30, 1125, 124, 101, -1/2 * 124 + 7, -1/2 * 101 - 22.4, 124, 101, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(balkur, 163, 1120, 93, 122, -1/2 * 93 + 0.6, -1/2 * 122 - 20, 93, 122, 1 / 2 * Math.PI);
                this.drawUnit(balkur, 163, 1120, 93, 122, -1/2 * 93 + 0.6, -1/2 * 122 - 20, 93, 122, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(balkur, 289, 1115, 93, 122, -1/2 * 93 + 2.35, -1/2 * 122 - 20.75, 93, 122, 1 / 2 * Math.PI);
                this.drawUnit(balkur, 289, 1115, 93, 122, -1/2 * 93 + 2.35, -1/2 * 122 - 20.75, 93, 122, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 3)
            {
                this.drawUnit(balkur, 438, 1110, 93, 122, -1/2 * 93 + 1.9, -1/2 * 122 - 20.75, 93, 122, 1 / 2 * Math.PI);
                this.drawUnit(balkur, 438, 1110, 93, 122, -1/2 * 93 + 1.9, -1/2 * 122 - 20.75, 93, 122, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "kellishSword")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polpol, 160, 14, 77, 75, -1/2 * 77 * 1.3 + 4, -1/2 * 75 * 1.3 - 17, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polpol, 161, 101, 77, 75, -1/2 * 77 * 1.3 + 1, -1/2 * 75 * 1.3 - 13, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polpol, 160, 14, 77, 75, -1/2 * 77 * 1.3 + 4, -1/2 * 75 * 1.3 - 17, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polpol, 166, 190, 77, 75, -1/2 * 77 * 1.3 - 0.2, -1/2 * 75 * 1.3 - 22, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polpol, 248, 9, 77, 75, -1/2 * 77 * 1.3 -0.5, -1/2 * 75 * 1.3 - 23, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polpol, 258, 99, 77, 75, -1/2 * 77 * 1.3 + 0.5, -1/2 * 75 * 1.3 - 15, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(polpol, 258, 205, 77, 75, -1/2 * 77 * 1.3 - 3, -1/2 * 75 * 1.3 - 3.5, 77 * 1.3, 75 * 1.3, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "rasper")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(freeverse, 683, 43, 55, 51, -47, -49, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(freeverse, 755, 37, 55, 51, -39, -55, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(freeverse, 834, 38, 55, 51, -36, -54, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(freeverse, 903, 35, 55, 51, -30, -54.5, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 4)
            {
                this.drawUnit(freeverse, 928, 346, 55, 51, -27, -54, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "warHammer")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polypol, 32, 605, 93, 87, -21, -43, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polypol, 169, 605, 93, 87, -21, -43, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polypol, 304, 605, 93, 87, -22, -45, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polypol, 443, 605, 93, 87, -29, -46, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polypol, 589, 599, 93, 87, -32, -50, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polypol, 720, 590, 93, 87, -36, -53, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(polypol, 836, 594, 93, 87, -46, -50, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 7)
            {
                this.drawUnit(polypol, 958, 593, 93, 87, -49, -47.5, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 8)
            {
                this.drawUnit(polypol, 1083, 591, 93, 87, -51.5, -45, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "kellishSawClub")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polypol, 1254, 663, 85, 85, -64, -52, 85, 85, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polypol, 1346, 661, 85, 85, -58, -54, 85, 85, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polypol, 1429, 662, 85, 85, -47.5, -54, 85, 85, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polypol, 1506, 661, 85, 85, -41, -57, 85, 85, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polypol, 1597, 662, 85, 85, -26, -60, 85, 85, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polypol, 1663, 664, 85, 85, -33, -64, 85, 85, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 6)
            {
                this.drawUnit(polypol, 1732, 663, 85, 85, -34, -64, 85, 85, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "kellishClaymore")
        {
            this.damageFrame = "automatic";
            if (theCostume <= 0)
            {
                this.drawUnit(polypol, 491, 830, 135, 135, -50, -90, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(polypol, 654, 827, 135, 135, -50, -93, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(polypol, 870, 837, 135, 135, -46, -85, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.drawUnit(polypol, 1100, 838, 135, 135, -44, -80, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                this.drawUnit(polypol, 1386, 832, 135, 135, -14, -81, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(polypol, 1652, 828, 135, 135, -10, -79, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(polypol, 513, 993, 135, 135, -15, -82, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 7)
            {
                this.drawUnit(polypol, 673, 990, 135, 135, -21, -83, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 8)
            {
                this.drawUnit(polypol, 892, 981, 135, 135, -17, -93, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 9)
            {
                this.drawUnit(polypol, 1106, 971, 135, 135, -18, -113, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 10)
            {
                this.drawUnit(polypol, 1333, 963, 135, 135, -59, -124, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 11)
            {
                this.drawUnit(polypol, 1611, 961, 135, 135, -74, -124, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 12)
            {
                this.drawUnit(polypol, 503, 1162, 135, 135, -75, -117, 135, 135, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 13)
            {
                this.drawUnit(polypol, 680, 1158, 135, 135, -88, -112, 135, 135, 1 / 2 * Math.PI);
            }
        }
        else if (this.weapon == "flail")
        {
            this.damageFrame = "manual";
            if (theCostume <= 0) //11 frames
            {
                this.drawUnit(oldverse, 2194, 128, 66, 72, -42, -102, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 1)
            {
                this.drawUnit(oldverse, 2253, 128, 66, 72, -47.5, -103, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 2)
            {
                this.drawUnit(oldverse, 2313, 128, 66, 72, -41.75, -103, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 3)
            {
                this.doAttackThisFrame = true;
                this.drawUnit(oldverse, 2373, 128, 66, 72, -46.5, -102, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 4)
            {
                //this is the frame that should do the damage.
                if (this.doAttackThisFrame)
                {
                    this.doAttackThisFrame = false;
                    this.finalAttackCostume = true;
                }
                this.drawUnit(oldverse, 2430, 128, 66, 72, -62, -104.5, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 5)
            {
                this.drawUnit(oldverse, 2489, 128, 66, 72, -57.5, -105, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 6)
            {
                this.drawUnit(oldverse, 2539, 128, 66, 72, -59.25, -103, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 7)
            {
                this.drawUnit(oldverse, 2588, 128, 66, 72, -61.5, -104.5, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 8)
            {
                this.drawUnit(oldverse, 2639, 128, 66, 72, -58, -104, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume <= 9)
            {
                this.drawUnit(oldverse, 2689, 128, 66, 72, -62, -104, 99, 108, 1 / 2 * Math.PI);
            }
            else if (theCostume >= 10)
            {
                this.drawUnit(oldverse, 2744, 128, 66, 72, -51.5, -105, 99, 108, 1 / 2 * Math.PI);
            }
        }
        XXX.restore();
    };

    this.switchToRanged = function(weapon)
    {
        if (this.petrified != true)
        {
            if (this.swimming != true)
            {
                if (this.disturbed == true || this.DTU(this.target) <= this.baseSight)
                {
                    if (this.target == player)
                    {
                        var dtp = this.DTP();
                        var targRad = player.mySize;
                    }
                    else if (this.target != "none")
                    {
                        var dtp = this.DTU(this.target);
                        var targRad = this.target.sizeRadius;
                    }

                    if (this.engagementRadius + (targRad - 10) < dtp)
                    {
                        this.rangedSwitch = true;
                        this.weapon = weapon;
                        this.ranged = true;
                        this.attacking = true;
                    }
                    else
                    {
                        this.weapon = this.ultra.weapon[0];
                        this.ranged = false;
                    }
                }
                else
                {
                    this.attacking = false;
                }
            }
        }
    };

    this.switchToSwimming = function()
    {
        if (this.swimming == true)
        {
            this.weapon = "swimming";
            this.ranged = true;
        }
        else
        {
            if (this.rangedSwitch != true)
            {
                if (this.ID != "Doppelganger" && this.ID != "Unbound Doppelganger")
                {
                    this.weapon = this.ultra.weapon[0];
                    this.ranged = this.ultra.ranged[0];
                }
            }
        }
        this.rangedSwitch = false;
    };

    //Basic Functionality

    this.disturbedTimer = function()
    {
        if (new Date().getTime() - this.disturbedTime < 20000 + (this.grudge * 1000))
        {
            this.disturbed = true;
        }
        else
        {
            if (this.type != "Soldier")
            {
                this.disturbed = false;
            }
        }
    };
    //death checker -- checks to see if they should be dead.
    this.deathChecker = function()
    {
        if (this.health <= 0 && !this.petrified) //a petrified unit will wait to die until it is unpetrified
        {
            this.alive = false;

            this.attacking = false;
            this.moving = false;
            this.playerSeen = false;
            this.disturbedTime = 0;
            this.disturbed = false;
            this.extraRangeTime = 0;
            this.extraRange = 0;

            //leeches leave body on death
            if (this.leeches > 0)
            {
                for (var iii = 0; iii < this.leeches; iii++)
                {
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Leech", false, "corpseLeech"));
                }
                this.leeches = 0;
            }

            //unmount on death
            if (this.mounted)
            {
                this.mounted = false;
                player.mounted = false;
            }

            if (this.wasAlive == true && !this.undeath)
            {
                this.wasAlive = false;
                this.timeSinceDead = new Date().getTime();

                //loot and experience
                if (player.spell == "none" && this.killNotByPlayer == false && this.muzzle == false && player.form != "werewolf")
                {
                    player.experience += Math.max(0, this.experience - this.lessEXP);
                }

                var chanced = false;
                console.log(chanced);
                if (this.killNotByPlayer == false && this.muzzle == false || this.killedByCompanion && this.muzzle == false)
                {
                    if (!this.water || this.flotation || this.land) //items are lost to the water unless the creature can float
                    {
                        if (player.form != "werewolf")
                        {
                            if (this.revived != true)
                            {
                                chanced = true;
                                for (var i = 0; i < this.drops.length; i++)
                                {
                                    worldItems.push([this.drops[i][0], this.drops[i][1]]);
                                }
                            }
                            else
                            {
                                worldItems.push([new Item("nechromanticDust", this.X, this.Y), 1 + Math.floor(this.healthMAX / 35)]);
                            }
                        }
                    }

                    if (this.beastEntry != "none")
                    {
                        if (player.getSurvivalism() >= this.beastEntry.intReq)
                        {
                            var addEntry = true;
                            for (var i = 0; i < beastJournal.length; i++)
                            {
                                if (this.beastEntry.name == beastJournal[i].name && this.beastEntry.alpha == beastJournal[i].alpha)
                                {
                                    if (changeBeastiary)
                                    {
                                        beastJournal.splice(i, 1);
                                    }
                                    else
                                    {
                                        addEntry = false;
                                    }
                                    break;
                                }
                            }

                            if (addEntry)
                            {
                                beastJournal.push(this.beastEntry);
                            }
                        }
                    }
                }

                //if player would not otherwise get the dropped item make sure to drop all quest important items.
                if (chanced == false)
                {
                    if (this.revived != true)
                    {
                        for (var i = 0; i < this.drops.length; i++)
                        {
                            this.drops[i][0].setItemID();
                            if (this.drops[i][0].questy == true || this.drops[i][0].utility == "questItem")
                            {
                                worldItems.push([this.drops[i][0], this.drops[i][1]]);
                            }
                        }
                    }
                }

                //transference into the list of the dead...
                if (this.guarantee)
                {
                    this.removeSelfFromCompanionList(); //if the unit was a companion this removes the unit from the player's companion list.
                }


                var me = ArtificialIntelligenceAccess.indexOf(this);
                if (!this.deleteBody)
                {
                    if (!this.water || this.flotation || this.land) //bodies are lost to the water unless the creature can float
                    {
                        if (this.removeFromDeath != true)
                        {
                            deadAIList.push(this);
                        }
                    }
                }
                ArtificialIntelligenceAccess.splice(me, 1);
            }
            else if (this.undeath == true)
            {
                this.undeath = false;
                this.disturbedTime = new Date().getTime() + 9999999999;
                this.disturbed = true;
                this.health = 1/1000 * this.healthMAX;
                this.alive = true;
                if (player.getEminence() >= 2)
                {
                    if (this.baseTeam != "neutral")
                    {
                        this.baseTeam = "player";
                    }
                }
            }
        }
    };

    //draw X and Y point.
    this.testForCenter = function()
    {
        XXX.beginPath();
        XXX.fillStyle="gold";
        XXX.arc(X - this.X + (CCC.width / 2) , Y - this.Y + (CCC.height / 2), 4, 0, 2 * Math.PI);
        XXX.fill();
    };
    //this draws a circle that represents the size of the AI Unit
    this.testForSize = function()
    {
        XXX.beginPath();
        XXX.strokeStyle ="rgba(255, 255, 255, 0)";
        XXX.fillStyle="rgba(255, 255, 255, 0.4)";
        XXX.arc(X - this.X + (CCC.width / 2) , Y - this.Y + (CCC.height / 2), this.sizeRadius, 0, 2 * Math.PI);
        XXX.fill();
    };

    //if damaged a mini health bar will be displayed.
    this.showHealthWhenHurt = function()
    {
        if (!this.petrified)
        {
            if (this.health < this.healthMAX && (new Date().getTime() - this.healthShownTime) < 5000 || (new Date().getTime() - this.showHealthTime) < 250)
            {
                XXX.beginPath();
                XXX.fillStyle ="red";
                XXX.fillRect(X - this.X + (CCC.width / 2), Y - this.Y + (CCC.height / 2), 12, 3);
                if (this.health >= 0)
                {
                    XXX.beginPath();
                    XXX.fillStyle ="lightGreen";
                    XXX.fillRect(X - this.X + (CCC.width / 2), Y - this.Y + (CCC.height / 2), (12 * this.health / this.healthMAX), 3);
                }
            }
        }
    };

    //finds the unit nearest this unit and its distance and sets them to class accessible variables.
    this.findNearestUnit = function()
    {
        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            var distanceToOther = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y)); // this is the distance formula and in this line it is being used to find the distance each Unit is away from this one...
            if (this.closestDistance == null && ArtificialIntelligenceAccess[i] != this) // if the process is just starting there will not have been a closest yet to compare with so it is set to the first unit in the list.
            {
                this.closestDistance = distanceToOther;
                this.closestUnit = ArtificialIntelligenceAccess[i];
            }
            else if (distanceToOther < this.closestDistance && ArtificialIntelligenceAccess[i] != this) //this compares the distance of the unit that is being focused on with that of the one stored in the variable closest. Only the one with the least distance from this Unit can hold the title closest.
            {
                this.closestDistance = distanceToOther;
                this.closestUnit = ArtificialIntelligenceAccess[i];
            }
        }
    };

    //This function finds all nearby units within a certain range and puts them in a given list. This is a function called by other functions.
    this.findNearbyUnitTypeGroup = function(range, type, list)
    {

        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            var distanceToOther = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y)); // this is the distance formula and in this line it is being used to find the distance each Unit is away from this one...

            if (ArtificialIntelligenceAccess[i] !== this && ArtificialIntelligenceAccess[i].type == type && distanceToOther <= range)
            {
                list.push(ArtificialIntelligenceAccess[i]);
            }
        }
    };

    // find the difference between two angles, and the sign of the difference
    this.angleDelta = function(start, end)
    {
        var delta = end - start;

        if (delta > Math.PI)
        {
            delta = delta - (Math.PI * 2)
        }
        else if (delta < - Math.PI)
        {
            delta = delta + (Math.PI * 2)
        }

        return delta;
    };

    // turns to the rotation that the unit would like to be at.
    this.turnToDestination = function()
    {
        if (this.rotatable && !this.petrified)
        {
            var quickestRotation = this.angleDelta(this.rotation, this.newRotation); //This is a number that represents the quickest rotation possible.
            if (this.suspendConflictingPointSystems && Math.abs(quickestRotation) < (this.rotationSpeed * timeSpeed / this.timeResistance))
            {
                this.suspendConflictingPointSystems = false;
            }

            if (Math.abs(quickestRotation) >= (this.rotationSpeed * timeSpeed / this.timeResistance))
            {
                if (quickestRotation < 0 - (this.rotationSpeed * timeSpeed / this.timeResistance)) // if the rotation would bring the unit to a rotation that is less than zero then
                {
                    this.rotation -= (this.rotationSpeed * timeSpeed / this.timeResistance);
                }
                else if (quickestRotation >= 0 + (this.rotationSpeed * timeSpeed / this.timeResistance))
                {
                    this.rotation += (this.rotationSpeed * timeSpeed / this.timeResistance);
                }
            }
            else
            {
                if (player.gamemode == "protagonist" && this.type != "Soldier" && this.type != "Person" || player.gamemode != "protagonist")
                {
                    this.rotation = this.newRotation;
                }
            }
        }
    };

    this.getGlobalAlpha = function()
    {
        if (this.petrified)
        {
            return 1;
        }
        else if (this.swimming && this.flotation == false && this.type != "Person" && this.type != "Soldier" && this.type != "Mugmul")
        {
            return 0.5;
        }
        else if (this.invisible)
        {
            return 0;
        }
        else if (this.ghost)
        {
            return 0.3;
        }
        else
        {
            return 1;
        }
    };

    this.drawColorized = function(img, sx, sy, w, h, szX, szY, a, colour)
    {
        var canvas = document.createElement("canvas");
        canvas.width = szX;
        canvas.height = szY;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, sx, sy, w, h, 0, 0, szX, szY);
        ctx.globalCompositeOperation = "source-atop";
        ctx.globalAlpha = a;
        ctx.fillStyle = colour;
        ctx.fillRect(0,0,szX,szY);
        return canvas;
    };

    //BUILD-LAB [this section is where the individualized ai unit skeletons will start to form up a bit.
    //this is a quick draw self function to make things a lot easier...
    this.drawUnit = function(img, cutX, cutY, width, length, positionX, positionY, skewW, skewL, extraRotation)
    {
        //DRAW SELF
        XXX.save();
        // translate to...
        //  X - this.X   >>>  gives you screen coordinates with (0,0) at center of canvas
        //    + canvasWidth/2  >>> gives you screen coordinates relative to top left of canvas
        // ... but ...  that is a point, and you want to center your images, so ...
        //    you will want to subtract half the image's width // I do this externally through positionX and PositionY
        //
        // and do the same thing for Y of course

        var extraRot;
        if (extraRotation != undefined)
        {
            extraRot = extraRotation;
        }
        else
        {
            extraRot = 0;
        }

        XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
        if (this.kid)
        {
            XXX.scale(this.kidSize, this.kidSize);
        }
        XXX.rotate(this.rotation + this.extraRot + extraRot);
        XXX.beginPath();
        XXX.globalAlpha = this.getGlobalAlpha();
        if (this.colorized[0] == true)
        {
            var colorization = this.drawColorized(img, cutX, cutY, width, length, skewW, skewL, this.getGlobalAlpha(), this.colorized[1]);
            XXX.drawImage(colorization, 0, 0, skewW, skewL, positionX, positionY, skewW, skewL);
        }
        else
        {
            XXX.drawImage(img, cutX, cutY, width, length, positionX, positionY , skewW, skewL);
        }
        XXX.restore();
    };

    this.drawHuman = function()
    {
        XXX.save();
        XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
        if (this.kid)
        {
            XXX.scale(this.kidSize, this.kidSize);
        }
        XXX.rotate(this.rotation);
        XXX.beginPath();

        if (this.petrified)
        {
            XXX.fillStyle = "lightGrey";
        }
        else if (this.ID == "Doppelganger" || this.ID == "Unbound Doppelganger")
        {
            XXX.fillStyle = player.race;
        }
        else if (this.ultra.race == "Freynor")
        {
            XXX.fillStyle = "navy";
        }
        else if (this.ultra.race == "Sylkeem")
        {
            XXX.fillStyle = "#06F4CA";
        }
        else if (this.ultra.race == "Orgell")
        {
            XXX.fillStyle = "gold";
        }
        else if (this.ultra.race == "Vardan")
        {
            XXX.fillStyle = "#1c1c1c";
        }
        else if (this.ultra.race == "Thengar")
        {
            XXX.fillStyle = "#663300";
        }
        else if (this.ultra.race == "Nirwaden")
        {
            XXX.fillStyle = "#e68900";
        }
        else if (this.ultra.race == "Kel")
        {
            XXX.fillStyle = "green";
        }
        else if (this.ultra.race == "Aldrek")
        {
            XXX.fillStyle = "darkRed";
        }
        else if (this.ultra.race == "Cephrite")
        {
            XXX.fillStyle = "purple";
        }
        else if (this.ultra.race == "Outlander")
        {
            XXX.fillStyle = "white";
        }
        else if (this.ultra.race == "Empiric")
        {
            XXX.fillStyle = "#999966";
        }
        else
        {
            //Faelan fairy Princess is the default.
            XXX.fillStyle = "pink";
        }

        XXX.arc(0, 0, 10, 0, 2 * Math.PI);
        XXX.fill();
        if (this.petrified)
        {
            XXX.strokeStyle = "lightGrey";
        }
        else
        {
            XXX.strokeStyle = "black";
        }
        XXX.lineWidth = 0.5;
        XXX.stroke();

        XXX.restore();
    };

    this.drawHumanOutfit = function(outfit, dead)
    {
        //Unit Worn Outfits
        if (dead != true)
        {
            XXX.save();
            if (outfit == "chainArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(verse, 1915, 1, 31, 27, -(1 / 2 * 26) - 1.3, -(1 / 2 * 27) + 1.5, 27, 27);
            }
            else if (outfit == "jvostranPlateArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 508, 659, 40, 39, -(1 / 2 * 40 * 0.8) + 2, -(1 / 2 * 39 * 0.8) + 0, 40 * 0.8, 39 * 0.8);
            }
            else if (outfit == "varnFurClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(verse, 2140, 29, 25, 20, -(1 / 2 * 25) - 1.75, -(1 / 2 * 20) - 4, 31, 27.2);
            }
            else if (outfit == "boarArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                XXX.drawImage(chupa, 55, 575, 45, 42, -1/2 * 45 * 1.5 + 0, -1/2 * 42 * 1.6 - 3, 45 * 1.5, 42 * 1.6);
            }
            else if (outfit == "barracoPlateArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                XXX.drawImage(chupa, 162, 220, 78, 99, -1/2 * 78 * 0.55 + 0, -1/2 * 99 * 0.55 - 0, 78 * 0.55, 99 * 0.55);
            }
            else if (outfit == "orgishClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                XXX.drawImage(chupa, 51, 24, 28, 39, -1/2 * 28 * 1.61 - 1.5, -1/2 * 39 * 1.61 + 4.4, 28 * 1.61, 39 * 1.61);
            }
            else if (outfit == "matadorOutfit")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                XXX.drawImage(chupa, 172, 38, 34, 39, -1/2 * 34 * 1.5 + 0, -1/2 * 39 * 1.5 - 3, 34 * 1.5, 39 * 1.5);
            }
            else if (outfit == "nirwadenMorionArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 28, 653, 67, 55, -(1 / 2 * 67 * 0.62) + 0.5, -(1 / 2 * 55 * 0.62) - 0.4, 67 * 0.62, 55 * 0.62);
            }
            else if (outfit == "nirwadenPlateArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 251, 670, 56, 42, -(1 / 2 * 56 * 0.7) + 3, -(1 / 2 * 42 * 0.7) -0, 56 * 0.7, 42 * 0.7);
            }
            else if (outfit == "nirwadenClothingF")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 20, 1023, 49, 47, -(1 / 2 * 49 * 0.65) - 0, -(1 / 2 * 47 * 0.65) - 0, 49 * 0.65, 47 * 0.65);
            }
            else if (outfit == "nirwadenClothingM")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 830, 866, 44, 46, -(1 / 2 * 44 * 0.62) - 1.5, -(1 / 2 * 46 * 0.62) - 0, 44 * 0.62, 46 * 0.62);
            }
            else if (outfit == "inquisitionOutfit")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 594, 868, 85, 49, -(1 / 2 * 85 * 0.61) + 0.5, -(1 / 2 * 49 * 0.61) - 1.4, 85 * 0.61, 49 * 0.61);
            }
            else if (outfit == "nirwadenPriestRobes")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 444, 3515, 65, 54, -(1 / 2 * 65 * 0.62) - 8, -(1 / 2 * 54 * 0.62) - 0, 65 * 0.62, 54 * 0.62);
            }
            else if (outfit == "nirwadenNobleOutfit")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 24, 846, 48, 53, -(1 / 2 * 48 * 0.66) - 5, -(1 / 2 * 53 * 0.66) -1.5, 48 * 0.66, 53 * 0.66);
            }
            else if (outfit == "nirwadenNobleDress")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 470, 745, 95, 63, -(1 / 2 * 95 * 0.54) - 17, -(1 / 2 * 63 * 0.54) -1, 95 * 0.54, 63 * 0.54);
            }
            else if (outfit == "nirwadenLadyPointyCap")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 470, 745, 95, 63, -(1 / 2 * 95 * 0.54) - 17, -(1 / 2 * 63 * 0.54) -1, 95 * 0.54, 63 * 0.54);
            }
            else if (outfit == "nirwadenGambeson")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 32, 489, 63, 45, -(1 / 2 * 63 * 0.66) + 0.5, -(1 / 2 * 45 * 0.66) - 1.7, 63 * 0.66, 45 * 0.66);
            }
            else if (outfit == "engineerOutfit")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 810, 2407, 89, 47, -(1 / 2 * 89 * 0.7) + 0, -(1 / 2 * 47 * 0.7) - 0, 89 * 0.7, 47 * 0.7);
            }
            else if (outfit == "walrusLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(polyPNG, 804, 262, 35, 24, -(1 / 2 * 45.5) + 8, -(1 / 2 * 31.2) + 1.25, 42, 28.8);
            }
            else if (outfit == "northernClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                XXX.drawImage(norc, 2, 10, 18, 19, -(1 / 2 * 18 * 1.8) - 2.5, -(1 / 2 * 19 * 1.8) - 0, 18 * 1.8, 19 * 1.8);
            }
            else if (outfit == "sealSkinClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 / 2 * Math.PI - 0.1);
                XXX.drawImage(norc, 9, 114, 18, 19, -(1 / 2 * 18 * 1.7) + 0.45, -(1 / 2 * 19 * 1.9) + 0, 18 * 1.7, 19 * 1.9);
            }
            else if (outfit == "fineFreydicOutfitF")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(furr, 289, 439, 40, 32, -(1 / 2 * 40) - 1.3, -(1 / 2 * 32) + 2, 40, 32);
            }
            else if (outfit == "fineFreydicOutfitM")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(furr, 230, 555, 40, 32, -(1 / 2 * 40) + 2.9, -(1 / 2 * 32) + 4.5, 36, 28.8);
            }
            else if (outfit == "mrbTacticalArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 15, 17, 44, 43, -(1 / 2 * 44 * 0.76) + 0, -(1 / 2 * 43 * 0.76) - 0, 44 * 0.76, 43 * 0.76);
            }
            else if (outfit == "whiteMageRobe")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(freeverse, 941, 114, 34, 30, - 1/2 * 34 * 0.9 + 0.4, - 1/2 * 30 * 0.9 + 1.1, 34 * 0.9, 30 * 0.9);
            }
            else if (outfit == "blackMageRobe")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(freeverse, 940, 224, 34, 30, - 1/2 * 34 * 0.9 + 0.3, - 1/2 * 30 * 0.9 + 1.15, 34 * 0.9, 30 * 0.9);
            }
            else if (outfit == "cyanMageRobe")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(freeverse, 584, 107, 34, 30, - 1/2 * 34 * 0.9 + 0.4, - 1/2 * 30 * 0.9 + 1.55, 34 * 0.9, 30 * 0.9);
            }
            else if (outfit == "redMageRobe")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(freeverse, 702, 111, 34, 30, - 1/2 * 34 * 0.9 + 0.85, - 1/2 * 30 * 0.9 + 1.5, 34 * 0.9, 30 * 0.9);
            }
            else if (outfit == "purpleMageRobe")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1 / 2 * Math.PI);
                XXX.drawImage(freeverse, 824, 111, 34, 30, - 1/2 * 34 * 0.9 + 1, - 1/2 * 30 * 0.9 + 1, 34 * 0.9, 30 * 0.9);
            }
            else if (outfit == "thenganPlateArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(theCrack, 127, 614, 23, 20, -(1 / 2 * 23 * 1.6) - 0, -(1 / 2 * 20 * 1.6) -0, 23 * 1.6, 20 * 1.6);
            }
            else if (outfit == "northernPlateArmour") //furr, 44, 18, 21, 18, - 1/2 * 21 * 2.15, - 1/2 * 18 * 2.15 + 0, 21 * 2.15, 18 * 2.15
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(furr, 44, 18, 21, 18, - 1/2 * 21 * 2.15, - 1/2 * 18 * 2.15 + 0, 21 * 2.15, 18 * 2.15);
            }
            else if (outfit == "hoffalgreFurCloak")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(nognog, 669, 12, 17, 14, -(1 / 2 * 17 * 1.64) + 0, -(1 / 2 * 14 * 1.6) - 1, 17 * 1.64, 14 * 1.6);
            }
            else if (outfit == "skolLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(theng, 702, 1042, 37, 32, - 1/2 * 37 * 1, - 1/2 * 32 * 1 + 0, 37 * 1, 32 * 1);
            }
            else if (outfit == "mofuTribalWear")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 * Math.PI);
                XXX.drawImage(polpol, 61, 97, 32, 32, -(1 / 2 * 32 * 1.25) + 4, -(1 / 2 * 32 * 1.25) + 0.75, 32 * 1.25, 32 * 1.25);
            }
            else if (outfit == "mofuMatriarchHeaddress")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1 * Math.PI);
                XXX.drawImage(polpol, 47, 54, 49, 34, -(1 / 2 * 49 * 1.15) - 4, -(1 / 2 * 34 * 1.15) + 0, 49 * 1.15, 34 * 1.15);
                XXX.drawImage(polpol, 47, 54, 49, 34, -(1 / 2 * 49 * 1.15) - 4, -(1 / 2 * 34 * 1.15) + 0, 49 * 1.15, 34 * 1.15);
            }
            else if (outfit == "boulchomLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(theng, 746, 1165, 27, 27, - 1/2 * 27 * 1.25, - 1/2 * 27 * 1.25 + 0, 27 * 1.25, 27 * 1.25);
            }
            else if (outfit == "winterWolfClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(verse, 3185, 165, 33, 28, -(1 / 2 * 26.4) + 0, -(1 / 2 * 22.4) - 0.75, 29.7, 25.2);
            }
            else if (outfit == "hetmerArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(polyPNG, 792, 308, 52, 48, -(1 / 2 * 62.4) + 0, -(1 / 2 * 57.6) - 2.5, 67.6, 62.4);
            }
            else if (outfit == "evrakLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(mofu, 71, 2186, 53, 57, -(1 / 2 * 53 * 0.7) + 2, -(1 / 2 * 57 * 0.7) + 1, 53 * 0.7, 57 * 0.7);
            }
            else if (outfit == "frichFurClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(verse, 2106, 5, 29, 24, -(1 / 2 * 29) + 1.75, -(1 / 2 * 24) - 0, 26, 26);
            }
            else if (outfit == "doctorOutfit")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(gent, 676, 497, 60, 70, -(1 / 2 * 60 * 1.2) + 0, -(1 / 2 * 70 * 1.2) - 0, 60 * 1.2, 70 * 1.2);
            }
            else if (outfit == "assassinWrappings")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 200, 841, 27, 30, -(1 / 2 * 27 * 1) + 0, -(1 / 2 * 30 * 1) - 0, 27 * 1, 30 * 1);
            }
            else if (outfit == "aldrekiiHijab")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 0.4);
                XXX.drawImage(bogg, 585, 781, 26, 24, -(1 / 2 * 26 * 1.5) + 0, -(1 / 2 * 24 * 1.5) + 0.85, 26 * 1.5, 24 * 1.5);
            }
            else if (outfit == "aldrekiiTurbanRed")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 634, 783, 26, 24, -(1 / 2 * 26 * 1.37) + 0, -(1 / 2 * 24 * 1.37) + 0.85, 26 * 1.37, 24 * 1.37);
            }
            else if (outfit == "aldrekiiTurbanPurple")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 669, 783, 26, 24, -(1 / 2 * 26 * 1.37) + 0, -(1 / 2 * 24 * 1.37) + 0.85, 26 * 1.37, 24 * 1.37);
            }
            else if (outfit == "ardilFurClothing" || outfit == "ardilFurSkirt")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(polpol, 4, 234, 41, 22, -(1 / 2 * 41 * 1.7) - 4, -(1 / 2 * 22 * 1.7) - 0.2, 41 * 1.7, 22 * 1.7);
            }
            else if (outfit == "naapridLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(verse, 3062, 1, 35, 22, -(1 / 2 * 49) + 0.5, -(1 / 2 * 30.8) + 2.25, 49, 30.8);
            }
            else if (outfit == "balgurMercArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(poly, 48, 106, 40, 32, -(1 / 2 * 40 * 1.2) - 3.65, -(1 / 2 * 32 * 1.2) -18.25, 40 * 1.38, 32 * 1.73);
            }
            else if (outfit == "balgurCaptainArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(poly, 50, 140, 36, 36, -(1 / 2 * 36 * 1.2) + 5, -(1 / 2 * 36 * 1.2) -9.5, 36 * 0.9, 36 * 1.45);
            }
            else if (outfit == "blackBearLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 622, 26, 23, 22, -(1 / 2 * 23 * 1.3) - 0, -(1 / 2 * 22 * 1.3) + 0, 23 * 1.3, 22 * 1.3);
            }
            else if (outfit == "saltBloodArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(norc, 126, 118, 36, 31, -(1 / 2 * 36 * 2) + 0, -(1 / 2 * 31 * 2) + 1.5, 36 * 2, 31 * 2);
            }
            else if (outfit == "balkurLeatherArmour")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                //XXX.drawImage(balkur, 137, 3, 39, 47, -(1 / 2 * 39 * 1.05) + 8, -(1 / 2 * 47 * 1.05) + 0, 39 * 1.05, 47 * 1.05);
                XXX.drawImage(balkur, 137, 3, 39, 47, -(1 / 2 * 39 * 0.75 * 1.1) + 3.5, -(1 / 2 * 47 * 1.05 * 1.1) + 0, 39 * 0.75 * 1.1, 47 * 1.05 * 1.1);
            }
            else if (outfit == "skinAndBones")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                //XXX.drawImage(polpol, 112, 139, 21, 26, -(1 / 2 * 21 * 1.6) - 2, -(1 / 2 * 26 * 1.6) + 2, 21 * 1.6, 26 * 1.6);
                XXX.drawImage(polpol, 112, 139, 21, 26, -(1 / 2 * 21 * 2) - 2, -(1 / 2 * 26 * 2) + 2, 21 * 2, 26 * 2);
            }
            else if (outfit == "blackBearFurClothing")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 622, 3, 23, 22, -(1 / 2 * 23 * 1.4) - 0, -(1 / 2 * 22 * 1.4) + 0, 23 * 1.4, 22 * 1.4);
            }
            XXX.restore();
        }
    };

    this.drawHumanOutfitBelow = function(outfit, dead)
    {
        //Unit Worn Outfits
        if (dead != true)
        {
            XXX.save();
            if (outfit == "nirwadenNobleDress")
            {
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                if (this.kid)
                {
                    XXX.scale(this.kidSize, this.kidSize);
                }
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 449, 827, 127, 157, -(1 / 2 * 127 * 0.55) + 0, -(1 / 2 * 157 * 0.55) -3, 127 * 0.55, 157 * 0.55);
            }
            XXX.restore();
        }
    };

    //This sets each unique unit's skills based on their type, for both normal and alpha, also it is where positioning for alphas or units who differ from the normal size will be.
    this.designUnits = function() //this includes all of the non-variable unit design as well as drops.
    {
        if (this.type == "Foux") //this is not a real unit
        {
            this.damageFrame = "automatic";
            this.team = this.ID;
            this.baseTeam = this.team;
            this.tamable = false;

            this.removeFromDeath = true;
            this.tangible = false;
            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0; //this is for rapid style combat only.
            this.healthMAX = 0.0001;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 0;
            this.rangeOfSight = 1; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.00001;
            this.engagementRadius = 0;
            this.sizeRadius = 5;
            this.negateArmour = 0;
            this.attackWait = 0;
            this.alphaSize = 1;
            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Etyr")
        {
            this.damageFrame = "automatic";
            this.team = "etyria";
            this.baseTeam = this.team;
            this.tameREQ = 9;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0; //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 6;
                this.health = this.healthMAX;
                this.armour = 2;
                this.speed = 2.75;
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.25;
                this.engagementRadius = 47;
                this.sizeRadius = 30;
                this.negateArmour = 5;
                this.attackWait = 0.55;
                this.beastEntry = {intReq: 3, name: "Etyr", health: "6 - 11", armour: "2", damage: "1 - 7", negate: "5", ability: "None", fireProof: 1, habitat: "Jungle", sight: 600, alpha: "Alpha", magicProof: 0, size: 30, speed: 2.75, rotation: 0.25, rate: 0.55, experience: 40, description: ["Etyr's are scaley reptilian creatures that have a behavior similar to that of a wolf. They hunt in packs, it is very", "rare to find one alone, and if you do the rest of its pack is probably about to ambush you. They", "usually lurk about the forest floor eating whatever small critters they can get their jaws around."], image: ["theCrack", 56, 18, 53, 41, 0, 0, 53 * 1.5 / 3, 41 * 1.5 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 2;
                this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.25;
                this.engagementRadius = 31;
                this.sizeRadius = 20;
                this.negateArmour = 3;
                this.attackWait = 0.57;
                this.beastEntry = {intReq: 1, name: "Etyr", health: "3 - 5", armour: "1", damage: "1 - 4", negate: "3", ability: "None", fireProof: 1, habitat: "Jungle", sight: 450, alpha: "Normal", magicProof: 0, size: 20, speed: 2, rotation: 0.25, rate: 0.57, experience: 22, description: ["Etyr's are scaley reptilian creatures that have a behavior similar to that of a wolf. They hunt in packs, it is very", "rare to find one alone, and if you do the rest of its pack is probably about to ambush you. They", "usually lurk about the forest floor eating whatever small critters they can get their jaws around."], image: ["theCrack", 56, 18, 53, 0, 0, 20, 53 / 3, 41 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Walrus")
        {
            this.damageFrame = "automatic";
            this.resistances = ["frozen", "shock", "water"];
            this.team = "walrusia";
            this.baseTeam = this.team;

            if (this.alpha == true)
            {
                this.tameREQ = 49;
                this.magicalResistance = 0;
                this.heatResistance = 3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 42) + 170;
                this.health = this.healthMAX;
                this.armour = 2;
                this.speed = 1.1;
                this.rangeOfSight = 330; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.035;
                this.engagementRadius = 65; //was 55
                this.sizeRadius = 45;
                this.negateArmour = 20;
                this.attackWait = 1.75;
                this.beastEntry = {intReq: 13, name: "Walrus", health: "170 - 211", armour: "2", damage: "33 - 78", negate: "20", ability: "Cold Resistant", fireProof: 3, habitat: "Ice Flats", sight: 330, alpha: "Elder", magicProof: 0, size: 45, speed: 1.1, rotation: 0.035, rate: 1.75, experience: 244, description: ["It is said that elder walruses are just walruses that have lived for hundreds of years. They tend to be fairly solitary unlike", "the younger variety, except of course when they have to mate, then the male usually protects the female while it is pregnant."], image: ["polyPNG", 871, 695, 77, 63, 0, 0, 146 * 1.35 / 3, 126 * 1.35 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.35; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 21;
                this.xAdjustment = 39; // was 0
            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 32;
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 21) + 60;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 0.85;
                this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.025; // 0.01 is a standard turn speed.
                this.engagementRadius = 59; //was 49
                this.sizeRadius = 40;
                this.negateArmour = 6;
                this.attackWait = 3.25;
                this.beastEntry = {intReq: 4, name: "Walrus", health: "60 - 80", armour: "1", damage: "4 - 18", negate: "6", ability: "Cold Resistant", fireProof: 2, habitat: "Ice Flats", sight: 250, alpha: "Normal", magicProof: 0, size: 40, speed: 0.85, rotation: 0.025, rate: 3.25, experience: 40, description: ["Walruses are large tusked animals with thick skin and a large blubber layer of fat to keep them warm in the harsh cold climate that they", "live in. They tend to group together so as to keep predators away by numbers, but it is not uncommon for one to be found alone."], image: ["polyPNG", 871, 695, 77, 63, 0, 0, 146 / 3, 126 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
            this.swimSpeed = this.speed * 3.25;
        }
        else if (this.type == "Shehid")
        {
            this.damageFrame = "automatic";
            this.awake = Math.round(Math.random());
            this.formChange = false; //this is for transforming from awake to asleep or sleep to awake... it signals that a change has been made so that an animation can play.
            this.resistances = ["acid", "stun", "burning", "shock", "night"];
            this.team = "shehidia";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 5;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 17) + 26;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.65;
                this.rangeOfSight = 285; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085;
                this.engagementRadius = 37;
                this.sizeRadius = 25;
                this.negateArmour = 10;
                this.attackWait = 2;
                this.effect = "stunII";
                this.beastEntry = {intReq: 20, name: "Shehid", health: "26 - 42", armour: "0 - 56", damage: "6 - 20", negate: "10", ability: "StunII", fireProof: "0 - 56", habitat: "Northern / Temperate Forests", sight: "65 - 285", alpha: "Alpha", magicProof: 5, size: 25, speed: 1.65, rotation: 0.085, rate: 2, experience: 77, description: ["Shehids are a form of living ooze creature that has a biologically formed shell and insectoid legs. The shehid's ooze is highly toxic to the", "extent of paralasis and it is used to melt and absorb its prey. Shehids normally rest in their shell which is colored to look like a mossy", "rock so that they can ooze out and devour unsuspecting creatures that happen to wander by."], image: ["polypol", 1170, 11, 43, 40, 0, 0, 43 * 2 / 3, 40 * 2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 22;
                this.xAdjustment = 20; // was 0
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 2;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 12;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.35;
                this.rangeOfSight = 185; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // 0.01 is a standard turn speed.
                this.engagementRadius = 29; //was 49
                this.sizeRadius = 14;
                this.negateArmour = 10;
                this.attackWait = 1.25;
                this.effect = "stunI";
                this.beastEntry = {intReq: 10, name: "Shehid", health: "12 - 20", armour: "0 - 30", damage: "3 - 10", negate: "10", ability: "StunI", fireProof: "1 - 30", habitat: "Northern / Temperate Forests", sight: "65 - 185", alpha: "Normal", magicProof: 2, size: 14, speed: 1.35, rotation: 0.085, rate: 1.25, experience: 38, description: ["Shehids are a form of living ooze creature that has a biologically formed shell and insectoid legs. The shehid's ooze is highly toxic to the", "extent of paralysis and it is used to melt and absorb its prey. Shehids normally rest in their shell which is colored to look like a mossy", "rock so that they can ooze out and devour unsuspecting creatures that happen to wander by."], image: ["polypol", 1170, 11, 43, 40, 0, 0, 43 / 3, 40 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Thueg")
        {
            this.damageFrame = "automatic";
            this.awake = Math.round(Math.random());
            this.formChange = false; //this is for transforming from awake to asleep or sleep to awake... it signals that a change has been made so that an animation can play.
            this.resistances = ["burning", "blinded", "night"]; //this is only a resistance while in sleeping form.
            this.team = "wild";
            this.baseTeam = this.team;
            this.attackListo = "start"; //this activates the feature that randomizes the attack of the unit (for this unit)
            this.tameREQ = 39;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 13) + 62;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.6;
                this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085;
                this.engagementRadius = 50;
                this.sizeRadius = 26;
                this.negateArmour = 5;
                this.attackWait = 1.80;
                this.effect = "none";
                this.beastEntry = {intReq: 22, name: "Thueg", health: "22 - 30", armour: "0 - 25", damage: "8 - 18", negate: "5", ability: "None", fireProof: "0 - 30", habitat: "Northern Plains / Mud Plains", sight: "250 - 1000", alpha: "Alpha", magicProof: 0, size: 26, speed: 4.6, rotation: 0.05, rate: 1.8, experience: 92, description: ["Thueg lie around all day sleeping in the shelter of their protective shell. Other plains creatures sometimes seek shade by them and meet their untimely demise.", "Thueg may rest a lot, but they are not lazy beasts. They can run quickly and wil persue their prey for long distances to catch it.", "Thueg are blind and use echolocation and smell to hunt."], image: ["nognog", 283, 47, 47, 37, 0, 0, 47 * 3 / 3, 37 * 3 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0; // was 0
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.5;
                this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 30;
                this.sizeRadius = 12;
                this.negateArmour = 0.5;
                this.attackWait = 1.80;
                this.effect = "none";
                this.beastEntry = {intReq: 10, name: "Thueg", health: "3", armour: "0 - 5", damage: "1.5 - 2.5", negate: "0.5", ability: "None", fireProof: "0 - 10", habitat: "Northern Plains / Mud Plains", sight: "100 - 360", alpha: "Baby", magicProof: 0, size: 12, speed: 3.5, rotation: 0.05, rate: 1.8, experience: 2, description: ["While still being completely ravenous and vile, baby thueg are notably less so than the older of their species.", "Thueg are blind and use echolocation and smell to hunt."], image: ["nognog", 283, 47, 47, 37, 0, 0, 47 * 1 / 3, 37 * 1 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.65;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
            else
            {
                this.tameREQ = 30;
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 18;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.3;
                this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 41; //was 49
                this.sizeRadius = 18;
                this.negateArmour = 1.5;
                this.attackWait = 1.80;
                this.effect = "none";
                this.beastEntry = {intReq: 16, name: "Thueg", health: "7 - 11", armour: "0 - 15", damage: "4 - 10", negate: "1.5", ability: "None", fireProof: "0 - 20", habitat: "Northern Plains / Mud Plains", sight: "250 - 1000", alpha: "Normal", magicProof: 0, size: 18, speed: 4.3, rotation: 0.05, rate: 1.8, experience: 23, description: ["Thueg lie around all day sleeping in the shelter of their protective shell. Other plains creatures sometimes seek shade by them and meet their untimely demise.", "Thueg may rest a lot, but they are not lazy beasts. They can run quickly and wil persue their prey for long distances to catch it.", "Thueg are blind and use echolocation and smell to hunt."], image: ["nognog", 283, 47, 47, 37, 0, 0, 47 * 2 / 3, 37 * 2 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Grush")
        {
            this.damageFrame = "automatic";
            this.awake = Math.round(Math.random());
            this.formChange = false; //this is for transforming from awake to asleep or sleep to awake... it signals that a change has been made so that an animation can play.
            this.resistances = ["shock", "night"];
            this.team = "wild";
            this.baseTeam = this.team;
            this.tameREQ = 37;

            if (this.alpha == "giant")
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 40) + 204;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.2;
                this.rangeOfSight = 285; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.09;
                this.engagementRadius = 84;
                this.sizeRadius = 25;
                this.negateArmour = 11;
                this.attackWait = 0.6;
                this.effect = "none";
                this.beastEntry = {intReq: 30, name: "Grush", health: "204 - 243", armour: "0 - 75", damage: "10 - 18", negate: "11", ability: "None", fireProof: -1, habitat: "Grasslands", sight: "80 - 140", alpha: "Giant", magicProof: 0, size: 25, speed: 3.2, rotation: 0.09, rate: 0.6, experience: 1100, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resember the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have itself a feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: ["mofu", 877, 1, 72, 72, 0, 0, 72 * 3 / 3, 72 * 3 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 3; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0; // was 0
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 1) + 1;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0.85;
                this.rangeOfSight = 100; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 24;
                this.sizeRadius = 8;
                this.negateArmour = 0.1;
                this.attackWait = 0.5;
                this.effect = "none";
                this.beastEntry = {intReq: 6, name: "Grush", health: "1", armour: "0 - 15", damage: "0.5 - 1", negate: 0.1, ability: "None", fireProof: -1, habitat: "Grasslands", sight: "45 - 60", alpha: "Baby", magicProof: 0, size: 8, speed: 0.85, rotation: 0.05, rate: 0.5, experience: 4, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resemble the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have itself a feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: ["mofu", 877, 1, 72, 72, 0, 0, 72 * 0.6 / 3, 72 * 0.6 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 0.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0; // was 0
            }
            else if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 10) + 44;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.6;
                this.rangeOfSight = 285; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085;
                this.engagementRadius = 47;
                this.sizeRadius = 21;
                this.negateArmour = 2.5;
                this.attackWait = 0.6;
                this.effect = "none";
                this.beastEntry = {intReq: 16, name: "Grush", health: "44 - 53", armour: "0 - 55", damage: "3 - 9", negate: "2.5", ability: "None", fireProof: -1, habitat: "Grasslands", sight: "55 - 90", alpha: "Alpha", magicProof: 0, size: 21, speed: 1.6, rotation: 0.085, rate: 0.6, experience: 95, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resemble the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have a itself feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: ["mofu", 877, 1, 72, 72, 0, 0, 72 * 1.5 / 3, 72 * 1.5 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 29;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1;
                this.rangeOfSight = 100; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 36; //was 49
                this.sizeRadius = 14;
                this.negateArmour = 1;
                this.attackWait = 0.5;
                this.effect = "none";
                this.beastEntry = {intReq: 9, name: "Grush", health: "29 - 36", armour: "0 - 35", damage: "2 - 6", negate: 1, ability: "None", fireProof: -1, habitat: "Grasslands", sight: "45 - 60", alpha: "Normal", magicProof: 0, size: 14, speed: 1, rotation: 0.05, rate: 0.5, experience: 45, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resemble the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have a itself feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: ["mofu", 877, 1, 72, 72, 0, 0, 72 / 3, 72 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Narthwarp")
        {
            this.damageFrame = "automatic";
            this.resistances = ["night"];
            this.team = "narthwarpia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 28;

            if (this.alpha == true)
            {
                this.tameREQ = 41;
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 17) + 53;
                this.health = this.healthMAX;
                this.armour = 4.5;
                this.speed = 2.75;
                this.rangeOfSight = 550; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.09;
                this.engagementRadius = 46;
                this.sizeRadius = 25;
                this.negateArmour = 1;
                this.attackWait = 1.5;
                this.effect = "narthwarpToxin";
                this.beastEntry = {intReq: 28, name: "Narthwarp", health: "53 - 69", armour: 4.5, damage: "7 - 21", negate: 1, ability: "Narthwarp Toxin", fireProof: 1, habitat: "Northern / Temperate Forests", sight: 550, alpha: "Alpha", magicProof: 0, size: 25, speed: 2.75, rotation: 0.09, rate: 1.5, experience: 95, description: ["Narthwarps are large six-legged armoured insects that have a long barbed appendage that it uses as a tool for food absorption as well as to release", "its toxins into its prey. The toxins a narthwarp produces cause their victim to lose energy and if the injection was large enough they could", "even faint. A narthwarps favorite foods are shehids and ulgoy plants because the toxins in both are digested and formed by", "a complex chemical process into the narthwarp's own toxin."], image: ["polypol", 29, 400, 71, 81, 0, 0, 71 * 2 / 3, 81 * 2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 45;
                this.xAdjustment = 24; // was 0
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0.1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3;
                this.health = this.healthMAX;
                this.armour = 0.5;
                this.speed = 1.75;
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 24;
                this.sizeRadius = 10;
                this.negateArmour = 0;
                this.attackWait = 0.85;
                this.effect = "narthwarpToxin";
                this.beastEntry = {intReq: 4, name: "Narthwarp", health: "3 - 5", armour: 0.5, damage: "1 - 2", negate: 0, ability: "Narthwarp Toxin", fireProof: 0.1, habitat: "Northern / Temperate Forests", sight: 300, alpha: "Baby", magicProof: 0, size: 10, speed: 1.75, rotation: 0.1, rate: 0.85, experience: 4, description: ["Narthwarps are large six-legged armoured insects that have a long barbed appendage that it uses as a tool for food absorption as well as to release", "its toxins into its prey. The toxins a narthwarp produces cause their victim to lose energy and if the injection was large enough they could", "even faint. A narthwarps favorite foods are shehids and ulgoy plants because the toxins in both are digested and formed by", "a complex chemical process into the narthwarp's own toxin."], image: ["polypol", 29, 400, 71, 81, 0, 0, 71 * 0.5 / 3, 81 * 0.5 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -17;
                this.xAdjustment = -25;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 10) + 16;
                this.health = this.healthMAX;
                this.armour = 1.5;
                this.speed = 2.25;
                this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.095; // 0.01 is a standard turn speed.
                this.engagementRadius = 29;
                this.sizeRadius = 14;
                this.negateArmour = 0.5;
                this.attackWait = 1.45;
                this.effect = "narthwarpToxin";
                this.beastEntry = {intReq: 8, name: "Narthwarp", health: "16 - 25", armour: 1.5, damage: "4 - 9", negate: 0.5, ability: "Narthwarp Toxin", fireProof: 0.5, habitat: "Northern / Temperate Forests", sight: 425, alpha: "Normal", magicProof: 0, size: 14, speed: 2.25, rotation: 0.095, rate: 1.45, experience: 36, description: ["Narthwarps are large six-legged armoured insects that have a long barbed appendage that it uses as a tool for food absorption as well as to release", "its toxins into its prey. The toxins a narthwarp produces cause their victim to lose energy and if the injection was large enough they could", "even faint. A narthwarps favorite foods are shehids and ulgoy plants because the toxins in both are digested and formed by", "a complex chemical process into the narthwarp's own toxin."], image: ["polypol", 29, 400, 71, 81, 0, 0, 71 / 3, 81 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 4;
                this.xAdjustment = -7;
            }
        }
        else if (this.type == "Beruln")
        {
            this.damageFrame = "manual";
            this.resistances = ["night"];
            this.team = "berulnia";
            if (this.ID == "playerSummonedBeruln")
            {
                this.team = "player";
            }
            else if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.haste = true;
            this.baseTeam = this.team;
            this.mountRange = 9;

            if (this.alpha == true)
            {
                this.tameREQ = 40;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 36;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6.1 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // was 0.075
                this.engagementRadius = 69;
                this.sizeRadius = 50;
                this.negateArmour = 10;
                this.attackWait = 0.75;
                this.beastEntry = {intReq: 13, name: "Beruln", health: "36 - 61", armour: 0, damage: "8 - 22", negate: 10, ability: "None", fireProof: -1, habitat: "Northern Craglands", sight: 900, alpha: "Alpha", magicProof: 0, size: 50, speed: "6.1 - 6.5", rotation: 0.075, rate: 0.75, experience: 93, description: ["Berulns are massive grey furred beasts that are known for their ferocity. They have an extra thick patch of fur that goes from the back of their", "head and widenes as it bristles back toward their tail end. Berulns are skilled hunters and they can be fairly silent while stalking prey and can", "also be exceptionally good climbers. Berulns are savage when it comes to eating, they will grasp their victim in their jaws and swing it around and", "smash it into the ground or large rocks before finally settling down to eat it. Alpha Berulns are slightly larger than the normal ones and they are", "a bit more agressive and perceptive to prey as well."], image: ["polyPNG", 92, 599, 77, 54, 0, 0, 154 * 1.1 / 3, 108 * 1.1 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 5;
                this.xAdjustment = 4;
            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 36;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 14) + 32;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5.8 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.075; // was 0.05
                this.engagementRadius = 61;
                this.sizeRadius = 42;
                this.negateArmour = 9;
                this.attackWait = 0.85;
                this.beastEntry = {intReq: 11, name: "Beruln", health: "32 - 45", armour: 0, damage: "7 - 22", negate: 9, ability: "None", fireProof: -1, habitat: "Northern Craglands", sight: 850, alpha: "Normal", magicProof: 0, size: 42, speed: "5.8 - 6", rotation: 0.075, rate: 0.85, experience: 81, description: ["Berulns are massive grey furred beasts that are known for their ferocity. They have an extra thick patch of fur that goes from the back of their", "head and widenes as it bristles back toward their tail end. Berulns are skilled hunters and they can be fairly silent while stalking prey and can", "also be exceptionally good climbers. Berulns are savage when it comes to eating, they will grasp their victim in their jaws and swing it around and", "smash it into the ground or large rocks before finally settling down to eat it."], image: ["polyPNG", 92, 599, 77, 54, 0, 0, 154 / 3, 108 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Griffin")
        {
            this.damageFrame = "manual";
            this.team = "griffinia";
            if (this.ID == "player")
            {
                this.team = "player";
            }
            else if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.haste = true;
            this.baseTeam = this.team;
            this.lunging = false;
            this.action = "swipe";
            this.effect = "smashbackI";
            this.mountRange = 15;

            if (this.alpha == true)
            {
                this.tameREQ = 65;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 250;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.1 + (Math.floor(Math.random() * 2) / 10);
                this.standardSpeed = this.speed;
                this.lungeSpeed = 9;
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 146;
                this.sizeRadius = 66;
                this.negateArmour = 18;
                this.attackWait = 3;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "massive")
            {
                //STATS (non-variable)
                this.tameREQ = 300;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 375;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.6 + (Math.floor(Math.random() * 2) / 10);
                this.standardSpeed = this.speed;
                this.lungeSpeed = 10;
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 160;
                this.sizeRadius = 84;
                this.negateArmour = 25;
                this.attackWait = 3;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 50;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 125;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.6 + (Math.floor(Math.random() * 2) / 10);
                this.standardSpeed = this.speed;
                this.lungeSpeed = 8;
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 125;
                this.sizeRadius = 60;
                this.negateArmour = 12;
                this.attackWait = 3;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.75;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            this.standardEngagementRadius = this.engagementRadius;
        }
        else if (this.type == "Olkrin")
        {
            this.damageFrame = "manual";
            this.team = "olkrinia";
            this.baseTeam = this.team;
            this.haste = true;

            if (this.alpha == true)
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 101) + 500;
                this.health = this.healthMAX;
                this.armour = 9;
                this.speed = 7.1 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 1100; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // was 0.05
                this.engagementRadius = 69;
                this.sizeRadius = 47;
                this.negateArmour = 20;
                this.attackWait = 3;
                this.beastEntry = {intReq: 45, name: "Olkrin", health: "500 - 600", armour: 9, damage: "36 - 64", negate: 20, ability: "None", fireProof: 0, habitat: "Craglands", sight: 1100, alpha: "Goliath", magicProof: 0, size: 47, speed: "7.1 - 7.5", rotation: 0.1, rate: 3, experience: 1400, description: ["Olkrins are thought to be only of myth and legend for the reason that they are not common to find, which is because they are humongous beasts", "with vast appetites that need to be filled and many places do not have the right ecosystem to support their species' size. Those who do recognize there", "existence often consider olkrins to be a type of demon, but in truth they are just an ancient species of abnormally huge ferocious monsters that may be", "on the verge of extinction."], image: ["verse", 156, 706, 117, 157, 0, 0, 117 * 2.4 / 3, 157 * 2.4 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2.40; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 55;
                this.xAdjustment = 35;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.tameREQ = 50;
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 45;
                this.health = this.healthMAX;
                this.armour = 2.5;
                this.speed = 5.1 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 35;
                this.sizeRadius = 24;
                this.negateArmour = 10;
                this.attackWait = 2;
                this.beastEntry = {intReq: 35, name: "Olkrin", health: "45 - 60", armour: 2.5, damage: "12 - 20", negate: 10, ability: "None", fireProof: 0, habitat: "Craglands", sight: 750, alpha: "Baby", magicProof: 0, size: 24, speed: "5.1 - 5.3", rotation: 0.1, rate: 2, experience: 172, description: ["Olkrins are thought to be only of myth and legend for the reason that they are not common to find, which is because they are humongous beasts", "with vast appetites that need to be filled and many places do not have the right ecosystem to support their species' size. Those who do recognize there", "existence often consider olkrins to be a type of demon, but in truth they are just an ancient species of abnormally huge ferocious monsters that may be", "on the verge of extinction."], image: ["verse", 156, 706, 117, 157, 0, 0, 117 * 1.1 / 3, 157 * 1.1 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -50;
                this.xAdjustment = -32;
            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 100;
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 86) + 225;
                this.health = this.healthMAX;
                this.armour = 5;
                this.speed = 6.8 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // was 0.05
                this.engagementRadius = 61;
                this.sizeRadius = 42;
                this.negateArmour = 14;
                this.attackWait = 3;
                this.beastEntry = {intReq: 40, name: "Olkrin", health: "225 - 310", armour: 5, damage: "24 - 40", negate: 14, ability: "None", fireProof: 0, habitat: "Craglands", sight: 900, alpha: "Normal", magicProof: 0, size: 42, speed: "6.8 - 7", rotation: 0.1, rate: 3, experience: 1000, description: ["Olkrins are thought to be only of myth and legend for the reason that they are not common to find, which is because they are humongous beasts", "with vast appetites that need to be filled and many places do not have the right ecosystem to support their species' size. Those who do recognize there", "existence often consider olkrins to be a type of demon, but in truth they are just an ancient species of abnormally huge ferocious monsters that may be", "on the verge of extinction."], image: ["verse", 156, 706, 117, 157, 0, 0, 117 * 1.75 / 3, 157 * 1.75 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.75;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "BogTroll")
        {
            this.justAttacked = true;
            this.team = "trollia";
            this.baseTeam = this.team;
            this.haste = true;
            this.tameREQ = 66;

            if (this.alpha == true)
            {
                this.tameREQ = 84;
                this.magicalResistance = 5;
                this.heatResistance = 7;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 41) + 280;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 5.2 + (Math.floor(Math.random() * 6) / 10);
                this.keepSpeed = this.speed;
                this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.035; // was 0.05
                this.engagementRadius = 91;
                this.sizeRadius = 80;
                this.negateArmour = 16;
                this.attackWait = 4.2;
                this.beastEntry = {intReq: 38, name: "Bog Troll", health: "280 - 320", armour: 1, damage: "40 - 100", negate: 16, ability: "Health Regeneration", fireProof: 7, habitat: "Marshes/Bogs/Swamps", sight: 1000, alpha: "Alpha", magicProof: 5, size: 80, speed: "5.2 - 5.7", rotation: 0.035, rate: 4.2, experience: 1580, description: ["Bog trolls are a ferocious sort, but at times they can be found soaking lazily in the bog water only eating that which gets too close to their mouths.", "When they are not lazing about bog trolls are notably dangerous. 'Fear not the deadly plagues of the bog for the trolls will kill you first'"], image: ["verse", 3770, 16, 106, 129, 0, 0, 154 * 2 / 3, 108 * 2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 52;
                this.xAdjustment = 53;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.tameREQ = 30;
                this.magicalResistance = 1.5;
                this.heatResistance = 3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 34;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.1 + (Math.floor(Math.random() * 7) / 10);
                this.keepSpeed = this.speed;
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.035; // was 0.05
                this.engagementRadius = 61;
                this.sizeRadius = 42;
                this.negateArmour = 3;
                this.attackWait = 3.2;
                this.beastEntry = {intReq: 25, name: "Bog Troll", health: "34 - 42", armour: 0, damage: "4 - 14", negate: 3, ability: "Health Regeneration", fireProof: 3, habitat: "Marshes/Bogs/Swamps", sight: 600, alpha: "Baby", magicProof: 1.5, size: 42, speed: "3.1 - 3.7", rotation: 0.035, rate: 3.2, experience: 116, description: ["Bog trolls give birth to numerous young at once. It is not at all uncommon to see a baby bog troll wandering about without a parent, this is because the", "mother is likely to eat the young right after birth if they are not fit enough to escape her reach. Many young bog trolls fall victim to the dangers of", "the swamp, but the sheer number of offspring ensures the survival of their species."], image: ["verse", 3770, 16, 106, 129, 0, 0, 154 * 0.65 / 3, 108 * 0.65 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.65;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -19;
                this.xAdjustment = -32;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 3;
                this.heatResistance = 5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 36) + 202;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 4.4 + (Math.floor(Math.random() * 7) / 10);
                this.keepSpeed = this.speed;
                this.rangeOfSight = 850; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.035; // was 0.05
                this.engagementRadius = 61;
                this.sizeRadius = 42;
                this.negateArmour = 10;
                this.attackWait = 3.2;
                this.beastEntry = {intReq: 34, name: "Bog Troll", health: "202 - 236", armour: 1, damage: "23 - 61", negate: 10, ability: "Health Regeneration", fireProof: 5, habitat: "Marshes/Bogs/Swamps", sight: 850, alpha: "Normal", magicProof: 3, size: 42, speed: "4.4 - 5", rotation: 0.035, rate: 3.2, experience: 940, description: ["Bog trolls are a ferocious sort, but at times they can be found soaking lazily in the bog water only eating that which gets too close to their mouths.", "When they are not lazing about bog trolls are notably dangerous. 'Fear not the deadly plagues of the bog for the trolls will kill you first'"], image: ["verse", 3770, 16, 106, 129, 0, 0, 154 * 1.4 / 3, 108 * 1.4 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 20;
                this.xAdjustment = 17;
            }
        }
        else if (this.type == "WinterWolf")
        {
            this.damageFrame = "manual";
            this.team = "wolf";
            this.baseTeam = this.team;
            this.tameREQ = 22;
            this.mountRange = 10;

            if (this.alpha == true)
            {
                this.tameREQ = 34;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 30;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 665; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // was 0.05
                this.engagementRadius = 59;
                this.sizeRadius = 35;
                this.negateArmour = 3;
                this.attackWait = 1.5;
                this.beastEntry = {intReq: 12, name: "Winter Wolf", health: "30 - 55", armour: 0, damage: "6 - 25", negate: 3, ability: "None", fireProof: -1, habitat: "Frozen Tundra/Ice Flats", sight: 775, alpha: "Massive", magicProof: 0, size: 35, speed: "5 - 5.4", rotation: 0.085, rate: 1.5, experience: 100, description: ["Winter wolves can grow to monstrous proportions; the largest of them can make a full grown wolf seem like a new born pup. Winter wolves are highly valued", "for their blizzard white pelts, for this reason winter wolves are often hunted by the Freydic people of the north."], image: ["verse", 2853, 17, 49, 29, 0, 0, 49 * 3.2 / 3, 29 * 3.2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 3.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -2;
                this.xAdjustment = 4;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 9;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.7 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // was 0.05
                this.engagementRadius = 35;
                this.sizeRadius = 24;
                this.negateArmour = 1;
                this.attackWait = 1.5;
                this.beastEntry = {intReq: 10, name: "Winter Wolf", health: "9 - 17", armour: 0, damage: "4 - 10", negate: 1, ability: "None", fireProof: -1, habitat: "Frozen Tundra/Ice Flats", sight: 665, alpha: "Normal", magicProof: 0, size: 24, speed: "4.7 - 4.9", rotation: 0.085, rate: 1.5, experience: 49, description: ["White as a winter storm, winter wolves are the fierce canine hunters of the cold northern lands. They are commonly thought to be more ruthless and feral", "than most other varieties of wolves."], image: ["verse", 2853, 17, 49, 29, 0, 0, 49 * 1.8 / 3, 29 * 1.8 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.8;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -24;
                this.xAdjustment = -33;

            }
        }
        else if (this.type == "GreyWolf")
        {
            this.damageFrame = "manual";
            this.team = "wolf";
            if (this.ID == "playerSummonedWolf")
            {
                this.team = "player";
            }
            else if (this.ID == "docile")
            {
                this.team = "docile";
            }

            this.baseTeam = this.team;
            this.tameREQ = 19;
            this.mountRange = 9;

            if (this.alpha == true)
            {
                this.tameREQ = 32;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 20) + 28;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.7 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // was 0.05
                this.engagementRadius = 59;
                this.sizeRadius = 35;
                this.negateArmour = 2.5;
                this.attackWait = 1.65;
                this.beastEntry = {intReq: 11, name: "Grey Wolf", health: "28 - 47", armour: 0, damage: "5 - 22", negate: 2.5, ability: "None", fireProof: -1, habitat: "Temperate", sight: 700, alpha: "Massive", magicProof: 0, size: 35, speed: "4.7 - 5.1", rotation: 0.085, rate: 1.65, experience: 90, description: ["Tales have been told of such oversized man-eating wolves. Grey wolves are the most common wolves of the lands, though there is nothing common about", "the much larger version of these fearsome grey-furred beasts."], image: ["oldverse", 2853, 17, 49, 29, 0, 0, 49 * 3.2 / 3, 29 * 3.2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 3.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -2;
                this.xAdjustment = 4;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 8) + 8;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.5 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 575; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // was 0.05
                this.engagementRadius = 35;
                this.sizeRadius = 24;
                this.negateArmour = 0.5;
                this.attackWait = 1.65;
                this.beastEntry = {intReq: 6, name: "Grey Wolf", health: "8 - 15", armour: 0, damage: "3 - 8", negate: 0.5, ability: "None", fireProof: -1, habitat: "Temperate", sight: 600, alpha: "Normal", magicProof: 0, size: 24, speed: "4.5 - 4.7", rotation: 0.085, rate: 1.65, experience: 38, description: ["Grey wolves are the most common type of wolf in the lands. They are found in small to medium large packs, which may be found in forest regions, in", "mountainous regions, and in rocky barrens."], image: ["oldverse", 2853, 17, 49, 29, 0, 0, 49 * 1.8 / 3, 29 * 1.8 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.8;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -24;
                this.xAdjustment = -33;

            }
        }
        else if (this.type == "Gulfrey")
        {
            this.damageFrame = "automatic";
            this.resistances = ["shock"];
            this.team = "wild";
            this.baseTeam = this.team;
            this.tameREQ = 26;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 19) + 16;
                this.health = this.healthMAX;
                this.armour = 8;
                this.speed = 3 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 490; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 58;
                this.sizeRadius = 33;
                this.negateArmour = 7;
                this.attackWait = 0.5;
                this.beastEntry = {intReq: 13, name: "Gulfrey", health: "16 - 34", armour: 8, damage: "4 - 10", negate: 7, ability: "None", fireProof: 4, habitat: "Jungle", sight: 490, alpha: "Normal", magicProof: 0, size: 33, speed: "3 - 3.2", rotation: 0.05, rate: 0.5, experience: 21, description: ["Gulfreys are long shelled insects with multiple shell sections that allow them much maneuverability. The larger gulfreys often hunt alone. They have", "large mandibles that they use to force their prey towards their gnarly insectoid eating graspers. They will usually eat whatever creatures are available", "to them, given that they are not too dangerous to contend with."], image: ["oldverse", 242, 10, 123, 52, 0, 0, 123 * 1.5 / 3, 52 * 1.5 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -15; //was - 10
                this.xAdjustment = 26; //was 30
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 4;
                this.health = this.healthMAX;
                this.armour = 4;
                this.speed = 2.8 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 440; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 22;
                this.sizeRadius = 13;
                this.negateArmour = 4;
                this.attackWait = 0.5;
                this.beastEntry = {intReq: 9, name: "Gulfrey", health: "4 - 8", armour: 4, damage: "2 - 4", negate: 4, ability: "None", fireProof: 1, habitat: "Jungle", sight: 440, alpha: "Baby", magicProof: 0, size: 13, speed: "2.8 - 3.1", rotation: 0.05, rate: 0.5, experience: 8, description: ["Gulfreys are long shelled insects with multiple shell sections that allow them much maneuverability. Young Gulfreys are born from large clusters of eggs", "and they tend to be successful at surviving if they hatch because they will all hunt together. A pack of young gulfreys is a fearful sight, but worse", "is when they each grow into their fully grown form which is massive."], image: ["oldverse", 242, 10, 123, 52, 0, 0, 123 * 0.65 / 3, 52 * 0.65 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.65;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -37; //was -34
                this.xAdjustment = -26; //was - 26

            }
        }
        else if (this.type == "Neev")
        {
            this.resistances = ["stealth"];
            this.damageFrame = "automatic";
            this.team = "neutral";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 7;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 39;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.2 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 32;
                this.sizeRadius = 16;
                this.negateArmour = 1;
                this.attackWait = 1;
                this.beastEntry = {intReq: 44, name: "Neev", health: "39 - 54", armour: 0, damage: "3 - 11", negate: 1, ability: "Obscurity", fireProof: -1, habitat: "Cold - Warm Climates", sight: 800, alpha: "Large", magicProof: 7, size: 16, speed: "3.2 - 3.6", rotation: 0.1, rate: 1, experience: 55, description: ["Neevs or Beer fairies are a type of magical creature commonly classified as a fairy. Neevs are kleptomaniacs that stash away all that", "they steal in an unaccessible wormhole dimension. They wander the periphery of human awareness invisibly stealing to their heart's content. Neevs can", "only be seen while drunk or while also traversing the subconscious dimension of obscurity."], image: ["poly", 186, 3, 48, 51, 0, 0, 48 * 4 / 3, 51 * 4 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.8; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 20;
                this.xAdjustment = 6;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 5;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 11;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.4 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 23;
                this.sizeRadius = 13;
                this.negateArmour = 0;
                this.attackWait = 1;
                this.beastEntry = {intReq: 38, name: "Neev", health: "11 - 17", armour: 0, damage: "1.5 - 4.5", negate: 0, ability: "Obscurity", fireProof: -1, habitat: "Cold - Warm Climates", sight: 650, alpha: "Normal", magicProof: 5, size: 13, speed: "2.4 - 2.9", rotation: 0.1, rate: 1, experience: 20, description: ["Neevs or Beer fairies are a type of magical creature commonly classified as a fairy. Neevs are kleptomaniacs that stash away all that", "they steal in an unaccessible wormhole dimension. They wander the periphery of human awareness invisibly stealing to their heart's content. Neevs can", "only be seen while drunk or while also traversing the subconscious dimension of obscurity."], image: ["poly", 186, 3, 48, 51, 0, 0, 48 * 3 / 3, 51 * 3 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 4; //was -34
                this.xAdjustment = -11; //was - 26

            }
        }
        else if (this.type == "Golgemoff")
        {
            this.damageFrame = "automatic";
            this.resistances = ["night"];
            this.effect = "blindingIII";
            this.team = "golgemoffia";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 31;
                this.health = this.healthMAX;
                this.armour = 4;
                this.speed = 5.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 860; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 42;
                this.sizeRadius = 18;
                this.negateArmour = 0.15;
                this.attackWait = 0.5;
                this.beastEntry = {intReq: 11, name: "Golgemoff", health: "11 - 17", armour: 4, damage: "1 - 2.5", negate: 0.5, ability: "blindingIII", fireProof: -1, habitat: "Warm - Temperate", sight: 860, alpha: "Large", magicProof: 0, size: 18, speed: "5.5 - 6", rotation: 0.1, rate: 0.5, experience: 27, description: ["Golgemoffs are a potentially sentient spider-like being. Each golgemoff is thought to be part of a collective hivemind but no clear evidence", "is available to prove such a suspicion. Golgemoffs roam throughout various landscapes hunting to bring sustenance back to their hive. They have", "tentacles that are coated in", "a toxin that causes temporary blindness. Golgemoffs can be found charging around in massive swarms or completely solitary."], image: ["mofu", 945, 283, 67, 69, 0, 0, 67 * 1.35 / 3, 69 * 1.35 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.35; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 10
                this.xAdjustment = 0; //was 30
            }
            else if (this.alpha == "massive")
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 18) + 55;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 6 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 50;
                this.sizeRadius = 23;
                this.negateArmour = 1;
                this.attackWait = 0.25;
                this.beastEntry = {intReq: 19, name: "Golgemoff", health: "55 - 72", armour: 6, damage: "2 - 5", negate: 1, ability: "blindingIII", fireProof: -1, habitat: "Warm - Temperate", sight: 1000, alpha: "Massive", magicProof: 0, size: 23, speed: "6 - 6.7", rotation: 0.1, rate: 0.25, experience: 84, description: ["Golgemoffs are a potentially sentient spider-like being. Each golgemoff is thought to be part of a collective hivemind but no clear evidence", "is available to prove such a suspicion. Golgemoffs roam throughout various landscapes hunting to bring sustenance back to their hive. They have", "tentacles that are coated in", "a toxin that causes temporary blindness. Massive golgemoffs are uncommon, it is thought that they are a variant of the", "species that grows larger to fill a particular role in the hivemind structure."], image: ["mofu", 945, 283, 67, 69, 0, 0, 67 * 1.9 / 3, 69 * 1.9 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.85; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1.5;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 3.5 + (Math.floor(Math.random() * 11) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 20;
                this.sizeRadius = 4;
                this.negateArmour = 0;
                this.attackWait = 0.25;
                this.beastEntry = {intReq: 9, name: "Golgemoff", health: "1.5", armour: 1, damage: "0.25", negate: 0, ability: "blindingIII", fireProof: -1, habitat: "Warm - Temperate", sight: 700, alpha: "Baby", magicProof: 0, size: 4, speed: "3.5 - 4.5", rotation: 0.1, rate: 0.25, experience: 1, description: ["Golgemoffs are a potentially sentient spider-like being. Each golgemoff is thought to be part of a collective hivemind but no clear evidence", "is available to prove such a suspicion. Golgemoffs roam throughout various landscapes hunting to bring sustenance back to their hive. They have", "tentacles that are coated in a toxin that causes temporary blindness. The baby golgemoffs are more commonly found in swarms than the other varieties,", "it is assumed that this is a survival strategy as safety is often found in numbers."], image: ["mofu", 945, 283, 67, 69, 0, 0, 67 * 0.6 / 3, 69 * 0.6 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 0.35; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3;
                this.health = this.healthMAX;
                this.armour = 2.5;
                this.speed = 5 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 39;
                this.sizeRadius = 13;
                this.negateArmour = 0.15;
                this.attackWait = 0.55;
                this.beastEntry = {intReq: 10, name: "Golgemoff", health: "3-5", armour: 2.5, damage: "0.5 – 1.5", negate: 0.15, ability: "blindingIII", fireProof: -1, habitat: "Warm - Temperate", sight: 800, alpha: "Normal", magicProof: 0, size: 13, speed: "5 - 5.4", rotation: 0.1, rate: 0.55, experience: 10, description: ["Golgemoffs are a potentially sentient spider-like being. Each golgemoff is thought to be part of a collective hivemind but no clear", "evidence is available to prove such a suspicion. Golgemoffs roam throughout various landscapes hunting to bring sustenance back to their hive.", "They have tentacles that are coated in a toxin that causes temporary blindness. Golgemoffs can be found charging around in massive swarms or completely", "solitary. The first sighting of a golgemoff was allegedly when a large rock fell from the heavens and smashed into the ground and swarms of golgemoffs", " began to pour out of it."], image: ["mofu", 945, 283, 67, 69, 0, 0, 67 * 1.15 / 3, 69 * 1.15 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Bees")
        {
            this.damageFrame = "automatic";
            this.team = "neutral";
            this.tamable = false;

            //STATS (non-variable)
            this.magicalResistance = 0;
            this.heatResistance = -1;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 3) + 1;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 4 + (Math.floor(Math.random() * 4) / 10);
            this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
            this.engagementRadius = 0;
            this.sizeRadius = 12;
            this.negateArmour = 45;
            this.attackWait = 0.1;
            this.beastEntry = {intReq: 1, name: "Bees", health: "1 - 3", armour: 0, damage: "0.015", negate: 45, ability: "SwollenI", fireProof: -1, habitat: "Temperate/Cold Forests", sight: 500, alpha: "Normal", magicProof: 0, size: 12, speed: "4 - 4.3", rotation: 0.1, rate: 0.1, experience: 3, description: ["Bees are an important part of the woodland ecosystem as they are responsible for pollinating the various plantlife. Bees produce honey as a", "food source for the hive made out of nectar and pollen taken from the different plants in the area. Bees do not tend to be aggressive, but if someone gets", "in the way of a swarm they should expect to be stung several times."], image: ["poly", 42, 312, 79, 70, 0, 0, 79 * 1.2 / 3, 70 * 1.2 / 3]};

            //this multiplies the draw image skew numbers by 1 so that it stays the same
            this.alphaSize = 1;
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 0; //was -34
            this.xAdjustment = 0; //was - 26
        }
        else if (this.type == "AncientBeing")
        {
            this.resistances = ["blinded", "stun", "frozen", "web", "night"];
            this.damageFrame = "automatic";
            this.team = "ancient";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.ancientSoulNum = 0;
            this.doSoulSuck = true;
            this.teleportRate = 40;
            this.summonsDisp = Math.floor(Math.random() * 5);
            this.tamable = false;

            this.magicalResistance = 20;
            this.heatResistance = 10;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = 110;
            this.health = this.healthMAX;
            this.armour = 4;
            this.speed = 0;
            this.rangeOfSight = 1200; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1;
            this.engagementRadius = 4000;
            this.sizeRadius = 20;
            this.negateArmour = 0;
            this.attackWait = 5;
            this.beastEntry = {intReq: 50, name: "Ancient Being", health: "110", armour: 4, damage: "8 - 40", negate: 0, ability: "See Description", fireProof: 10, habitat: "Otherrealm", sight: 4000, alpha: "Normal", magicProof: 0, size: 20, speed: "0", rotation: 0.1, rate: 5, experience: 2017, description: ["Ancient Beings are demonic fiends from another realm. They can cross into the living realm when", "magical rifts form a gate to their realm allowing them to pass through. They have a variety of unique abilities:", " ", "Shadowportation ~ the ancient can teleport through a blinding mass of shadowy fog from one location to another.", "Flaming Missiles ~ the ancient throws two firey blasts that seek its victim, each deals 8 fire damage.", "Summoning ~ the ancient draws upon the dissonance between the torn realms to bring powerful otherrealmly crawlers into the living realm.", "Soul Sucking ~ If its victim is near it, the ancient will drain a part of its soul from it.", "Against the player this steals a point of Constitution and takes 20 will and 5 energy, against others it deals 40 magic damage."], image: ["oldverse", 1567, 310, 51, 80, 0, 0, 51 * 1.5 / 3, 80 * 1.5 / 3]};

            this.alphaSize = 1.5;
            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "AncientCrawler")
        {
            this.damageDealt = "n/a";
            this.followThrough = true; //this unit follows through with its attacks even if the player moves out of range.
            this.damageFrame = "manual"; //it is necessary to set this to "manual" so that the attackBubble function can determine the damaging.
            this.resistances = ["blinded", "stun", "frozen", "web", "night"];
            this.effect = "fire";
            this.team = "ancient";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            this.magicalResistance = 20;
            this.heatResistance = 10;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = 90;
            this.health = this.healthMAX;
            this.armour = 11;
            this.speed = 4;
            this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1;
            this.engagementRadius = 67;
            this.sizeRadius = 45;
            this.negateArmour = 0;
            this.attackWait = 3.9;
            this.beastEntry = {intReq: 40, name: "Ancient Crawler", health: "90", armour: 11, damage: "9 - 26", negate: 5, ability: "Fire", fireProof: 10, habitat: "Otherrealm", sight: 2100, alpha: "Normal", magicProof: 20, size: 45, speed: "4", rotation: 0.1, rate: 3.9, experience: 888, description: ["Ancient Crawlers are demonic beasts from another realm that breath flames and crawl on long boney legs. Crawlers are often used by ancient beings as", "powerful demonic minions."], image: ["oldverse", 462, 189, 86, 107, 0, 0, 86 * 2 / 3, 107 * 2 / 3]};

            this.alphaSize = 2;
            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Frich")
        {
            this.damageFrame = "automatic";
            this.resistances = ["night"];
            this.team = "wild";
            if (this.ID == "playerSummonedFrich")
            {
                this.team = "player";
            }
            else if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;

            if (this.alpha == true)
            {
                this.tameREQ = 9;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 4;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.8 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 42;
                this.sizeRadius = 17;
                this.negateArmour = 0;
                this.attackWait = 0.55;
                this.beastEntry = {intReq: 3, name: "Frich", health: "4 - 7", armour: 0, damage: "1 - 4", negate: 0, ability: "None", fireProof: -1, habitat: "Underground / Grasslands", sight: 431, alpha: "Alpha", magicProof: 0, size: 17, speed: "2.8 - 3.1", rotation: 0.1, rate: 0.55, experience: 15, description: ["A Frich is a grey haired rodent that has a bare unfurred face. Friches tend to prefer cooler temperatures and thusly live both underground and in", "temperate climates. They scavenge leftover carrion when it is available and when not they hunt small critters or ransack a farm if there is one nearby.", "Friches are often found in small packs that hunt together, but it is also common enough to see a lone frich seeking out food."], image: ["verse", 1290, 5, 83, 33, 0, 0, 83 * 1.5 / 3, 33 * 1.5 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 3.5; //was - 10
                this.xAdjustment = 6; //was 30
            }
            else if (this.alpha == "massive")
            {
                this.tameREQ = 23;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 8) + 12;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.3 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 525; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 49;
                this.sizeRadius = 19;
                this.negateArmour = 1;
                this.attackWait = 0.80;
                this.beastEntry = {intReq: 6, name: "Frich", health: "12 - 19", armour: 0, damage: "2 - 7", negate: 1, ability: "None", fireProof: -1, habitat: "Underground / Grasslands", sight: 525, alpha: "Massive", magicProof: 0, size: 19, speed: "3.3 - 3.5", rotation: 0.1, rate: 0.80, experience: 33, description: ["A Frich is a grey haired rodent that has a bare unfurred face. Friches tend to prefer cooler temperatures and thusly live both underground and in", "Massive friches tend to be more likely than others to actively seek out human flesh for their diet. They tend to be found in small groups of at the most", "up to three or four, but more often are found hunting alone or in pairs."], image: ["verse", 1290, 5, 83, 33, 0, 0, 83 * 1.9 / 3, 33 * 1.9 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 5.5;
                this.xAdjustment = 26;
            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 7;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.6 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 385; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 40;
                this.sizeRadius = 15;
                this.negateArmour = 0;
                this.attackWait = 0.55;
                this.beastEntry = {intReq: 2, name: "Frich", health: "3 - 5", armour: 0, damage: "1 - 2", negate: 0, ability: "None", fireProof: -1, habitat: "Underground / Grasslands", sight: 400, alpha: "Normal", magicProof: 0, size: 15, speed: "2.6 - 3", rotation: 0.1, rate: 0.55, experience: 11, description: ["A Frich is a grey haired rodent that has a bare unfurred face. Friches tend to prefer cooler temperatures and thusly live both underground and in", "temperate climates. They scavenge leftover carrion when it is available and when not they hunt small critters or ransack a farm if there is one nearby.", "Friches are often found in small packs that hunt together, but it is also common enough to see a lone frich seeking out food."], image: ["verse", 1290, 5, 83, 33, 0, 0, 83 * 1.15 / 3, 33 * 1.15 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "MountainFrich")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            this.baseTeam = this.team;
            this.tameREQ = 37;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 47;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.6 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 625; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 50;
                this.sizeRadius = 19;
                this.negateArmour = 2;
                this.attackWait = 0.85;
                this.beastEntry = {intReq: 8, name: "Mountain Frich", health: "47 - 62", armour: 0, damage: "3 - 10", negate: 2, ability: "None", fireProof: -1, habitat: "Craglands / Mountains", sight: 625, alpha: "Alpha", magicProof: 0, size: 19, speed: "3.6 - 3.9", rotation: 0.1, rate: 0.85, experience: 58, description: ["Mountain Friches are extremely large black haired rodents that clamber thoughout rocky crags and across jagged mountainsides often taking shelter in", "caves or between large rocks. Mountain friches eat whichever unfortunate creature finds itself before them; they eat their prey bones and all, they are", "not picky in the least."], image: ["oldverse", 1290, 5, 83, 33, 0, 0, 83 * 2.2 / 3, 33 * 2.2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 10; //was - 10
                this.xAdjustment = 50; //was 30
            }
            else if (this.alpha == "massive")
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 22) + 73;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.1 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 725; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 51;
                this.sizeRadius = 24;
                this.negateArmour = 3;
                this.attackWait = 0.90;
                this.beastEntry = {intReq: 14, name: "Mountain Frich", health: "73 - 94", armour: 0, damage: "4 - 14", negate: 3, ability: "None", fireProof: -1, habitat: "Craglands / Mountains", sight: 725, alpha: "Massive", magicProof: 0, size: 24, speed: "4.1 - 4.3", rotation: 0.1, rate: 0.90, experience: 90, description: ["Mountain Friches are extremely large black haired rodents that clamber thoughout rocky crags and across jagged mountainsides often taking shelter in", "caves or between large rocks. Mountain friches eat whichever unfortunate creature finds itself before them; they eat their prey bones and all, they are", "not picky in the least."], image: ["oldverse", 1290, 5, 83, 33, 0, 0, 83 * 2.6 / 3, 33 * 2.6 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 20;
                this.xAdjustment = 86;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 30;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.2 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 525; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 46;
                this.sizeRadius = 18;
                this.negateArmour = 1;
                this.attackWait = 0.8;
                this.beastEntry = {intReq: 7, name: "Mountain Frich", health: "30 - 36", armour: 0, damage: "2 - 7", negate: 1, ability: "None", fireProof: -1, habitat: "Craglands / Mountains", sight: 525, alpha: "Normal", magicProof: 0, size: 18, speed: "3.2 - 3.6", rotation: 0.1, rate: 0.8, experience: 41, description: ["Mountain Friches are extremely large black haired rodents that clamber thoughout rocky crags and across jagged mountainsides often taking shelter in", "caves or between large rocks. Mountain friches eat whichever unfortunate creature finds itself before them; they eat their prey bones and all, they are", "not picky in the least."], image: ["oldverse", 1290, 5, 83, 33, 0, 0, 83 * 1.8 / 3, 33 * 1.8 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 5.5; //was -34
                this.xAdjustment = 26; //was - 26

            }
        }
        else if (this.type == "Anter")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 9;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 3.9 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 57;
                this.sizeRadius = 17;
                this.negateArmour = 3;
                this.attackWait = 1.25;
                this.beastEntry = {intReq: 5, name: "Anter", health: "9 - 15", armour: 6, damage: "3 - 6", negate: 3, ability: "None", fireProof: 0.5, habitat: "Grasslands / Mudflats", sight: 400, alpha: "Soldier", magicProof: 0, size: 17, speed: "3.9 - 4.1", rotation: 0.1, rate: 1.25, experience: 20, description: ["Anters are a large three parted black insect with six legs and strong mandables. Soldier Anters are meant to protect the anter nest from outside threats.", "They also keep the worker anters in line and doing their jobs. Some have suggested that anters are a collect hivemind, but others have proposed that", "they are in fact sentient or partially sentient life-forms that live out complex lives and work to support their colony just as people work to support", "their kingdom's economic prosperity."], image: ["polpol", 13, 489, 50, 30, 0, 0, 50 * 1.8 / 3, 30 * 1.8 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 10
                this.xAdjustment = 0; //was 30
            }
            else if (this.alpha == "massive")
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 12) + 35;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 3.9 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 46;
                this.sizeRadius = 18;
                this.negateArmour = 3;
                this.attackWait = 1.25;
                this.beastEntry = {intReq: 8, name: "Anter", health: "35 - 46", armour: 6, damage: "4 - 9", negate: 3, ability: "None", fireProof: 0.5, habitat: "Grasslands / Mudflats", sight: 500, alpha: "Guardian", magicProof: 0, size: 18, speed: "3.9 - 4.1", rotation: 0.1, rate: 1.25, experience: 60, description: ["Anters are a large three parted black insect with six legs and strong mandables. Guardian Anters are meant to protect the eggs and the queen from harm.", "Though in some cases a guardian anter or two will sally out to defend the nest from a threat on the outside. Some have suggested that anters are a", "collective hivemind, but others have proposed that they are in fact sentient or partially sentient life-forms that live out complex lives and work to", "support their colony just as people work to support their kingdom's economic prosperity."], image: ["polpol", 13, 489, 50, 30, 0, 0, 50 * 2.3 / 3, 30 * 2.3 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 5;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 3.9 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 59;
                this.sizeRadius = 15;
                this.negateArmour = 3;
                this.attackWait = 1.25;
                this.beastEntry = {intReq: 4, name: "Anter", health: "5 - 9", armour: 6, damage: "2 - 4", negate: 3, ability: "None", fireProof: 0.5, habitat: "Grasslands / Mudflats", sight: 400, alpha: "Worker", magicProof: 0, size: 15, speed: "3.9 - 4.1", rotation: 0.1, rate: 1.25, experience: 14, description: ["Anters are a large three parted black insect with six legs and strong mandables. Worker Anters are meant to scavenge and gather food for the colony.", "Anters have a strong sense of smell and actively search for any even remotely edible substance to carry back to the nest. Some have suggested that", "anters are a collect hivemind, but others have proposed that they are in fact sentient or partially sentient life-forms that live out complex lives and", "work to support their colony just as people work to support their kingdom's economic prosperity."], image: ["polpol", 13, 489, 50, 30, 0, 0, 50 * 1.4 / 3, 30 * 1.4 / 3]};

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.3;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Pelcrid")
        {
            this.damageFrame = "automatic";
            this.resistances = ["acid", "stun", "blinded", "burning", "frozen", "night"];
            this.team = "shehidia";
            this.baseTeam = this.team;
            this.other = new Date().getTime();
            this.tamable = false;

            if (this.alpha == true)
            {
                //alpha has a larger size body and skills.
                this.alphaSize = 5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.

                this.magicalResistance = -2;
                this.heatResistance = 1000;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3 * this.alphaSize;
                this.health = this.healthMAX;
                this.armour = 7 + 0.75 * this.alphaSize;
                this.speed = 0.15 + (Math.floor(Math.random() * 4) / 10) + 0.02 * this.alphaSize;
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 10 + 7 * this.alphaSize;
                this.sizeRadius = 10 + 2 * this.alphaSize;
                this.negateArmour = 4 + 0.45 * this.alphaSize;
                this.attackWait = 0.86 + (Math.random() * 2);
                this.effect = "fire";
                this.beastEntry = {intReq: 25, name: "Pelcrid", health: "15 - 17", armour: 10.75, damage: "6.85 - 11.85", negate: 6.25, ability: "Fire", fireProof: 1000, habitat: "Molten barrens / Underground", sight: 320, alpha: "Large", magicProof: -2, size: 20, speed: "0.25 - 0.55", rotation: 0.05, rate: "0.86 - 2.85", experience: 65, description: ["Pelcrids are a type of slime that lives at a very high temperature and that is fed by heat. If fire comes in contact with a pelcrid the pelcrid will", "absorb the heat and almost immediately grow larger. Pelcrids can not survive off of heat alone they also need to consume carbon in order to maintain", "itself; pelcrids hunt for prey to make up its carbon content incinerating it and soaking it into itself. Pelcrids, being reliant on heat, are damaged", "significantly when they are frozen.", " ", "When a pelcrid increased in size all of its stats increase as well, so the stats shown here are not accurate for an enlarged pelcrid."], image: ["nognog", 560, 92, 43, 28, 0, 0, 43 * 1.3 / 3, 28 * 1.3 / 3]};

                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //alpha has a larger size body and skills.
                this.alphaSize = 3; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.

                this.magicalResistance = -2;
                this.heatResistance = 1000;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3 * this.alphaSize;
                this.health = this.healthMAX;
                this.armour = 7 + 0.75 * this.alphaSize;
                this.speed = 0.15 + (Math.floor(Math.random() * 4) / 10) + 0.02 * this.alphaSize;
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 10 + 7 * this.alphaSize;
                this.sizeRadius = 10 + 2 * this.alphaSize;
                this.negateArmour = 4 + 0.45 * this.alphaSize;
                this.attackWait = 0.86 + (Math.random() * 2);
                this.effect = "fire";
                this.beastEntry = {intReq: 25, name: "Pelcrid", health: "9 - 11", armour: 9.25, damage: "5.05 - 8.05", negate: 5.35, ability: "Fire", fireProof: 1000, habitat: "Molten barrens / Underground", sight: 290, alpha: "Normal", magicProof: -2, size: 16, speed: "0.21 - 0.51", rotation: 0.05, rate: "0.86 - 2.85", experience: 39, description: ["Pelcrids are a type of slime that lives at a very high temperature and that is fed by heat. If fire comes in contact with a pelcrid the pelcrid will", "absorb the heat and almost immediately grow larger. Pelcrids can not survive off of heat alone they also need to consume carbon in order to maintain", "itself; pelcrids hunt for prey to make up its carbon content incinerating it and soaking it into itself. Pelcrids, being reliant on heat, are damaged", "significantly when they are frozen.", " ", "When a pelcrid increased in size all of its stats increase as well, so the stats shown here are not accurate for an enlarged pelcrid."], image: ["nognog", 560, 92, 43, 28, 0, 0, 43 * 1 / 3, 28 * 1 / 3]};

                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Oolid")
        {
            this.damageFrame = "automatic";
            this.resistances = ["acid", "stun", "blinded", "shock", "night"];
            this.team = "shehidia";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 4;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 20;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0.3 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 53;
                this.sizeRadius = 15;
                this.negateArmour = 14;
                this.attackWait = 0.45 + Math.random();
                this.effect = "stunII";
                this.beastEntry = {intReq: 14, name: "Oolid", health: "20 - 23", armour: 0, damage: "6 - 14", negate: 14, ability: "StunII", fireProof: -3, habitat: "Jungle / Underground", sight: 700, alpha: "Medium", magicProof: 4, size: 15, speed: "0.3 - 1", rotation: 0.05, rate: "0.45 - 1.45", experience: 20, description: ["Oolids are a type of slime that often lurks along the jungle underbrush in the shade engulfing any creatures that accidentally step in it or do not", "notice its slow and silent approach. Oolids are known to reproduce through self replication, but regardless of their independent reproductive", "capabilities they can still often be found in groups that hunt and replicate together. During Replications oolids have even been known to mix into one", "another producing offspring made by a combination of multiple oolids."], image: ["theCrack", 38, 171, 38, 36, 0, 0, 36 * 2 / 3, 38 * 2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "massive")
            {
                this.magicalResistance = 4;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 31;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.025; // 0.01 is a standard turn speed.
                this.engagementRadius = 65;
                this.sizeRadius = 23;
                this.negateArmour = 19;
                this.attackWait = 0.45 + Math.random();
                this.effect = "stunII";
                this.beastEntry = {intReq: 19, name: "Oolid", health: "31 - 37", armour: 0, damage: "9 - 21", negate: 19, ability: "StunII", fireProof: -3, habitat: "Jungle / Underground", sight: 700, alpha: "Large", magicProof: 4, size: 23, speed: "1 - 1.7", rotation: 0.025, rate: "0.45 - 1.45", experience: 30, description: ["Oolids are a type of slime that often lurks along the jungle underbrush in the shade engulfing any creatures that accidentally step in it or do not", "notice its slow and silent approach. Not all oolids replicate when they grow bigger, some oolids simply keep growing, making them all the more dangerous."], image: ["theCrack", 38, 171, 38, 36, 0, 0, 36 * 3 / 3, 38 * 3 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 4;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 10;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0.2 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 26;
                this.sizeRadius = 12;
                this.negateArmour = 8;
                this.attackWait = 0.45 + Math.random();
                this.effect = "stunI";
                this.beastEntry = {intReq: 11, name: "Oolid", health: "10 - 12", armour: 0, damage: "3 - 7", negate: 8, ability: "StunI", fireProof: -3, habitat: "Jungle / Underground", sight: 700, alpha: "Small", magicProof: 4, size: 12, speed: "0.2 - 0.9", rotation: 0.05, rate: "0.45 - 1.45", experience: 10, description: ["Oolids are a type of slime that often lurks along the jungle underbrush in the shade engulfing any creatures that accidentally step in it or do not", "notice its slow and silent approach. Oolids are often found in small groups but in rare cases they can be found in large swarms."], image: ["theCrack", 38, 171, 38, 36, 0, 0, 36 * 1.4 / 3, 38 * 1.4 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Glutid")
        {
            this.damageFrame = "automatic";
            this.resistances = ["acid", "stun", "blinded", "shock", "burning", "frozen"];
            this.team = "shehidia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 5;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0; //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 34;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 0.25 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 34;
                this.sizeRadius = 18;
                this.negateArmour = 6;
                this.attackWait = 1 + Math.random();
                this.effect = "freezingStun";
                this.beastEntry = {intReq: 18, name: "Glutid", health: "34 - 40", armour: 6, damage: "8 - 20", negate: 6, ability: "Freezing Stun", fireProof: 4, habitat: "Frozen Tundra", sight: 600, alpha: "Medium", magicProof: 5, size: 18, speed: "0.25 - 0.65", rotation: 0.05, rate: "1 - 2", experience: 30, description: ["Glutids are a type of slime that develops a hard and jagged shell and that can retract into it for safety. Glutids ooze across the frozen tundra engorging", "themselves upon whichever small tundra creatures it happens across. Glutids can survive a remarkably long time without eating anything which makes them", "particularly well adapted to living in the harsh and freezing climates of the arctic. Once a glutid dies its ooze will chemically change to be able to", "evaporate in relatively average temperature conditions."], image: ["theCrack", 372, 265, 41, 39, 0, 0, 41 * 2 / 3, 39 * 2 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "massive")
            {
                this.magicalResistance = 5;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0; //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 59;
                this.health = this.healthMAX;
                this.armour = 7;
                this.speed = 0.25 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 43;
                this.sizeRadius = 23;
                this.negateArmour = 6;
                this.attackWait = 1 + Math.random();
                this.effect = "freezingStun";
                this.beastEntry = {intReq: 21, name: "Glutid", health: "59 - 67", armour: 7, damage: "12 - 28", negate: 6, ability: "Freezing Stun", fireProof: 4, habitat: "Frozen Tundra", sight: 600, alpha: "Large", magicProof: 5, size: 23, speed: "0.25 - 0.65", rotation: 0.05, rate: "1 - 2", experience: 50, description: ["Glutids are a type of slime that develops a hard and jagged shell and that can retract into it for safety. Glutids ooze across the frozen tundra engorging", "themselves upon whichever small tundra creatures it happens across. Glutids can survive a remarkably long time without eating anything which makes them", "particularly well adapted to living in the harsh and freezing climates of the arctic. Once a glutid dies its ooze will chemically change to be able to", "evaporate in relatively average temperature conditions."], image: ["theCrack", 372, 265, 41, 39, 0, 0, 41 * 3 / 3, 39 * 3 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 5;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0; //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 19;
                this.health = this.healthMAX;
                this.armour = 5;
                this.speed = 0.25 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 27;
                this.sizeRadius = 13;
                this.negateArmour = 6;
                this.attackWait = 1 + Math.random();
                this.effect = "freezingStun";
                this.beastEntry = {intReq: 15, name: "Glutid", health: "19 - 22", armour: 5, damage: "6 - 14", negate: 6, ability: "Freezing Stun", fireProof: 4, habitat: "Frozen Tundra", sight: 600, alpha: "Large", magicProof: 5, size: 13, speed: "0.25 - 0.65", rotation: 0.05, rate: "1 - 2", experience: 15, description: ["Glutids are a type of slime that develops a hard and jagged shell and that can retract into it for safety. Glutids ooze across the frozen tundra engorging", "themselves upon whichever small tundra creatures it happens across. Glutids can survive a remarkably long time without eating anything which makes them", "particularly well adapted to living in the harsh and freezing climates of the arctic. Once a glutid dies its ooze will chemically change to be able to", "evaporate in relatively average temperature conditions."], image: ["theCrack", 372, 265, 41, 39, 0, 0, 41 * 1.4 / 3, 39 * 1.4 / 3]};

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Tilk") //TODO beast entries finished up until this point
        {
            this.damageFrame = "manual";
            this.team = "tilkia";
            this.baseTeam = this.team;
            this.tameREQ = 47;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 12) + 31;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 5.7 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 56;
                this.sizeRadius = 29;
                this.negateArmour = 6;
                this.attackWait = 0.25;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "massive")
            {
                //STATS (non-variable)
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 41) + 182;
                this.health = this.healthMAX;
                this.armour = 1.5;
                this.speed = 6.3 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 1100; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 95;
                this.sizeRadius = 47;
                this.negateArmour = 12;
                this.attackWait = 0.25;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 3;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 38;
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 10;
                this.health = this.healthMAX;
                this.armour = 0.5;
                this.speed = 5 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 35;
                this.sizeRadius = 20;
                this.negateArmour = 3;
                this.attackWait = 0.25;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Miter")
        {
            this.damageFrame = "manual";
            this.followThrough = true; //this unit follows through with its attacks even if the player moves out of range.
            this.team = "undead";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.magicalResistance = -0.5;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 15) + 23;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 4.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 710; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 46;
                this.sizeRadius = 22;
                this.negateArmour = 0;
                this.attackWait = 1.8;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = -0.5;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 8) + 10;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 3.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 610; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 31;
                this.sizeRadius = 13;
                this.negateArmour = 0;
                this.attackWait = 1.8;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "SpittingMudFly")
        {
            this.damageFrame = "manual";
            this.team = "wild";
            this.baseTeam = this.team;
            this.tameREQ = 29;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 6;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 850; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 56;
                this.sizeRadius = 13;
                this.negateArmour = 0;
                this.attackWait = 2.85;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "giant")
            {
                //STATS (non-variable)
                this.tameREQ = 39;
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 59;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 1250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 95;
                this.sizeRadius = 47;
                this.negateArmour = 0;
                this.attackWait = 4.25;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 0) + 1;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 95;
                this.sizeRadius = 4;
                this.negateArmour = 0;
                this.attackWait = 3.15;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 3;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.5 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 35;
                this.sizeRadius = 9;
                this.negateArmour = 0;
                this.attackWait = 2.85;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            this.keepSpeed = this.speed;
        }
        else if (this.type == "Ulgoy")
        {
            this.mobile = false;
            this.stackDominance = 1000;
            this.damageFrame = "automatic";
            this.team = "ulgoyia";
            this.baseTeam = this.team;
            this.mode = "waiting";
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 3;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 23) + 43;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0;
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 85;
                this.sizeRadius = 24;
                this.negateArmour = 4;
                this.attackWait = 4.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 10
                this.xAdjustment = 0; //was 30
            }
            else if (this.alpha == "giant")
            {
                this.magicalResistance = 4;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 131) + 210;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.3 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 190;
                this.sizeRadius = 56;
                this.negateArmour = 10;
                this.attackWait = 12;

                //alpha has a larger size body and skills.
                this.alphaSize = 5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = 1;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0;
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 45;
                this.sizeRadius = 9;
                this.negateArmour = 1;
                this.attackWait = 3.6;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.8; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 2;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 22;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0;
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 64;
                this.sizeRadius = 14;
                this.negateArmour = 3;
                this.attackWait = 4.1;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "BrolleWorms")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            this.haste = true;
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = 1;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 0.8 + (Math.floor(Math.random() * 3) / 10);
            this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1;
            this.engagementRadius = 6;
            this.sizeRadius = 10;
            this.negateArmour = 0;
            this.attackWait = 0.05;

            //alpha has a larger size body and skills.
            this.alphaSize = 1.45; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 1; //was - 3.5
            this.xAdjustment = 6; //was 6
        }
        else if (this.type == "GhoulFly")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 46;
            this.redirectAng = -1/2 * Math.PI + (Math.random() * Math.PI);
            this.redirKK = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 8) + 30;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 76;
                this.sizeRadius = 25;
                this.negateArmour = 9;
                this.attackWait = 1.1;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 17;
                this.xAdjustment = 9;
            }
            else if (this.alpha == "massive")
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 12) + 76;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 95;
                this.sizeRadius = 30;
                this.negateArmour = 19;
                this.attackWait = 1.1;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 56;
                this.xAdjustment = 56;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 10;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.5 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 46;
                this.sizeRadius = 19;
                this.negateArmour = 4;
                this.attackWait = 1.1;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 2.5;
                this.xAdjustment = 1;
            }
        }
        else if (this.type == "Varn")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 14;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 10;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.2 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 525; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 41.5;
                this.sizeRadius = 19;
                this.negateArmour = 0;
                this.attackWait = 0.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.45; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 1; //was - 3.5
                this.xAdjustment = 6; //was 6
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 7;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.9 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 38.5;
                this.sizeRadius = 18;
                this.negateArmour = 0;
                this.attackWait = 0.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.3;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
            this.swimSpeed = this.speed * 0.8;
        }
        else if (this.type == "Boggart")
        {
            this.damageFrame = "automatic";
            this.resistances = ["water", "night"];
            this.team = "Boggart";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;
            this.estyle = "normal";
            if (this.ID == "Boggart" || this.ID == "boggart" || this.ID == "docile")
            {
                this.boggartNamed = false;
            }
            else
            {
                this.boggartNamed = true;
            }

            if (this.alpha == true)
            {
                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 4 + (24 * this.alphaSize * Math.max(1, Math.floor(this.alphaSize + 0.1)));
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.5 + (0.5 * this.alphaSize);
                this.rangeOfSight = 0; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1 + (0.02 * this.alphaSize);
                this.engagementRadius = 14 + (37 * this.alphaSize);
                this.sizeRadius = 5 + 9 * this.alphaSize;
                this.negateArmour = 0;
                this.attackWait = 0.9;
            }
            else
            {
                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.6;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 4 + (24 * this.alphaSize * Math.max(1, Math.floor(this.alphaSize + 0.1)));
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.5 + (0.5 * this.alphaSize);
                this.rangeOfSight = 0; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1 + (0.02 * this.alphaSize);
                this.engagementRadius = 14 + (37 * this.alphaSize);
                this.sizeRadius = 5 + 9 * this.alphaSize;
                this.negateArmour = 0;
                this.attackWait = 0.9;
            }
            this.swimSpeed = this.speed * 0.9;
        }
        else if (this.type == "GreyTroll")
        {
            this.damageFrame = "manual";
            this.team = "trollia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.haste = true;
            this.baseTeam = this.team;
            this.tamable = false;
            this.gender = Math.round(Math.random());
            this.hunger = 80;
            this.horny = 0;
            this.eatingSkol = false;
            this.eating = false;
            this.mating = false;
            this.matingNum = 0;
            this.pregnant = false;
            this.birthTime = 0;
            this.mate = "none";
            this.mother = "none";
            this.nursing = false;
            this.corpseYum = "none";
            this.homeX = this.X;
            this.homeY = this.Y;
            this.feedMate = false;
            this.aging = 0;
            this.isEating = false;

            if (this.alpha == true) //adult
            {
                this.magicalResistance = 4;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 91) + 410;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 6) / 10);
                this.keepSpeed = this.speed;
                this.rangeOfSight = 1400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // was 0.05
                this.engagementRadius = 120;
                this.sizeRadius = 90;
                this.negateArmour = 20;
                this.attackWait = 5;
                this.beastEntry = {intReq: 40, name: "Grey Troll", health: "410 - 500", armour: 0, damage: "75 - 110", negate: 20, ability: "Health Regeneration", fireProof: -3, habitat: "Woodlands/forests", sight: 1400, alpha: "Aldult", magicProof: 4, size: 90, speed: "4 - 4.5", rotation: 0.05, rate: 5, experience: 1600, description: ["Grey trolls only hunt when they are hungry. The females of the species select a mate and the pair remain loyal to eachother until one of them dies. When the ", "female is with child the father will bring sustenance for her until she is satiated. The favorite food of a grey troll is skol, a large brown type of wolf", "that is native to Thengaria. If a grey troll is not hungry or bothered you have nothing to fear from them for they do not hunt for sport."], image: ["garg", 33, 761, 203, 167, 0, 0, 203 * 2 / 3, 167 * 2 / 3]};


                this.alphaSize = 1;
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else //baby
            {
                this.magicalResistance = 4;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 20) + 111;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3 + (Math.floor(Math.random() * 3) / 10);
                this.keepSpeed = this.speed;
                this.rangeOfSight = 1400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // was 0.05
                this.engagementRadius = 81;
                this.sizeRadius = 41;
                this.negateArmour = 4;
                this.attackWait = 3.8;
                this.beastEntry = {intReq: 34, name: "Grey Troll", health: "111 - 130", armour: 0, damage: "11 - 20", negate: 4, ability: "Health Regeneration", fireProof: -3, habitat: "Woodlands/forests", sight: 1100, alpha: "Youngling", magicProof: 4, size: 70, speed: "3 - 3.2", rotation: 0.05, rate: 3.8, experience: 399, description: ["Young grey trolls stay by their mother most of the time. Their mother feeds them and protects them. If their mother is killed, the young grey troll will be forced to adapt to hunting at an early age to feed itself."], image: ["garg", 33, 761, 203, 167, 0, 0, 203 * 0.7 / 3, 167 * 0.7 / 3]};

                this.alphaSize = 0.45;
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            this.swimSpeed = this.speed * 0.25;
        }
        else if (this.type == "Leech") //leeech
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = 0.5;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 0.5;
            this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1;
            this.engagementRadius = 19;
            this.sizeRadius = 2;
            this.negateArmour = 0;
            this.attackWait = 0.5;
            this.alphaSize = 0.5;
            this.yAdjustment = 0;
            this.xAdjustment = 0;
            this.swimSpeed = this.speed * 2;
        }
        else if (this.type == "Peacock")
        {
            this.damageFrame = "automatic";
            this.team = "herdia"; //herdia are 'herd' animals that are reserved for only the nobility to hunt
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.plumed = false;
            this.wasPlumed = false;
            this.XX = this.X;
            this.YY = this.Y;

            if (this.alpha == true)
            {
                this.tameREQ = 6;
                this.magicalResistance = 2;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 4;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.4 + (Math.floor(Math.random() * 3) / 10);
                this.standardSpeed = this.speed;
                this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 215;
                this.sizeRadius = 20;
                this.negateArmour = 0;
                this.attackWait = 1;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.65; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 3.5
                this.xAdjustment = 0; //was 6
            }
            else
            {
                this.tameREQ = 5;
                this.magicalResistance = 2;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 2;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.2 + (Math.floor(Math.random() * 3) / 10);
                this.standardSpeed = this.speed;
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 170;
                this.sizeRadius = 16;
                this.negateArmour = 0;
                this.attackWait = 1;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
            this.swimSpeed = this.speed /3;
        }
        else if (this.type == "Drile")
        {
            this.followAttack = true;
            this.doubleFrame = true;
            this.damageFrame = "automatic";
            this.resistances = ["water", "burning"];
            this.team = "Drilia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 40;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.boatphobic = true;
                this.magicalResistance = 0;
                this.heatResistance = 0.4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 80;
                this.health = this.healthMAX;
                this.armour = 2;
                this.speed = 3.8 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 260; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 97;
                this.sizeRadius = 53;
                this.negateArmour = 2;
                this.attackWait = 1.88;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "massive")
            {
                //STATS (non-variable)
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 40) + 231;
                this.health = this.healthMAX;
                this.armour = 4;
                this.speed = 6.3 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 119;
                this.sizeRadius = 60;
                this.negateArmour = 6;
                this.attackWait = 3.3;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.9;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.boatphobic = true;
                this.magicalResistance = 0;
                this.heatResistance = 0.2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 33;
                this.health = this.healthMAX;
                this.armour = 2;
                this.speed = 3.3 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 200; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 74;
                this.sizeRadius = 29;
                this.negateArmour = 1;
                this.attackWait = 1.68;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
            this.swimSpeed = this.speed * 1.5;
        }
        else if (this.type == "Rhinoceros")
        {
            this.effect = "smashbackIII";
            this.damageDealt = "n/a";
            this.followThrough = true; //this unit follows through with its attacks even if the player moves out of range.
            this.charger = true; //this unit charges through and past the enemy.
            this.damageFrame = "manual"; //it is necessary to set this to "manual" so that the attackBubble function can determine the damaging.
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;
            this.lastTrrgt = "none";

            if (this.alpha == true)
            {
                this.magicalResistance = 0.5;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 13) + 112;
                this.health = this.healthMAX;
                this.lastHealth = this.health;
                this.armour = 1.9;
                this.speed = 7.6 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 247;
                this.sizeRadius = 48;
                this.negateArmour = 11;
                this.attackWait = 2.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.25; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0.5;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 10) + 90;
                this.health = this.healthMAX;
                this.lastHealth = this.health;
                this.armour = 1.4;
                this.speed = 7 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 210;
                this.sizeRadius = 41;
                this.negateArmour = 9;
                this.attackWait = 2.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            this.swimSpeed = 1/5 * this.speed;
        }
        else if (this.type == "Yioshk")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;

            if (this.alpha == true)
            {
                this.tameREQ = 29;
                this.magicalResistance = 0;
                this.heatResistance = -0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 30;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.4 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 64;
                this.sizeRadius = 19;
                this.negateArmour = 0;
                this.attackWait = 1.15;

                //alpha has a larger size body and skills.
                this.alphaSize = 3.1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.tameREQ = 27;
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 19;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.8 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 54;
                this.sizeRadius = 17;
                this.negateArmour = 0;
                this.attackWait = 1.15;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 2.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "BorbBeetle")
        {
            this.damageFrame = "automatic";
            this.team = "borbia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;
            this.insect = true;
            this.zIndex = 1; //insects tend to draw below all other creatures

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1;
                this.health = this.healthMAX;
                this.armour = 0.15;
                this.speed = 0.25 + (Math.floor(Math.random() * 6) / 100);
                this.rangeOfSight = 200; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 12;
                this.sizeRadius = 1.5;
                this.negateArmour = 0;
                this.attackWait = 2;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.3;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 0.6;
                this.health = this.healthMAX;
                this.armour = 0.1;
                this.speed = 0.19 + (Math.floor(Math.random() * 5) / 100);
                this.rangeOfSight = 200; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 10;
                this.sizeRadius = 1;
                this.negateArmour = 0;
                this.attackWait = 2;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.225;

                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Boar")
        {
            this.haste = true;
            this.followThrough = true; //this unit follows through with its attacks even if the player moves out of range.
            this.charger = true; //this unit charges through and past the enemy.
            this.damageDealt = true;
            this.damageFrame = "manual";
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;

            if (this.alpha == true)
            {
                this.tameREQ = 29;
                this.magicalResistance = 0;
                this.heatResistance = -0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 14) + 49;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4.4 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 100;
                this.sizeRadius = 40;
                this.negateArmour = 0;
                this.attackWait = 1.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 3.1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.tameREQ = 27;
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 11;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.3 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 60;
                this.sizeRadius = 25;
                this.negateArmour = 0;
                this.attackWait = 1.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.7;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.tameREQ = 27;
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 29;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.9 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 80;
                this.sizeRadius = 33;
                this.negateArmour = 0;
                this.attackWait = 1.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 2.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Cloimid")
        {
            this.resistances = ["acid", "stun", "blinded", "shock", "burning", "frozen", "water"];
            this.damageFrame = "manual";
            this.followThrough = true;
            this.team = "clamia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.effect = "acidII";
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 21) + 75;
                this.health = this.healthMAX;
                this.armour = 0; //0 - 200
                this.speed = 0;
                this.rangeOfSight = 200; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0;
                this.engagementRadius = 0;
                this.sizeRadius = 27;
                this.negateArmour = 21;
                this.attackWait = 1.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.55; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 21) + 40;
                this.health = this.healthMAX;
                this.armour = 0; //0 - 160
                this.speed = 0;
                this.rangeOfSight = 200; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0;
                this.engagementRadius = 0;
                this.sizeRadius = 22;
                this.negateArmour = 12;
                this.effect = "acidII";
                this.attackWait = 1.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 2;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "BeachMite")
        {
            this.damageFrame = "automatic";
            this.resistances = ["acid", "burning"];
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            this.magicalResistance = 0;
            this.heatResistance = 1;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = 1;
            this.health = this.healthMAX;
            this.armour = 0.75;
            this.speed = 2.4 + (Math.floor(Math.random() * 3) / 10);
            this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.2;
            this.engagementRadius = 15;
            this.sizeRadius = 9;
            this.negateArmour = 0;
            this.attackWait = 0.8;

            //alpha has a larger size body and skills.
            this.alphaSize = 1.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 0; //was - 3.5
            this.xAdjustment = 0; //was 6
        }
        else if (this.type == "Cangrejo")
        {
            this.damageFrame = "automatic";
            this.resistances = ["acid", "stun", "burning", "water"];
            this.team = "cangrejia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;

            if (this.alpha == true)
            {
                this.tameREQ = 35;

                this.magicalResistance = 0;
                this.heatResistance = 14;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 22) + 75;
                this.health = this.healthMAX;
                this.armour = 11;
                this.speed = 3.8 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 950; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 46 * 1.5;
                this.sizeRadius = 18 * 1.5;
                this.negateArmour = 9;
                this.attackWait = 1.55;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.75; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "massive")
            {
                this.tamable = false;

                this.magicalResistance = 0;
                this.heatResistance = 20;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 43) + 192;
                this.health = this.healthMAX;
                this.armour = 17;
                this.speed = 5.7 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 1350; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 46 * 2.1429;
                this.sizeRadius = 18 * 2.1429;
                this.negateArmour = 17;
                this.attackWait = 6;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.tameREQ = 13;

                this.magicalResistance = 0;
                this.heatResistance = 4;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 7;
                this.health = this.healthMAX;
                this.armour = 3;
                this.speed = 2.35 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 46 * 0.6;
                this.sizeRadius = 18 * 0.6;
                this.negateArmour = 4;
                this.attackWait = 0.9;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.tameREQ = 25;

                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 9;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 25;
                this.health = this.healthMAX;
                this.armour = 9;
                this.speed = 2.9 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 46;
                this.sizeRadius = 18;
                this.negateArmour = 7;
                this.attackWait = 1.22;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.3;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
            this.swimSpeed = 1/2 * this.speed;
        }
        else if (this.type == "Anemone")
        {
            this.damageFrame = "automatic";
            this.resistances = ["acid", "stun", "burning", "blinded", "water"];
            this.team = "anemonia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 1;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 34;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.35 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.02;
                this.engagementRadius = 51;
                this.sizeRadius = 24;
                this.negateArmour = 0;
                this.attackWait = 3;

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.tamable = true;
                this.tameREQ = 20;
                this.magicalResistance = 1;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 3;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0.7 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 240; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.02;
                this.engagementRadius = 20;
                this.sizeRadius = 6;
                this.negateArmour = 0;
                this.attackWait = 2;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.75; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 1;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 20;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 320; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.02;
                this.engagementRadius = 34;
                this.sizeRadius = 14;
                this.negateArmour = 0;
                this.attackWait = 2.7;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            this.swimSpeed = 2 * this.speed;
        }
        else if (this.type == "Koobu")
        {
            this.damageFrame = "automatic";
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 5;

            //STATS (non-variable)
            this.magicalResistance = 0;
            this.heatResistance = -1.5;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 3) + 3;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 1.9 + (Math.floor(Math.random() * 4) / 10);
            this.rangeOfSight = 260; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1;
            this.engagementRadius = 33;
            this.sizeRadius = 16;
            this.negateArmour = 0;
            this.attackWait = 1.2;
            this.contraPlayer = false;

            //this multiplies the draw image skew numbers by 1 so that it stays the same
            this.alphaSize = 1.5;

            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Seal")
        {
            this.damageFrame = "manual";
            this.resistances = ["frozen", "shock", "water"];
            this.team = "herd";
            this.baseTeam = this.team;

            this.tameREQ = 6;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0.2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 18;
                this.health = this.healthMAX;
                this.armour = 0.05;
                this.speed = 2.1 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.065; // 0.01 is a standard turn speed.
                this.engagementRadius = 33;
                this.sizeRadius = 17;
                this.negateArmour = 0;
                this.attackWait = 1.8;
                this.contraPlayer = false;

                this.alphaSize = 1.9;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0.2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 5;
                this.health = this.healthMAX;
                this.armour = 0.05;
                this.speed = 1.4 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.065; // 0.01 is a standard turn speed.
                this.engagementRadius = 16;
                this.sizeRadius = 8;
                this.negateArmour = 0;
                this.attackWait = 1.8;
                this.contraPlayer = false;

                this.alphaSize = 0.8;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0.2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 18;
                this.health = this.healthMAX;
                this.armour = 0.05;
                this.speed = 1.8 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.065; // 0.01 is a standard turn speed.
                this.engagementRadius = 25;
                this.sizeRadius = 13;
                this.negateArmour = 0;
                this.attackWait = 1.8;
                this.contraPlayer = false;
                this.alphaSize = 1.45;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            this.swimSpeed = this.speed * 2.5;
        }
        else if (this.type == "MudBeetle")
        {
            this.damageFrame = "automatic";
            this.team = "lombrisia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 13;

            //STATS (non-variable)
            this.magicalResistance = 0;
            this.heatResistance = 3;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 7) + 12;
            this.health = this.healthMAX;
            this.armour = 3;
            this.speed = 2.6 + (Math.floor(Math.random() * 5) / 10);
            this.rangeOfSight = 390; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.05;
            this.engagementRadius = 36;
            this.sizeRadius = 19;
            this.negateArmour = 0;
            this.attackWait = 1.6;
            this.contraPlayer = false;

            //this multiplies the draw image skew numbers by 1 so that it stays the same
            this.alphaSize = 1.75;

            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Balkur") //balkbalk
        {
            this.damageFrame = "automatic";
            this.team = "balkuria";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.aiTimer = 4; //this is set to four for a particular part of the Balkur AI

            if (this.alpha == true)
            {
                this.tameREQ = 38;
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 18) + 40;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5.8 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 80;
                this.sizeRadius = 45;
                this.negateArmour = 7;
                this.attackWait = 1.7;

                this.territoryX = this.X;
                this.territoryY = this.Y;
                this.territory = 1200;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 3.5
                this.xAdjustment = 0; //was 6
            }
            else
            {
                this.tameREQ = 31;
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 12) + 23;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5.4 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 65;
                this.sizeRadius = 35;
                this.negateArmour = 6;
                this.attackWait = 1.7;

                this.territoryX = this.X;
                this.territoryY = this.Y;
                this.territory = 900;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Skol")
        {
            this.damageFrame = "automatic";
            this.team = "wolf";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 27;

            if (this.alpha == true)
            {
                this.tameREQ = 37;
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 11) + 36;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 625;
                this.rotationSpeed = 0.1;
                this.engagementRadius = 70;
                this.sizeRadius = 33;
                this.negateArmour = 3;
                this.attackWait = 1.35;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 1; //was - 3.5
                this.xAdjustment = 6; //was 6
            }
            else if (this.alpha == "massive")
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 21) + 69;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 900;
                this.rotationSpeed = 0.1;
                this.engagementRadius = 96;
                this.sizeRadius = 60;
                this.negateArmour = 6;
                this.attackWait = 1.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 1; //was - 3.5
                this.xAdjustment = 6; //was 6
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 12;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 575;
                this.rotationSpeed = 0.1;
                this.engagementRadius = 55;
                this.sizeRadius = 23;
                this.negateArmour = 1;
                this.attackWait = 1.25;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Molte")
        {
            this.damageFrame = "automatic";
            this.resistances = ["blinded", "night"];
            this.team = "moltia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 41;

            if (this.alpha == true)
            {
                this.tameREQ = 43;
                this.effect = "halfAcid";
                this.magicalResistance = 0.5;
                this.heatResistance = 1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 21) + 110;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 300;
                this.rotationSpeed = 0.2;
                this.engagementRadius = 100;
                this.sizeRadius = 46;
                this.negateArmour = 6;
                this.attackWait = 1.8;

                this.alphaSize = 1.24;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.effect = "halfAcid";
                this.magicalResistance = 0.5;
                this.heatResistance = 1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 11) + 90;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 200;
                this.rotationSpeed = 0.2;
                this.engagementRadius = 90;
                this.sizeRadius = 40;
                this.negateArmour = 4;
                this.attackWait = 1.8;

                this.alphaSize = 1;

                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Sprite")
        {
            this.resistances = ["time", "shock", "acid", "charm", "web", "water", "petrification", "stun", "blinded", "burning", "frozen", "buffout", "night"];
            this.damageFrame = "manual";
            this.team = "sprite";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            this.doMischiefTime = new Date().getTime();
            this.didAttack = false;
            this.spritePhaseTime = new Date().getTime();
            this.phase = "nada";
            this.saltMak = 0;
            this.mood = -1;
            this.fogGenTime = 0;
            this.flying = true;
            this.haste = true;
            this.magicalResistance = 12;
            this.heatResistance = 12;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 15) + 20;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 7 + (Math.floor(Math.random() * 9) / 10);
            this.rangeOfSight = 2922;
            this.rotationSpeed = 2;
            this.engagementRadius = 120;
            this.sizeRadius = 10;
            this.negateArmour = 90;
            this.attackWait = 3.1;

            //alpha has a larger size body and skills.
            this.alphaSize = 1;

            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Gargoyle")
        {
            this.damageFrame = "automatic";
            this.resistances = ["night"];
            this.team = "gargoyle";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 60;

            if (this.alpha == true)
            {
                this.gargStoned = "un";
            }
            else
            {
                this.gargStoned = false;
            }
            this.magicalResistance = 3;
            this.heatResistance = 2;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 16) + 95;
            this.health = this.healthMAX;
            this.armour = 1;
            this.flySpeed = 6 + (Math.floor(Math.random() * 4) / 10);
            this.walkSpeed = 2 + (Math.floor(Math.random() * 4) / 10);
            this.speed = 2 + (Math.floor(Math.random() * 4) / 10);
            this.rangeOfSight = 900;
            this.rotationSpeed = 0.2;
            this.engagementRadius = 70;
            this.sizeRadius = 30;
            this.negateArmour = 9;
            this.attackWait = 2;

            //alpha has a larger size body and skills.
            this.alphaSize = 1;

            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Boulchom")
        {
            this.damageDealt = "n/a";
            this.followThrough = true; //this unit follows through with its attacks even if the player moves out of range.
            this.charger = true; //this unit charges through and past the enemy.
            this.damageFrame = "manual"; //it is necessary to set this to "manual" so that the attackBubble function can determine the damaging.
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 36;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 10) + 20;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 247;
                this.sizeRadius = 28;
                this.negateArmour = 4;
                this.attackWait = 2.5;
                this.chargeDist = this.engagementRadius * 1.7;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.8; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 11;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 210;
                this.sizeRadius = 19;
                this.negateArmour = 2;
                this.attackWait = 2.5;
                this.chargeDist = this.engagementRadius * 1.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.25;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Lombris")
        {
            this.damageDealt = "n/a";
            this.resistances = ["blinded", "burning", "leech"];
            this.followThrough = true; //this unit follows through with its attacks even if the player moves out of range.
            this.damageFrame = "manual"; //it is necessary to set this to "manual" so that the attackBubble function can determine the damaging.
            this.team = "lombrisia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 50;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 45;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 64;
                this.sizeRadius = 28;
                this.negateArmour = 0;
                this.attackWait = 7;

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 12;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.8 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 550; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 42;
                this.sizeRadius = 19;
                this.negateArmour = 0;
                this.attackWait = 6;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Nog")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 6;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 1.1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 2.5;
                this.health = this.healthMAX;
                this.armour = 0.5;
                this.speed = 4 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 525; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 34;
                this.sizeRadius = 12.5;
                this.negateArmour = 0.25;
                this.attackWait = 1;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.25; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 1;
                this.health = this.healthMAX;
                this.armour = 0.4;
                this.speed = 3.8 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 375; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.2;
                this.engagementRadius = 24.85;
                this.sizeRadius = 10;
                this.negateArmour = 0.2;
                this.attackWait = 1;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Deth")
        {
            this.damageFrame = "automatic";
            this.team = "deth";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            else if (this.ID == "deth1")
            {
                this.team = "deth1";
            }
            else if (this.ID == "deth2")
            {
                this.team = "deth2";
            }
            else if (this.ID == "deth3")
            {
                this.team = "deth3";
            }
            else if (this.ID == "deth4")
            {
                this.team = "deth4";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            this.age = this.ultra.age; //how old the deth is

            //GENES
            this.APR = this.ultra.APR; //Appearance: Social standing for female deths
            this.CON = this.ultra.CON; //Constitution: health + size
            this.ING = this.ultra.ING; //Ingenious: technological advancment + free thinking
            this.DEX = this.ultra.DEX; //Dexterity: speed
            this.PER = this.ultra.PER; //Perception: rangeOfSight + lifespan

            //these skills are intentionally low because Deths' have their skills set by their DNA
            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;
            this.healthMAX = Math.floor(Math.random() * 1) + 1;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 0.5 + (Math.floor(Math.random() * 1) / 1);
            this.rangeOfSight = 0;
            this.rotationSpeed = 0.2;
            this.engagementRadius = 1;
            this.sizeRadius = 1;
            this.negateArmour = 0;
            this.attackWait = 2;

            this.alphaSize = 1;

            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "HyelingSoldier")
        {
            this.damageFrame = "automatic";
            this.team = "hyeling";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.dropRND = Math.random();
            this.extraRot = 1/2 * Math.PI;
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 9) + 26;
                this.health = this.healthMAX;
                this.armour = 2.5;
                this.speed = 5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 860; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 62;
                this.sizeRadius = 20;
                this.negateArmour = 0;
                this.attackWait = 1.1;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.22; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 1; //was - 3.5
                this.xAdjustment = 6; //was 6
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 21;
                this.health = this.healthMAX;
                this.armour = 2.25;
                this.speed = 4.75 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 820; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 50;
                this.sizeRadius = 18;
                this.negateArmour = 0;
                this.attackWait = 1.1;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Hyeling")
        {
            this.damageFrame = "automatic";
            this.team = "hyeling";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.dropRND = Math.random();
            this.extraRot = 1/2 * Math.PI;
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 20;
                this.health = this.healthMAX;
                this.armour = 0.15;
                this.speed = 5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 860; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 36;
                this.sizeRadius = 20;
                this.negateArmour = 1.5;
                this.attackWait = 0.75;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.22; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 1; //was - 3.5
                this.xAdjustment = 6; //was 6
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.round(Math.random() * 2) + 4;
                this.health = this.healthMAX;
                this.armour = 0.02;
                this.speed = 4.75 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 820; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 19;
                this.sizeRadius = 10;
                this.negateArmour = 0.2;
                this.attackWait = 0.82;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.61;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 16;
                this.health = this.healthMAX;
                this.armour = 0.1;
                this.speed = 4.75 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 820; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 30;
                this.sizeRadius = 18;
                this.negateArmour = 1;
                this.attackWait = 0.75;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26
            }
        }
        else if (this.type == "Duende")
        {
            this.effect = "sleepifyI";
            this.resistances = ["night"];
            this.damageFrame = "automatic";
            this.team = "Duende";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.dropRND = Math.random();
            this.extraRot = 1/2 * Math.PI;
            this.baseTeam = this.team;
            this.tamable = false;

            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 3) + 12;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 2.5 + (Math.floor(Math.random() * 4) / 10);
            this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.5;
            this.engagementRadius = 40;
            this.sizeRadius = 16;
            this.negateArmour = 3;
            this.attackWait = 0.90;

            //alpha has a larger size body and skills.
            this.alphaSize = 0.7; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Mugmul")
        {
            this.resistances = ["water"];
            this.damageFrame = "automatic";
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            //typespecific variables
            this.treesSearched = [-1];
            this.cosaEncontrada = null;
            this.enLista = false;
            this.treeSelected = "none";
            this.eatNut = false;
            this.hunger = 70;
            this.hungerMAX = 80;


            //STATS (non-variable)
            this.magicalResistance = 0;
            this.heatResistance = -2;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = Math.floor(Math.random() * 4) + 12;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 3 + (Math.floor(Math.random() * 3) / 10);
            this.rangeOfSight = 1100; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.25;
            this.engagementRadius = 33;
            this.sizeRadius = 19;
            this.negateArmour = 0;
            this.attackWait = 0.6;

            //this multiplies the draw image skew numbers by 1 so that it stays the same
            this.alphaSize = 1;
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 0;
            this.xAdjustment = 0;
        }
        else if (this.type == "Ut") //utttttt
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 43;

            if (this.alpha == true)
            {
                this.magicalResistance = 1;
                this.heatResistance = 6;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 140;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05;
                this.engagementRadius = 36;
                this.sizeRadius = 19;
                this.negateArmour = 14;
                this.attackWait = 3.85;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.9; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = 1;
                this.heatResistance = 6;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 14;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05;
                this.engagementRadius = 26;
                this.sizeRadius = 16;
                this.negateArmour = 3;
                this.attackWait = 3.55;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.75; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 1;
                this.heatResistance = 6;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 12) + 49;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.5 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05;
                this.engagementRadius = 30;
                this.sizeRadius = 19;
                this.negateArmour = 9;
                this.attackWait = 3.75;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.25; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Grewble")
        {
            this.damageFrame = "automatic";
            this.resistances = ["stun"];
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 33;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 21;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "grewbleToxinII";
                this.engagementRadius = 75;
                this.sizeRadius = 24;
                this.negateArmour = 11;
                this.attackWait = 3.25;

                //alpha has a larger size body and skills.
                this.alphaSize = 3; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "giant")
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 35;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 8;
                this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "grewbleToxinIII";
                this.engagementRadius = 114;
                this.sizeRadius = 34;
                this.negateArmour = 90;
                this.attackWait = 9;

                //alpha has a larger size body and skills.
                this.alphaSize = 4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 3;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "fatigueI";
                this.engagementRadius = 32;
                this.sizeRadius = 5;
                this.negateArmour = 2.5;
                this.attackWait = 1.25;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 9;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.5 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "grewbleToxinI";
                this.engagementRadius = 49;
                this.sizeRadius = 15;
                this.negateArmour = 14;
                this.attackWait = 2.25;

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Etna")
        {
            this.damageFrame = "automatic";
            this.resistances = ["stun", "web", "night"];
            this.team = "etnia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 4) + 9;
                this.health = this.healthMAX;
                this.armour = 3.9;
                this.speed = 3.2 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "etnaVenom";
                this.engagementRadius = 35;
                this.sizeRadius = 16;
                this.negateArmour = 9;
                this.attackWait = 1.89;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.3; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1;
                this.health = this.healthMAX;
                this.armour = 1.5;
                this.speed = 2.25 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "etnaVenom";
                this.engagementRadius = 19.8;
                this.sizeRadius = 3;
                this.negateArmour = 3;
                this.attackWait = 1.89;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 6;
                this.health = this.healthMAX;
                this.armour = 2.9;
                this.speed = 3 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.effect = "etnaVenom";
                this.engagementRadius = 32;
                this.sizeRadius = 13;
                this.negateArmour = 6;
                this.attackWait = 1.89;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Avrak")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            this.baseTeam = this.team;
            this.tameREQ = 24;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 31) + 45;
                this.health = this.healthMAX;
                this.armour = 2.5;
                this.speed = 5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 950; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 52;
                this.sizeRadius = 25;
                this.negateArmour = 3.5;
                this.attackWait = 1.35;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.65; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 10
                this.xAdjustment = 0; //was 30
            }
            else if (this.alpha == "giant")
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 61) + 190;
                this.health = this.healthMAX;
                this.armour = 4;
                this.speed = 7.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 1250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 150;
                this.sizeRadius = 85;
                this.negateArmour = 7;
                this.attackWait = 1.65;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 10) + 14;
                this.health = this.healthMAX;
                this.armour = 1.5;
                this.speed = 4 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 51;
                this.sizeRadius = 20;
                this.negateArmour = 2.25;
                this.attackWait = 1.25;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Evrak")
        {
            this.damageFrame = "automatic";
            this.team = "wild";
            this.baseTeam = this.team;
            this.tameREQ = 21;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 11) + 20;
                this.health = this.healthMAX;
                this.armour = 3;
                this.speed = 6 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 950; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 50;
                this.sizeRadius = 25;
                this.negateArmour = 4;
                this.attackWait = 1.65;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.65; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 7; //was - 10
                this.xAdjustment = 0; //was 30
            }
            else if (this.alpha == "giant")
            {
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 31) + 140;
                this.health = this.healthMAX;
                this.armour = 5;
                this.speed = 8.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 1250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 98;
                this.sizeRadius = 81;
                this.negateArmour = 9;
                this.attackWait = 2;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 9;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 12;
                this.health = this.healthMAX;
                this.armour = 2;
                this.speed = 5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 36;
                this.sizeRadius = 20;
                this.negateArmour = 3;
                this.attackWait = 1.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 8; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "StoneGolem")
        {
            this.damageFrame = "automatic";
            this.state = "resting";
            this.resistances = ["shock", "petrification", "acid", "basilisk", "burning", "night"];
            this.team = "neutral";
            this.baseTeam = this.team;
            this.tamable = false;

            if (this.alpha == true)
            {
                this.magicalResistance = -5;
                this.heatResistance = 8;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 66) + 165;
                this.health = this.healthMAX;
                this.armour = 17;
                this.speed = 3 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 1500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 51;
                this.sizeRadius = 20 * 3 * 1.25;
                this.negateArmour = 30;
                this.attackWait = 8;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.25; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was - 10
                this.xAdjustment = 0; //was 30
            }
            else if (this.alpha == "giant")
            {
                this.magicalResistance = -5;
                this.heatResistance = 10;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 151) + 400;
                this.health = this.healthMAX;
                this.armour = 28;
                this.speed = 4.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 2000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 51 * 3;
                this.sizeRadius = 20 * 3 * 2.2;
                this.negateArmour = 50;
                this.attackWait = 9;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = -5;
                this.heatResistance = 5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 16) + 25;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 2 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 22;
                this.sizeRadius = 20;
                this.negateArmour = 4;
                this.attackWait = 2.65;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.33; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = -5;
                this.heatResistance = 6;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 26) + 75;
                this.health = this.healthMAX;
                this.armour = 10;
                this.speed = 2.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 38
                this.sizeRadius = (20 * 3) * 0.65;
                this.negateArmour = 12;
                this.attackWait = 4.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.65;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "Grib")
        {
            this.damageFrame = "automatic";
            this.team = "gribia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 26;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 16;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.9 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 40;
                this.sizeRadius = 19;
                this.negateArmour = 0;
                this.attackWait = 0.85;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.75; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 5; //was - 3.5
                this.xAdjustment = 6; //was 6
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 8;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.3 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 350; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 28;
                this.sizeRadius = 15;
                this.negateArmour = 0;
                this.attackWait = 0.85;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.3;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -2; //was -34
                this.xAdjustment = 0; //was - 26

            }
        }
        else if (this.type == "BlackBear")
        {
            this.damageFrame = "automatic";
            this.team = "bearia";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 29;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 11) + 32;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.2 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 41.5;
                this.sizeRadius = 20;
                this.negateArmour = 3;
                this.attackWait = 1.65;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 7; //was - 3.5
                this.xAdjustment = 10; //was 6
            }
            else if (this.alpha == "giant")
            {
                //STATS (non-variable)
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 41) + 155;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 78;
                this.sizeRadius = 44;
                this.negateArmour = 15;
                this.attackWait = 3.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 3.35;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 45; //was -34
                this.xAdjustment = 80; //was - 26

            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.attackStyle = "chunked";
                this.heatResistance = -1;
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 11) + 20;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 33;
                this.sizeRadius = 15;
                this.negateArmour = 1.5;
                this.attackWait = 1.35;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26
            }
            this.swimSpeed = 3/5 * this.speed;
        }
        else if (this.type == "Viper")
        {
            this.damageFrame = "automatic";
            this.effect = "poisonII";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 30;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 11) + 16;
                this.health = this.healthMAX;
                this.armour = 1;
                this.speed = 3.8 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 31.5;
                this.sizeRadius = 18;
                this.negateArmour = 4;
                this.attackWait = 1.65;

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 20;
                this.xAdjustment = 56;
            }
            else if (this.alpha == "giant")
            {
                //STATS (non-variable)
                this.tamable = false;
                this.magicalResistance = 0;
                this.heatResistance = 0.25;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 25) + 64;
                this.health = this.healthMAX;
                this.armour = 6;
                this.speed = 5.5 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05;
                this.engagementRadius = 40;
                this.sizeRadius = 30;
                this.negateArmour = 19;
                this.attackWait = 2.4;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 3.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 50;
                this.xAdjustment = 120;

            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.attackStyle = "chunked";
                this.heatResistance = 0;
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random()) + 3;
                this.health = this.healthMAX;
                this.armour = 0.2;
                this.speed = 2.7 + (Math.floor(Math.random() * 6) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 33;
                this.sizeRadius = 15;
                this.negateArmour = 3;
                this.attackWait = 1.2;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Taipan")
        {
            this.damageFrame = "manual";
            this.effect = "poisonIV";
            this.team = "wild";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 33;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0.1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 340; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 71;
                this.sizeRadius = 20;
                this.negateArmour = 3.5;
                this.attackWait = 1.45;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.7; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.attackStyle = "chunked";
                this.heatResistance = 0;
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 3.5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.6 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1;
                this.engagementRadius = 55;
                this.sizeRadius = 18;
                this.negateArmour = 2.5;
                this.attackWait = 1.45;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 2;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Basilisk")
        {
            this.damageFrame = "manual";
            this.resistances = ["petrification", "acid", "basilisk", "night"];
            this.effect = "basiliskVenom";
            this.team = "Basilisk";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 500;
            this.shortSighted = true;
            if (this.ID == "Bask" || this.ID == "bask" || this.ID == "baske" || this.ID == "lilBask" || this.ID == "Baske")
            {
                this.newRotation = Math.random() * (2*Math.PI);
            }

            if (this.alpha == true)
            {
                this.magicalResistance = -1;
                this.heatResistance = 1.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 190;
                this.health = this.healthMAX;
                this.armour = 5.5;
                this.speed = 1.2;
                this.rangeOfSight = 340; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.025;
                this.engagementRadius = 103;
                this.sizeRadius = 57;
                this.negateArmour = 200;
                this.attackWait = 5;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 33 * 1.2;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = -1;
                this.attackStyle = "chunked";
                this.heatResistance = 1.5;
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 27;
                this.health = this.healthMAX;
                this.armour = 2.5;
                this.speed = 0.65;
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.025;
                this.engagementRadius = 41;
                this.sizeRadius = 19;
                this.negateArmour = 90;
                this.attackWait = 4;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.4;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 33 * 0.4;

            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = -1;
                this.attackStyle = "chunked";
                this.heatResistance = 1.5;
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 150;
                this.health = this.healthMAX;
                this.armour = 4;
                this.speed = 0.9;
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.025;
                this.engagementRadius = 90;
                this.sizeRadius = 50;
                this.negateArmour = 170;
                this.attackWait = 4.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 33;

            }
        }
        else if (this.type == "Naaprid")
        {
            this.damageFrame = "manual";
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            else if (this.ID == "player")
            {
                this.team = "player";
            }
            this.baseTeam = this.team;
            this.milkTime = new Date().getTime();
            this.tameREQ = 20;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 8) + 9;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.8 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 385; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 59;
                this.sizeRadius = 35;
                this.negateArmour = 2;
                this.attackWait = 2.5;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.15; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 10; //was - 10
                this.xAdjustment = 11; //was 30
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 3;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.1 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 38;
                this.sizeRadius = 17;
                this.negateArmour = 2;
                this.attackWait = 2.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = -13.5; //was -34
                this.xAdjustment = -26; //was - 26
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 8) + 5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.6 + (Math.floor(Math.random() * 5) / 10);
                this.rangeOfSight = 350; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 47;
                this.sizeRadius = 25;
                this.negateArmour = 2;
                this.attackWait = 2.5;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1.75;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0; //was -34
                this.xAdjustment = 0; //was - 26
            }
        }
        else if (this.type == "Waanti")
        {
            this.damageFrame = "manual";
            this.team = "herd";
            this.baseTeam = this.team;
            this.milkTime = new Date().getTime();
            this.goatEatness = 0;
            this.goatly = false;
            this.tameREQ = 25;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 13;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.045; // 0.01 is a standard turn speed.
                this.engagementRadius = 35;
                this.sizeRadius = 16;
                this.negateArmour = 0;
                this.attackWait = 8;
                this.contraPlayer = false;

                this.alphaSize = 2;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -2;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 1) + 2;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 375; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 10;
                this.sizeRadius = 7;
                this.negateArmour = 0;
                this.attackWait = 4;
                this.contraPlayer = false;

                this.alphaSize = 0.9;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -3;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 8;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 4 + (Math.floor(Math.random() * 3) / 10);
                this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.045; // 0.01 is a standard turn speed.
                this.engagementRadius = 20;
                this.sizeRadius = 12;
                this.negateArmour = 0;
                this.attackWait = 6;
                this.contraPlayer = false;

                this.alphaSize = 1.45;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Horse") //caballo
        {
            this.damageFrame = "manual";
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            else if (this.ID == "player")
            {
                this.team = "player";
            }
            this.baseTeam = this.team;
            this.goatEatness = 0;
            this.goatly = false;
            this.tameREQ = 29;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 15;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6.2 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 375; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.12; // 0.01 is a standard turn speed.
                this.engagementRadius = 59;
                this.sizeRadius = 35;
                this.negateArmour = 0;
                this.attackWait = 4;

                this.alphaSize = 0.955;
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 9;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5.3 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.12; // 0.01 is a standard turn speed.
                this.engagementRadius = 59;
                this.sizeRadius = 22;
                this.negateArmour = 0;
                this.attackWait = 3;

                this.alphaSize = 0.66;
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 14;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6 + (Math.floor(Math.random() * 4) / 10);
                this.rangeOfSight = 350; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.12; // 0.01 is a standard turn speed.
                this.engagementRadius = 59;
                this.sizeRadius = 30;
                this.negateArmour = 0;
                this.attackWait = 3.5;

                this.alphaSize = 0.865;
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Zarbu")
        {
            this.damageFrame = "manual";
            this.team = "herd";
            this.baseTeam = this.team;
            this.goatEatness = 0;
            this.goatly = false;
            this.tameREQ = 37;

            if (this.alpha == true)
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 6) + 85;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 7 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // 0.01 is a standard turn speed.
                this.engagementRadius = 50;
                this.sizeRadius = 28;
                this.negateArmour = 0;
                this.attackWait = 6;
                this.contraPlayer = false;

                this.alphaSize = 1.3;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 3) + 11;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // 0.01 is a standard turn speed.
                this.engagementRadius = 18;
                this.sizeRadius = 12;
                this.negateArmour = 0;
                this.attackWait = 3;
                this.contraPlayer = false;
                this.tameREQ = 32;

                this.alphaSize = 0.6;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 51;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 6.2 + (Math.floor(Math.random() * 2) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.085; // 0.01 is a standard turn speed.
                this.engagementRadius = 40;
                this.sizeRadius = 20;
                this.negateArmour = 0;
                this.attackWait = 5;
                this.contraPlayer = false;

                this.alphaSize = 1;

                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Mofu") //moe-foo
        {
            this.damageFrame = "manual";
            this.team = "herd";
            this.baseTeam = this.team;
            this.tameREQ = 11;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 7 + Math.round(Math.random());
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.35;
                this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 24;
                this.sizeRadius = 18;
                this.negateArmour = 0;
                this.attackWait = 2.5;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else if (this.alpha == "baby")
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 0.8;
                this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 6;
                this.sizeRadius = 4.5;
                this.negateArmour = 0;
                this.attackWait = 3.5;
                this.contraPlayer = false;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 0.5;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                //STATS (non-variable)
                this.magicalResistance = 0;
                this.heatResistance = -0.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 4;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1;
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 12;
                this.sizeRadius = 9;
                this.negateArmour = 0;
                this.attackWait = 3;
                this.contraPlayer = false;

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Hoffalgre")
        {
            this.damageFrame = "manual";
            this.team = "herd";
            this.baseTeam = this.team;
            this.sex = "Young";
            this.traverse = true;
            this.tameREQ = 7;

            if (this.alpha == true)
            {
                if (Math.round(Math.random()))
                {
                    this.bounce = false;
                    this.sex = "Female";
                    this.magicalResistance = 0;
                    this.heatResistance = -2.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 6) + 12;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1.4;
                    this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 39;
                    this.sizeRadius = 15.5;
                    this.negateArmour = 0;
                    this.attackWait = 1.5;
                    this.horniness = 0;
                    this.hungerMAX = 55;
                    this.hunger = 55;
                    this.sustenance = 0;
                    this.suckling = false;
                    this.contraPlayer = false;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.35; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
                else
                {
                    this.sex = "Male";
                    this.magicalResistance = 0;
                    this.heatResistance = -2.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 8) + 15;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2.4;
                    this.rangeOfSight = 640; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 44;
                    this.sizeRadius = 17;
                    this.negateArmour = 0;
                    this.attackWait = 1.5;
                    this.horniness = 0;
                    this.hungerMAX = 25;
                    this.hunger = 25;
                    this.sustenance = 0;
                    this.suckling = false;
                    this.contraPlayer = false;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.55; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
            }
            else if (this.alpha == "baby")
            {
                this.tameREQ = 2;
                this.magicalResistance = 0;
                this.heatResistance = -2.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 2) + 1;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 1.5;
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 10;
                this.sizeRadius = 9;
                this.negateArmour = 0;
                this.attackWait = 0.5;
                this.horniness = 0;
                this.hungerMAX = 10;
                this.hunger = 10;
                this.sustenance = 0;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.65; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = -2.5;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 5) + 7;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2;
                this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 25;
                this.sizeRadius = 13.75;
                this.negateArmour = 0;
                this.attackWait = 1.5;
                this.horniness = 0;
                this.hungerMAX = 20;
                this.hunger = 20;
                this.sustenance = 0;
                this.suckling = false;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Fletter")
        {
            this.damageFrame = "manual";
            this.resistances = ["night"];
            this.team = "herd";
            this.baseTeam = this.team;
            this.flying = true;
            this.tameREQ = 5;

            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = 2.2;
            this.health = this.healthMAX;
            this.armour = 0;
            this.speed = 4.1;
            this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
            this.engagementRadius = 22;
            this.sizeRadius = 11;
            this.negateArmour = 0;
            this.attackWait = 1.8;
            this.hungerMAX = 9;
            this.hunger = 9;
            this.consume = false;
            this.contraPlayer = false;

            //alpha has a larger size body and skills.
            this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 0;
            this.xAdjustment = 0;

        }
        else if (this.type == "Ardil")
        {
            this.damageFrame = "manual";
            this.team = "herd";
            if (this.ID == "playerSummonedArdil")
            {
                this.team = "player";
            }
            else if (this.ID == "Irene's Pet Ardil")
            {
                this.team = "Kel";
            }
            this.baseTeam = this.team;
            this.sex = "Young";
            this.tameREQ = 4;

            if (this.alpha == true)
            {
                if (Math.round(Math.random()))
                {
                    this.sex = "Female";
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = 4;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3;
                    this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 24;
                    this.sizeRadius = 17;
                    this.negateArmour = 0;
                    this.attackWait = 3;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.65; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
                else
                {
                    this.sex = "Male";
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = 3;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 4;
                    this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 24;
                    this.sizeRadius = 14;
                    this.negateArmour = 0;
                    this.attackWait = 2;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.45; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
            }
            else if (this.alpha == "baby")
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 0.5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.75;
                this.rangeOfSight = 700; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 24;
                this.sizeRadius = 7;
                this.negateArmour = 0;
                this.attackWait = 2.4;

                //alpha has a larger size body and skills.
                this.alphaSize = 0.65; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.4;
                this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                this.engagementRadius = 24;
                this.sizeRadius = 11;
                this.negateArmour = 0;
                this.attackWait = 2;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Lizard")
        {
            this.damageFrame = "manual";
            this.resistances = ["night"];
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            this.baseTeam = this.team;
            this.tameREQ = 2;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1.5;
                this.health = this.healthMAX;
                this.armour = 0.25;
                this.speed = 2.5;
                this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 10;
                this.sizeRadius = 4;
                this.negateArmour = 0;
                this.attackWait = 0.01;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 0.5;
                this.health = this.healthMAX;
                this.armour = 0.1;
                this.speed = 2;
                this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 10;
                this.sizeRadius = 2;
                this.negateArmour = 0;
                this.attackWait = 0.01;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Conejo")
        {
            this.damageFrame = "manual";
            this.team = "herd";
            if (this.ID == "docile")
            {
                this.team = "docile";
            }
            else if (this.ID == "neutral2")
            {
                this.team = "neutral2";
            }
            this.baseTeam = this.team;
            this.tameREQ = 3;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 2.5;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.33;
                this.rangeOfSight = 240; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 15;
                this.sizeRadius = 6;
                this.negateArmour = 0;
                this.attackWait = 4;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 1;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.9;
                this.rangeOfSight = 190; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 14;
                this.sizeRadius = 4;
                this.negateArmour = 0;
                this.attackWait = 4;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Tunsk")
        {
            this.resistances = ["petrification", "night"];
            this.damageFrame = "manual";
            this.team = "herd";
            this.baseTeam = this.team;
            if (Math.random() <= 0.49)
            {
                this.tunskTurn = 1;
            }
            else
            {
                this.tunskTurn = -1
            }
            this.tameREQ = 2;

            if (this.alpha == true)
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 4;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 3.1;
                this.rangeOfSight = 350; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 10;
                this.sizeRadius = 5;
                this.negateArmour = 0;
                this.attackWait = 0.01;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 2.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
            else
            {
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = 3;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 2.75;
                this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                this.engagementRadius = 10;
                this.sizeRadius = 4;
                this.negateArmour = 0;
                this.attackWait = 0.01;
                this.contraPlayer = false;

                //alpha has a larger size body and skills.
                this.alphaSize = 1.7; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;
            }
        }
        else if (this.type == "Torper")
        {
            this.damageFrame = "automatic";
            this.effect = "poisonIII";
            this.team = "torperia";
            this.flying = true;
            this.baseTeam = this.team;

            if (this.alpha == true)
            {
                this.tameREQ = 25;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 10) + 9;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5.5 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 675; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = Math.PI / 10; // 0.01 is a standard turn speed.
                this.engagementRadius = 36;
                this.sizeRadius = 16;
                this.negateArmour = 7;
                this.attackWait = 0.7 + (Math.floor(Math.random() * 5) / 10);

                //alpha has a larger size body and skills.
                this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 18; //was - 10
                this.xAdjustment = 24; //was 30
            }
            else
            {
                //STATS (non-variable)
                this.tameREQ = 22;
                this.magicalResistance = 0;
                this.heatResistance = -1;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = Math.floor(Math.random() * 7) + 7;
                this.health = this.healthMAX;
                this.armour = 0;
                this.speed = 5 + (Math.floor(Math.random() * 8) / 10);
                this.rangeOfSight = 550; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = Math.PI / 10; // 0.01 is a standard turn speed.
                this.engagementRadius = 30;
                this.sizeRadius = 12;
                this.negateArmour = 4;
                this.attackWait = 0.7 + (Math.floor(Math.random() * 5) / 10);

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
        }
        else if (this.type == "Soldier" && this.ID == "Doppelganger" || this.type == "Soldier" && this.ID == "Unbound Doppelganger") //A being that is the spiritual and material antithesis of the player.
        {
            this.damageFrame = "automatic";
            this.ultra.faction = "outlander";
            if (this.ID == "Doppelganger")
            {
                this.team = "player";
                this.baseTeam = "player";
            }
            else
            {
                this.team = "shapeshifter";
                this.baseTeam = "shapeshifter";
            }
            if (this.ID == "Assassin")
            {
                this.resistances.push("blinded", "night");
                this.assassJump = Math.round(Math.random());
            }

            this.tamable = false;

            //STATS (non-variable)
            this.rotation = Math.random();
            this.ranged = player.weaponIsRanged;
            this.con = player.getConstitution();
            this.outfit = player.outfitEquipped;
            this.ultra.weapon = ["none", [0, 0]];
            this.ultra.ranged = [0, 0, 0, 0, 0, 0, 0, 0, 0];
            if (player.spell != "none")
            {
                this.weapon = player.spell.ID;
                this.ultra.weapon[1][0] = 0;
                this.attackWait = player.spell.cooldown;
                if (player.spell.spellRange == "Near")
                {
                    this.engagementRadius = 24;
                }
                else
                {
                    this.engagementRadius = 1000;
                }
                this.negateArmour = 0;
            }
            else if (player.weaponEquipped != "none")
            {
                this.weapon = "none";
                this.ultra.weapon[1][0] = 0;
                this.attackWait = 1;
                this.engagementRadius = 24;
                this.negateArmour = 0;
            }
            this.ultra.weapon[1][1] = 0;
            this.ultra.weapon[0] = this.weapon;
            this.heatResistance = player.heatResistance;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = this.con * 4 + 0.1;
            this.health = this.healthMAX;
            this.armour = (player.naturalArmour + player.armour);
            this.speed = ((1 / player.freeze) + ((1 / 250) * player.getDexterity() / player.freeze)) * (TTD / 16.75);
            this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.25; // 0.01 is a standard turn speed.
            this.sizeRadius = 10;
            this.swimStage = 0;
            this.swimSpeed = 0.6 * this.speed;
            this.CNX = player.getConcentration(); //magic ability
            this.magicalResistance = player.magicalResistanceTotal;

            if (player.loadedAmmo != "none")
            {
                this.ultra.ranged[1] = player.loadedAmmo.type;
                this.ultra.ranged[2] = player.weapon.speed;
                this.ultra.ranged[3] = player.weapon.range;
                this.ultra.ranged[4] = player.weapon.negateArmour;
                this.ultra.ranged[5] = player.loadedAmmo.damage;
                this.ultra.ranged[6] = player.loadedAmmo.magicalDamage;
                this.ultra.ranged[7] = player.loadedAmmo.ability;
                this.ultra.ranged[8] = player.weapon.rate;
            }
        }
        else if (this.type == "Person")
        {
            this.damageFrame = "automatic";
            this.customEXP = false;
            this.team = this.ultra.faction;
            this.baseTeam = this.team;
            this.tamable = false;

            //Personality effected STATS
            if (this.ultra.personality == "scared")
            {
                this.grudge = 40;
            }
            else if (this.ultra.personality == "violent")
            {
                this.grudge = 20;
            }
            else if (this.ultra.personality == "calculated")
            {
                this.grudge = 10;
            }

            //STATS (non-variable)
            if (typeof(this.ultra.rot) != "undefined")
            {
                this.rotation = this.ultra.rot;
            }
            this.ranged = this.ultra.ranged[0];
            this.outfit = this.ultra.outfit[0];
            this.weapon = this.ultra.weapon[0];
            this.magicalResistance = 0;
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = (Math.floor(Math.random() * 4) * 4) + 0.1;
            this.health = this.healthMAX;
            this.armour = this.ultra.outfit[1];
            this.speed = 0.65 + (Math.floor(Math.random() * 12) / 10);
            this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.15; // 0.01 is a standard turn speed.
            this.engagementRadius = 30 + this.ultra.weapon[3];
            this.sizeRadius = 10;
            this.negateArmour = this.ultra.weapon[2];
            this.attackWait = this.ultra.weapon[4];
            this.swimStage = 0;
            this.swimSpeed = 0.6 * this.speed;
            if (typeof(this.ultra) != "undefined")
            {
                if (typeof(this.ultra.CNX) != "undefined")
                {
                    this.CNX = this.ultra.CNX; //magic ability
                }
            }
            this.magicalResistance = 0;
            if (typeof(this.ultra) != "undefined")
            {
                if (typeof(this.ultra.MR) != "undefined")
                {
                    this.magicalResistance = this.ultra.MR; //magic ability
                }
            }

            //this multiplies the draw image skew numbers by 1 so that it stays the same
            this.alphaSize = 1;
            // this is the adjustment the alpha type of Etyr needs to be centered.
            this.yAdjustment = 0;
            this.xAdjustment = 0;

        }
        else if (this.type == "Soldier")
        {
            this.damageFrame = "automatic";
            this.team = this.ultra.faction;
            this.baseTeam = this.team;
            this.tamable = false;

            //STATS (non-variable)
            if (typeof(this.ultra.rot) != "undefined")
            {
                this.rotation = this.ultra.rot;
            }
            this.ranged = this.ultra.ranged[0];
            this.con = this.ultra.con;
            this.outfit = this.ultra.outfit[0];
            this.weapon = this.ultra.weapon[0];
            this.heatResistance = 0;
            this.attackStyle = "chunked";
            this.attackRate = 0;  //this is for rapid style combat only.
            this.healthMAX = this.con * 4 + 0.1;
            this.health = this.healthMAX;
            this.armour = this.ultra.outfit[1];
            this.speed = this.ultra.speed;
            this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
            this.rotationSpeed = 0.15; // 0.01 is a standard turn speed.
            this.engagementRadius = 30 + this.ultra.weapon[3];
            this.sizeRadius = 10;
            this.negateArmour = this.ultra.weapon[2];
            this.attackWait = this.ultra.weapon[4];
            this.swimStage = 0;
            this.swimSpeed = 0.6 * this.speed;
            if (typeof(this.ultra) != "undefined")
            {
                if (typeof(this.ultra.CNX) != "undefined")
                {
                    this.CNX = this.ultra.CNX; //magic ability
                }
            }
            this.magicalResistance = 0;
            if (typeof(this.ultra) != "undefined")
            {
                if (typeof(this.ultra.MR) != "undefined")
                {
                    this.magicalResistance = this.ultra.MR; //magic ability
                }
            }

            //special cases
            if (this.ID == "Rafaard the Looter") //petrified looter for a quest...
            {
                this.petrified = true;
                this.health = 0;
                this.rotation = -2/3 * Math.PI;
                this.newRotation = -2/3 * Math.PI;
            }
        }
    };
    this.designUnits();

    //This makes the AI draw themselves to the world and alters the AI's variable STATS and also runs all of the AI functions.
    this.activateUnits = function()
    {
        var self = this;
        this.costumeEngine = function(maxcostume, framerate, bothwaysBool, alternateVar)
        {
            if (!this.petrified)
            {
                if (alternateVar == true) //ALT
                {
                    if (this.resetFrameOrder2 == true)
                    {
                        this.frameOrder2 = "positive"; // this sets the animation frame cycling direction to positive when the attack is initialized.
                        this.resetFrameOrder2 = false; // this keeps the reset from messing up reverse swings that may come after the primary positive direction attack.
                    }
                    if (this.frameOrder2 == "positive")
                    {
                        self.costume2 += (framerate * timeSpeed / this.timeResistance) * TTD / (16.75 - 0.1 * self.speed); //This is the part that actually changes the frame in the positive direction.
                        if (self.costume2 >= maxcostume)
                        {
                            self.costume2 = maxcostume - 0.001;

                            if (this.attacking && this.damageFrame == "automatic")
                            {
                                this.finalAttackCostume = true;
                            }

                            if (bothwaysBool == false) // if the animation is one way it ends here...
                            {
                                self.costume2 = 0;
                                if (this.attacking)
                                {
                                    this.timeBetweenAttacks = new Date().getTime();
                                }
                            }
                            else if (bothwaysBool == true) //but if it is two directional it swings back to frame zero.
                            {
                                this.frameOrder2 = "negative";
                            }
                        }
                    }

                    if (this.frameOrder2 == "negative") //This stuff is for the swing back.
                    {
                        self.costume2 -= (framerate * timeSpeed / this.timeResistance) * TTD / (16.75 - 0.1 * self.speed); //This is the part that actually changes the frame in the positive direction.
                        if (self.costume2 <= 0)
                        {
                            if (this.attacking)
                            {
                                this.timeBetweenAttacks = new Date().getTime();
                            }
                            self.costume2 = 0 + 0.001;
                            this.resetFrameOrder2 = true; //This variable resets the order of the frames so that it always starts cycling through the animations in the positive direction.
                        }
                    }
                }
                else //NORMAL
                {
                    if (this.resetFrameOrder == true)
                    {
                        this.frameOrder = "positive"; // this sets the animation frame cycling direction to positive when the attack is initialized.
                        this.resetFrameOrder = false; // this keeps the reset from messing up reverse swings that may come after the primary positive direction attack.
                    }
                    if (this.frameOrder == "positive")
                    {
                        self.costume += (framerate * timeSpeed / this.timeResistance) * TTD / (16.75 - 0.1 * self.speed); //This is the part that actually changes the frame in the positive direction.
                        if (self.costume >= maxcostume)
                        {
                            self.costume = maxcostume - 0.001;

                            if (this.attacking && this.damageFrame == "automatic" && !this.doubleFrame)
                            {
                                this.finalAttackCostume = true;
                            }

                            if (bothwaysBool == false) // if the animation is one way it ends here...
                            {
                                self.costume = 0;
                                if (this.attacking && !this.doubleFrame)
                                {
                                    this.timeBetweenAttacks = new Date().getTime();
                                }
                            }
                            else if (bothwaysBool == true) //but if it is two directional it swings back to frame zero.
                            {
                                this.frameOrder = "negative";
                            }
                        }
                    }

                    if (this.frameOrder == "negative") //This stuff is for the swing back.
                    {
                        self.costume -= (framerate * timeSpeed / this.timeResistance) * TTD / (16.75 - 0.1 * self.speed); //This is the part that actually changes the frame in the positive direction.
                        if (self.costume <= 0)
                        {
                            if (this.attacking && !this.doubleFrame)
                            {
                                this.timeBetweenAttacks = new Date().getTime();
                            }
                            self.costume = 0 + 0.001;
                            this.resetFrameOrder = true; //This variable resets the order of the frames so that it always starts cycling through the animations in the positive direction.
                        }
                    }
                }
            }
        };

        //UNITS BY TYPE (this includes all of the variable unit design as well as animations and AI)
        //FOUX
        if (this.type == "Foux")
        {
            //Set Drops and experience
            this.drops = [];

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(1, false);

            //AI
            if (this.alive == true)
            {
                if (this.ID == "Duende")
                {
                    if (this.aiTimer > 4)
                    {
                        ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this), 1);
                    }
                }
            }
        }
        //ETYR
        if (this.type == "Etyr")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 23 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (23 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("etyrHide", this.X, this.Y), 2], [new Item("rawEtyrFlesh", this.X, this.Y), 2]];
            }
            else
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 16 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (16 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("etyrHide", this.X, this.Y), 1], [new Item("rawEtyrFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(600, "very");
            }
            else
            {
                this.rangeOfSightCalculator(450, "very");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(6, 1);
                }
                else
                {
                    this.Attack(3, 1);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.callForNearbyHelpFromType(350, "Etyr");
                this.visibleSight();

                this.friendDecider();
                this.targeting();
                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.1, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.10, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 131, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 56, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 206, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 131, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 283, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 56, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(theCrack, 359, 22, 51, 33, -1/2 * 52 - this.xAdjustment, -1/2 * 33 - this.yAdjustment, 51 * this.alphaSize, 33 * this.alphaSize);
            }

        }
        //WALRUS
        if (this.type == "Walrus")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 60 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 244 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    (this.experience = 244 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("elderWalrusHide", this.X, this.Y), 1], [new Item("rawWalrusFlesh", this.X, this.Y), 10], [new Item("blubber", this.X, this.Y), 8], [new Item("elderWalrusTusks", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 14 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 40 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    (this.experience = 40 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("walrusHide", this.X, this.Y), 1], [new Item("rawWalrusFlesh", this.X, this.Y), 4], [new Item("blubber", this.X, this.Y), 2], [new Item("walrusTusks", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(330, "very");
            }
            else
            {
                this.rangeOfSightCalculator(250, "very");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(45, 33);
                    this.callForNearbyHelpFromType(160, "Walrus");
                }
                else
                {
                    this.Attack(14, 4);
                    this.callForNearbyHelpFromType(100, "Walrus");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();

                this.friendDecider();
                this.targeting();
                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.05, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(2, 0.03, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polyPNG, 871, 695, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polyPNG, 871, 695, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                    }
                }
                else if (theCostume >= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polyPNG, 798, 643, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polyPNG, 713, 687, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polyPNG, 676, 624, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
            }
        }
        //Tilk
        if (this.type == "Tilk")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4.5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 46 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (46 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawTilkFlesh", this.X, this.Y), 3], [new Item("lrgTilkTentacle", this.X, this.Y), 1 + Math.floor(Math.random() * 3)]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 136 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (136 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawTilkFlesh", this.X, this.Y), 14], [new Item("giantTilkTentacle", this.X, this.Y), 1 + Math.floor(Math.random() * 3)]];
            }
            else
            {
                if (Math.max(0, 2.5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 26 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 26 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawTilkFlesh", this.X, this.Y), 2], [new Item("tilkTentacle", this.X, this.Y), 1 + Math.floor(Math.random() * 3)]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1000, "mildly");
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(1100, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(900, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(3, 1.5);
                    this.callForNearbyHelpFromType(1200, "Tilk");
                }
                if (this.alpha == "massive")
                {
                    this.Attack(7, 4);
                    this.callForNearbyHelpFromType(1200, "Tilk");
                }
                else
                {
                    this.Attack(2, 0.5);
                    this.callForNearbyHelpFromType(1200, "Tilk");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

            }
            else
            {
                //do stuff when a tilk dies...
                if (this.doOnDeathOnce == true)
                {
                    //track Deaths Of Certain Non-Unique Units During Certain Quests

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.1, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(2, 0.1, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 896, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 762, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 620, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 478, imgY: 12, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                    else
                    {
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 896, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 762, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 620, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 478, imgY: 12, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 896, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 762, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 620, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 478, imgY: 12, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                    else
                    {
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 758, imgY: 130, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 340, imgY: 125, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 896, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 762, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 620, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 478, imgY: 12, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                    else
                    {
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 896, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 762, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 620, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 478, imgY: 12, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 896, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 762, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 620, imgY: 14, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 478, imgY: 12, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                    else
                    {
                        this.flashAnimate(40, this.rotation, 1, [{image: theCrack, imgX: 485, imgY: 129, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}, {image: theCrack, imgX: 636, imgY: 130, portionW: 95, portionH: 94, adjX: -1 / 2 * 95 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 94 * this.alphaSize - this.yAdjustment, width: 95 * this.alphaSize, height: 94 * this.alphaSize}]);
                    }
                }
            }
            else
            {
                this.drawUnit(theCrack, 896, 130, 95, 94, -1/2 * 95 * this.alphaSize - this.xAdjustment, -1/2 * 94 * this.alphaSize - this.yAdjustment, 95 * this.alphaSize, 94 * this.alphaSize);
            }

        }

        //SPITTING MUD FLY
        if (this.type == "SpittingMudFly")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4.5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawMudflyFlesh", this.X, this.Y), 2]];
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawMudflyFlesh", this.X, this.Y), 9]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else
            {
                if (Math.max(0, 2.5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawMudflyFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(900, false);
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(1250, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(550, false);
            }
            else
            {
                this.rangeOfSightCalculator(800, false);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    //this.Attack(3, 1.5);
                    this.callForNearbyHelpFromType(900, "SpittingMudFly");
                }
                else if (this.alpha == "giant")
                {
                    //this.Attack(3, 1.5);
                    this.callForNearbyHelpFromType(1250, "SpittingMudFly");
                }
                else if (this.alpha == "baby")
                {
                    //this.Attack(3, 1.5);
                    this.callForNearbyHelpFromType(550, "SpittingMudFly");
                }
                else
                {
                    //this.Attack(2, 0.5);
                    this.callForNearbyHelpFromType(800, "SpittingMudFly");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.attacking = true;
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        if (this.DTP() > 1/2 * this.rangeOfSight)
                        {
                            this.speed = this.keepSpeed * 0.75;
                            this.pointTowardsPlayer();
                            this.moveInRelationToPlayer();
                        }
                        else if (this.DTP() <= 180)
                        {
                            this.speed = this.keepSpeed * 1.25;
                            this.timeBetweenAttacks = new Date().getTime();
                            this.pointAwayFromPlayer();
                            this.moveInRelationToPlayer();
                        }
                        else
                        {
                            this.speed = this.keepSpeed;
                            this.pointTowardsPlayer();
                        }
                    }
                }
                else if (this.target != "none")
                {
                    this.attacking = true;
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        if (this.DTU(this.target) > 1/2 * this.rangeOfSight)
                        {
                            this.speed = this.keepSpeed * 0.75;
                            this.pointTowards(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                        else if (this.DTU(this.target) <= 400)
                        {
                            this.speed = this.keepSpeed * 1.25;
                            this.timeBetweenAttacks = new Date().getTime();
                            this.pointAway(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                        else
                        {
                            this.speed = this.keepSpeed;
                            this.pointTowards(this.target);
                        }
                    }
                }

            }
            else
            {
                //do stuff when a mud fly dies...
                if (this.doOnDeathOnce == true)
                {
                    //track Deaths Of Certain Non-Unique Units During Certain Quests

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                {
                    this.costumeEngine(2, 0.05, false);
                }
                else
                {
                    theCostume = 0;
                    this.other = true;
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    this.flashAnimate(25, this.rotation, 1, [{image: lodo, imgX: 139, imgY: 46, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 140, imgY: 68, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 139, imgY: 117, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 141, imgY: 94, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}]);
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        if (this.other == true)
                        {
                            magicList.push(new Magic({ID: "flySpit"}, false, false, this));
                            this.other = false;
                        }
                        this.flashAnimate(25, this.rotation, 1, [{image: lodo, imgX: 174, imgY: 46, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 175, imgY: 68, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 176, imgY: 94, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 174, imgY: 116, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}]);
                    }
                    else
                    {
                        this.flashAnimate(25, this.rotation, 1, [{image: lodo, imgX: 139, imgY: 46, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 140, imgY: 68, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 139, imgY: 117, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}, {image: lodo, imgX: 141, imgY: 94, portionW: 18, portionH: 17, adjX: -1 / 2 * 18 * 2 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 17 * 2 * this.alphaSize - this.yAdjustment, width: 18 * 2 * this.alphaSize, height: 17 * 2 * this.alphaSize}]);
                    }
                }
            }
            else
            {
                this.drawUnit(lodo, 211, 46, 18, 17, -1/2 * 18 * this.alphaSize * 2 - this.xAdjustment, -1/2 * 17 * this.alphaSize * 2 - this.yAdjustment, 18 * this.alphaSize * 2, 17 * this.alphaSize * 2);
            }

        }

        //FRICH
        if (this.type == "Frich")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 15 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (15 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("frichPelt", this.X, this.Y), 1], [new Item("rawFrichFlesh", this.X, this.Y), 1]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 33 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (33 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("frichPelt", this.X, this.Y), 4], [new Item("rawFrichFlesh", this.X, this.Y), 4]];
            }
            else
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 11 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 11 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("frichPelt", this.X, this.Y), 1], [new Item("rawFrichFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(431, "mildly");
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(525, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(400, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(3, 1);
                    this.callForNearbyHelpFromType(381, "Frich");
                }
                if (this.alpha == "massive")
                {
                    this.Attack(5, 2);
                    this.callForNearbyHelpFromType(505, "Frich");
                }
                else
                {
                    this.Attack(1, 1);
                    this.callForNearbyHelpFromType(350, "Frich");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }
            else
            {
                //do stuff when a frich dies...
                if (this.doOnDeathOnce == true)
                {
                    //track Deaths Of Certain Non-Unique Units During Certain Quests
                    if (this.alpha == "massive")
                    {
                        quests.huntingWagerKillCount += 1;
                    }

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.075, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed))
                    {
                        this.costumeEngine(2, 0.03, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 1529, 3, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 1290, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
                else if (theCostume >= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 1641, 3, 83, 33, -55 - this.xAdjustment, -18 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 1402, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(verse, 1742, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
            }

        }

        //MOUNTAIN FRICH
        if (this.type == "MountainFrich")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 58 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (58 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("mountainFrichPelt", this.X, this.Y), 2], [new Item("rawMountainFrichFlesh", this.X, this.Y), 2]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 90 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (90 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("mountainFrichPelt", this.X, this.Y), 4], [new Item("rawMountainFrichFlesh", this.X, this.Y), 4]];
            }
            else
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 41 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 41 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("mountainFrichPelt", this.X, this.Y), 1], [new Item("rawMountainFrichFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(625, "mildly");
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(725, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(525, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(7, 3);
                    this.callForNearbyHelpFromType(600, "MountainFrich");
                }
                if (this.alpha == "massive")
                {
                    this.Attack(10, 4);
                    this.callForNearbyHelpFromType(700, "MountainFrich");
                }
                else
                {
                    this.Attack(5, 2);
                    this.callForNearbyHelpFromType(500, "MountainFrich");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }
            else
            {
                //do stuff when a frich dies...
                if (this.doOnDeathOnce == true)
                {
                    //track Deaths Of Certain Non-Unique Units During Certain Quests


                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.075, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(2, 0.03, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1529, 3, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1290, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
                else if (theCostume >= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1641, 3, 83, 33, -55 - this.xAdjustment, -18 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1402, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 1742, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
            }

        }
        //ANCIENT BEING
        if (this.type == "AncientBeing")
        {
            //Set Drops and experience
            if (Math.max(0, 80 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 2017 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (2017 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            if (this.ancientSoulNum > 0)
            {
                this.drops = [[new Item("ancientFragment", this.X, this.Y), 6], [new Item("soul", this.X, this.Y), this.ancientSoulNum]];
            }
            else
            {
                this.drops = [[new Item("ancientFragment", this.X, this.Y), 6]];
            }


            this.rangeOfSightCalculator(4000, false);


            //AI
            if (this.alive == true)
            {

                this.Attack(0, 0);

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.aiTimer >= 120 && this.summonsDisp > 0)
                {
                    var rnd = Math.random();

                    if (rnd > 0.79)
                    {
                        if (this.summonsDisp >= 3)
                        {
                            this.summonsDisp -= 3;
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            this.aiTimer = 0;
                        }
                        else if (this.summonsDisp >= 2)
                        {
                            this.summonsDisp -= 2;
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            this.aiTimer = 0;
                        }
                        else
                        {
                            this.summonsDisp = 0;
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            this.aiTimer = 0;
                        }
                    }
                    else if (rnd > 0.4)
                    {
                        if (this.summonsDisp >= 2)
                        {
                            this.summonsDisp -= 2;
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            this.aiTimer = 0;
                        }
                        else
                        {
                            this.summonsDisp = 0;
                            magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                            this.aiTimer = 0;
                        }
                    }
                    else
                    {
                        this.summonsDisp -= 1;
                        magicList.push(new Magic({ID: "ancientRift"}, false, "AncientCrawler", this));
                        this.aiTimer = 0;
                    }
                }

                if (this.target == player)
                {
                    this.pointTowardsPlayer();

                    if (this.aiAttackingTimer > 19) //if the target has been engaged in combat with this for 19 seconds without this teleporting then this will gain an attack rate boost and an even higher boost if at or below half health (though not when its health is full).
                    {
                        if (this.health <= 55)
                        {
                            this.attackWait = 2;
                        }
                        else if (this.health < this.healthMAX)
                        {
                            this.attackWait = 2.5;
                        }
                        else
                        {
                            this.attackWait = 3;
                        }
                    }
                    else //if this is at or below 17 health it will gain a slight boost to attack rate.
                    {
                        if (this.health <= 17)
                        {
                            this.teleportRate = 20;
                            this.attackWait = 2.5;
                        }
                        if (this.health <= 38)
                        {
                            this.teleportRate = 30;
                            this.attackWait = 3;
                        }
                        else
                        {
                            this.teleportRate = 40;
                            this.attackWait = 3;
                        }
                    }

                    if (this.DTP() > 520)
                    {
                        this.attackType = "fireball";
                        if (this.aiAttackingTimer > this.teleportRate) //after 40 seconds this teleports into a short range of the target if injured, and potentially a longer ranged position from the target if not.
                        {
                            this.aiAttackingTimer = 0;
                            magicList.push(new Magic({ID: "shadowFog"}, false, false, this));
                            if (this.health <= 70)
                            {
                                this.X = X + (250 - Math.random() * 500);
                                this.Y = Y + (250 - Math.random() * 500);
                            }
                            else
                            {
                                this.X = X + (250 - Math.random() * 500) * 6;
                                this.Y = Y + (250 - Math.random() * 500) * 6;
                            }
                            magicList.push(new Magic({ID: "shadowFog"}, false, "short", this));
                        }
                    }
                    else if (this.DTP() < 400)
                    {
                        this.attackType = "souldrain";
                        if (this.aiAttackingTimer > this.teleportRate) //after 40 seconds this teleports between short-long range of the target
                        {
                            this.aiAttackingTimer = 0;
                            magicList.push(new Magic({ID: "shadowFog"}, false, false, this));
                            this.X = X + (777 - Math.random() * 1554);
                            this.Y = Y + (777 - Math.random() * 1554);
                            magicList.push(new Magic({ID: "shadowFog"}, false, "short", this));
                        }
                    }
                    else //if the target is in the space between attack zones this engages in a quick teleport
                    {
                        if (this.aiAttackingTimer > (this.teleportRate + 1))
                        {
                            this.aiAttackingTimer = this.teleportRate - 11;
                            magicList.push(new Magic({ID: "shadowFog"}, false, false, this));
                            this.X += (160 - Math.random() * 320);
                            this.Y += (160 - Math.random() * 320);
                            magicList.push(new Magic({ID: "shadowFog"}, false, "short", this));
                        }
                    }
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);

                    if (this.aiAttackingTimer > 19) //if the target has been engaged in combat with this for 19 seconds without this teleporting then this will gain an attack rate boost and an even higher boost if at or below half health (though not when its health is full).
                    {
                        if (this.health <= 55)
                        {
                            this.attackWait = 2;
                        }
                        else if (this.health < this.healthMAX)
                        {
                            this.attackWait = 2.5;
                        }
                        else
                        {
                            this.attackWait = 3;
                        }
                    }
                    else //if this is at or below 17 health it will gain a slight boost to attack rate.
                    {
                        if (this.health <= 17)
                        {
                            this.teleportRate = 20;
                            this.attackWait = 2.5;
                        }
                        if (this.health <= 38)
                        {
                            this.teleportRate = 30;
                            this.attackWait = 3;
                        }
                        else
                        {
                            this.teleportRate = 40;
                            this.attackWait = 3;
                        }
                    }

                    if (this.DTU(this.target) > 520)
                    {
                        this.attackType = "fireball";
                        if (this.aiAttackingTimer > this.teleportRate) //after 40 seconds this teleports into a short range of the target if injured, and potentially a longer ranged position from the target if not.
                        {
                            this.aiAttackingTimer = 0;
                            magicList.push(new Magic({ID: "shadowFog"}, false, false, this));
                            if (this.health <= 70)
                            {
                                this.X = this.target.X + (250 - Math.random() * 500);
                                this.Y = this.target.Y + (250 - Math.random() * 500);
                            }
                            else
                            {
                                this.X = this.target.X + (250 - Math.random() * 500) * 6;
                                this.Y = this.target.Y + (250 - Math.random() * 500) * 6;
                            }
                            magicList.push(new Magic({ID: "shadowFog"}, false, "short", this));
                        }
                    }
                    else if (this.DTU(this.target) < 400)
                    {
                        this.attackType = "souldrain";
                        if (this.aiAttackingTimer > this.teleportRate) //after 40 seconds this teleports between short-long range of the target
                        {
                            this.aiAttackingTimer = 0;
                            magicList.push(new Magic({ID: "shadowFog"}, false, false, this));
                            this.X = this.target.X + (777 - Math.random() * 1554);
                            this.Y = this.target.Y + (777 - Math.random() * 1554);
                            magicList.push(new Magic({ID: "shadowFog"}, false, "short", this));
                        }
                    }
                    else //if the target is in the space between attack zones this engages in a quick teleport
                    {
                        if (this.aiAttackingTimer > (this.teleportRate + 1))
                        {
                            this.aiAttackingTimer = this.teleportRate - 11;
                            magicList.push(new Magic({ID: "shadowFog"}, false, false, this));
                            this.X += (160 - Math.random() * 320);
                            this.Y += (160 - Math.random() * 320);
                            magicList.push(new Magic({ID: "shadowFog"}, false, "short", this));
                        }
                    }
                }
            }
            else
            {
                //do stuff when an ancient being dies...
                if (this.doOnDeathOnce == true)
                {
                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (this.attackType == "fireball")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.costumeEngine(12, 0.10, false);
                        }
                    }
                    else if (this.attackType == "souldrain")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 3000))
                        {
                            this.costumeEngine(12, 0.12, false);
                        }
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.doSoulSuck = true;
                        this.drawUnit(oldverse, 1567, 310, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1567, 310, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        if (this.attackType == "fireball")
                        {
                            this.drawUnit(oldverse, 1448, 188, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                        }
                        else if (this.attackType == "souldrain")
                        {
                            this.drawUnit(oldverse, 1448, 188, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        if (this.attackType == "fireball")
                        {
                            this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                        }
                        else if (this.attackType == "souldrain")
                        {
                            this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attackType == "fireball")
                    {
                        if (this.doSoulSuck)
                        {
                            magicList.push(new Magic({ID: "flamingMissiles"}, false, "left", this));
                            this.doSoulSuck = false;
                        }
                        this.drawUnit(oldverse, 1754, 301, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1882, 306, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1754, 301, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {

                        if (this.doSoulSuck)
                        {
                            if (this.target == player)
                            {
                                if (player.magicalResistanceTotal < 20)
                                {
                                    if (player.constitution > 0)
                                    {
                                        magicList.push(new Magic({ID: "soulOrb"}, true, false, this));
                                        player.constitution -= 1;
                                        player.will -= 20;
                                        player.energy -= 5;
                                        this.ancientSoulNum += 1;
                                    }
                                    else
                                    {
                                        player.health = -256;
                                    }
                                }
                            }
                            else if (this.target != "none")
                            {
                                magicList.push(new Magic({ID: "soulOrb"}, false, this.target, this));
                                this.target.health = Math.min(this.target.health, this.target.health - (40 - this.target.magicalResistance));
                            }
                            this.doSoulSuck = false;
                        }
                        this.drawUnit(oldverse, 1882, 306, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    this.doSoulSuck = true;
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1448, 188, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attackType == "fireball")
                    {
                        if (this.doSoulSuck)
                        {
                            magicList.push(new Magic({ID: "flamingMissiles"}, false, "right", this));
                            this.doSoulSuck = false;
                        }
                        this.drawUnit(oldverse, 1813, 302, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1689, 300, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1813, 302, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1689, 300, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume <= 10)
                {
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1633, 309, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1689, 300, 54, 91, -1/2 * 54 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 54 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume >= 11)
                {
                    if (this.attackType == "fireball")
                    {
                        this.drawUnit(oldverse, 1448, 188, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                    else if (this.attackType == "souldrain")
                    {
                        this.drawUnit(oldverse, 1448, 188, 51, 80, -1/2 * 51 * this.alphaSize - this.xAdjustment, -1/2 * 80 * this.alphaSize - this.yAdjustment, 51 * this.alphaSize, 80 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 1823, 182, 41, 30, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 30 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 30 * this.alphaSize);
            }

        }
        //PELCRID
        if (this.type == "Pelcrid")
        {
            //Set Drops and experience

                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 13 * this.alphaSize * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (13 * this.alphaSize * ((player.getIntelligence() / 50) + 1)) / 10;
                }

            if (this.alphaSize > 5)
            {
                this.drops = [[new Item("pelcridOozeRemains", this.X, this.Y), Math.floor(this.alphaSize / 5)]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(245 + 15 * this.alphaSize, true);

            //AI
            if (this.alive == true)
            {
                //pelcrids grow when in contact with fire
                if (new Date().getTime() - this.burningTime <= 9000 && this.other < new Date().getTime())
                {
                    this.alphaSize = Math.min(20, this.alphaSize + 1);
                    this.burningTime = 0;

                    //stats level up!
                    this.healthMAX += 3;
                    this.health = this.healthMAX;
                    this.armour += 0.5;
                    this.keepSpeed += 0.02;
                    this.speed += 0.02;
                    this.engagementRadius += 6.75;
                    this.sizeRadius += 2.05;
                    this.negateArmour += 0.45;

                    //this causes a delay so that level ups do not happen multiple times in the same event.
                    this.other = new Date().getTime() + 3000;
                }
                else if (new Date().getTime() - this.frozenTime <= 4500 && this.other < new Date().getTime()) //ice hurts pelcrids
                {
                    this.frozenTime = 0;
                    this.health = Math.max(0, this.health - 12.5);

                    //this causes a delay so that damage by ice does not happen multiple times in the same event.
                    this.other = new Date().getTime() + 2000;
                }

                this.Attack(this.alphaSize, 2.35 + 0.9 * this.alphaSize);
                this.callForNearbyHelpFromType(1245 + 15 * this.alphaSize, "Pelcrid");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

            }
            else
            {
                //do stuff when a pelcrid dies...
                if (this.doOnDeathOnce == true)
                {

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS
            var szx = 1.7;
            if (this.alive == true)
            {
                if (!this.moving && !this.attacking) //If not moving and not attacking initiate standing animation...
                {
                    this.costume = 0;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.10, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.15, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 560, 92, 43, 28, -1/2 * 43 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 28 * (this.alphaSize / 5) * szx - this.yAdjustment, 43 * (this.alphaSize / 5) * szx, 28 * (this.alphaSize / 5) * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 560, 92, 43, 28, -1/2 * 43 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 28 * (this.alphaSize / 5) * szx - this.yAdjustment, 43 * (this.alphaSize / 5) * szx, 28 * (this.alphaSize / 5) * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 450, 89, 43, 28, -1/2 * 43 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 28 * (this.alphaSize / 5) * szx - this.yAdjustment, 43 * (this.alphaSize / 5) * szx, 28 * (this.alphaSize / 5) * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 454, 89, 43, 28, -1/2 * 43 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 28 * (this.alphaSize / 5) * szx - this.yAdjustment, 43 * (this.alphaSize / 5) * szx, 28 * (this.alphaSize / 5) * szx);
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 494, 87, 56, 29, -1/2 * 56 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 29 * (this.alphaSize / 5) * szx - this.yAdjustment, 56 * (this.alphaSize / 5) * szx, 29 * (this.alphaSize / 5) * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 560, 92, 43, 28, -1/2 * 43 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 28 * (this.alphaSize / 5) * szx - this.yAdjustment, 43 * (this.alphaSize / 5) * szx, 28 * (this.alphaSize / 5) * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 606, 94, 38, 24, -1/2 * 38 * (this.alphaSize / 5) * szx - this.xAdjustment, -1/2 * 24 * (this.alphaSize / 5) * szx - this.yAdjustment, 38 * (this.alphaSize / 5) * szx, 24 * (this.alphaSize / 5) * szx);
            }
        }
        //OOLID
        if (this.type == "Oolid")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (20 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("medOolidOozeRemains", this.X, this.Y), 1]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 30 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (30 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("lrgOolidOozeRemains", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("smlOolidOozeRemains", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, "unrelenting");
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(700, "unrelenting");
            }
            else
            {
                this.rangeOfSightCalculator(700, "unrelenting");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(8, 6);
                    this.callForNearbyHelpFromType(1000, "Oolid");
                }
                if (this.alpha == "massive")
                {
                    this.Attack(12, 9);
                    this.callForNearbyHelpFromType(1000, "Oolid");
                }
                else
                {
                    this.Attack(4, 3);
                    this.callForNearbyHelpFromType(1000, "Oolid");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

            }
            else
            {
                //do stuff when a oolid dies...
                if (this.doOnDeathOnce == true)
                {

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (!this.moving && !this.attacking) //If not moving and not attacking initiate standing animation...
                {
                    this.costume = 0;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.10, true);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.15, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize, 1/2 * Math.PI);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize, 1/2 * Math.PI);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 5, 307, 40, 58, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 58 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 58 * this.alphaSize, 1/2 * Math.PI);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize * 1.08, 1/2 * Math.PI);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 65, 304, 40, 66, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 66 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 66 * this.alphaSize, 1/2 * Math.PI);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize * 1.16, 1/2 * Math.PI);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 29, 79, 40, 94, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 94 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 94 * this.alphaSize, 1/2 * Math.PI);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize * 1.24, 1/2 * Math.PI);
                    }
                }
            }
            else
            {
                //this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize);
            }
        }
        //GLUTID
        if (this.type == "Glutid")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 30 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (30 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("medGlutidOoze", this.X, this.Y), 1]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 50 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (50 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("lrgGlutidOoze", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 15 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 15 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("smlGlutidOoze", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(600, true);
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(600, true);
            }
            else
            {
                this.rangeOfSightCalculator(600, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(12, 8);
                    this.callForNearbyHelpFromType(860, "Glutid");
                }
                if (this.alpha == "massive")
                {
                    this.Attack(16, 12);
                    this.callForNearbyHelpFromType(860, "Glutid");
                }
                else
                {
                    this.Attack(8, 6);
                    this.callForNearbyHelpFromType(860, "Glutid");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

            }
            else
            {
                //do stuff when a oolid dies...
                if (this.doOnDeathOnce == true)
                {

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (!this.moving && !this.attacking) //If not moving and not attacking initiate standing animation...
                {
                    this.costume = 0;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.10, true);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.15, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.25, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    if (this.moving)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.25, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment -5 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.35, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.3, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment - 7.5 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.45, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.35, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment - 10 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.55, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.4, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment - 11.25 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.6, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.45, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 743, 260, 78, 49, -1/2 * 78 * this.alphaSize - this.xAdjustment + 3, -1/2 * 49 * this.alphaSize - this.yAdjustment, 78 * this.alphaSize, 49 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.5, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(theCrack, 372, 268, 40, 37, - (1/2 * 40 * this.alphaSize), - (1/2 * 37 * this.alphaSize), 40 * this.alphaSize, 37 * this.alphaSize);
            }
        }
        //Bacteria
        if (this.type == "Bacteria")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                //AI

                if (typeof(this.ultra) != "undefined")
                {
                    this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                }

            }
            else
            {
                this.health = this.healthMAX;
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (!this.moving && !this.attacking) //If not moving and not attacking initiate standing animation...
                {
                    this.costume = 0;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.10, true);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.15, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.25, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    if (this.moving)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.25, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment -5 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.35, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.3, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment - 7.5 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.45, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.35, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment - 10 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.55, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.4, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment - 11.25 * this.alphaSize, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.6, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.45, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theCrack, 743, 260, 78, 49, -1/2 * 78 * this.alphaSize - this.xAdjustment + 3, -1/2 * 49 * this.alphaSize - this.yAdjustment, 78 * this.alphaSize, 49 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 312, 266, 41, 39, -1/2 * 41 * this.alphaSize * 1.25 - this.xAdjustment + 3, -1/2 * 39 * this.alphaSize * 1.25 - this.yAdjustment, 41 * this.alphaSize * 1.25, 39 * this.alphaSize * 1.5, 1/2 * Math.PI);
                        this.drawUnit(theCrack, 372, 265, 41, 39, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 39 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
            }
            else
            {
                //this.drawUnit(theCrack, 38, 171, 38, 36, -1/2 * 38 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 38 * this.alphaSize, 36 * this.alphaSize);
            }
        }
        //ULGOY
        if (this.type == "Ulgoy")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 25 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 139 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (139 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 175 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 660 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (660 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 8 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (8 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
            }
            else
            {
                if (Math.max(0, 15 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 25 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 12 * ((player.getIntelligence() / 50) + 1) / 10;
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(350, false);
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(600, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(300, false);
            }
            else
            {
                this.rangeOfSightCalculator(300, false);
            }

            //AI
            if (this.alive == true)
            {
                //An ulgoy must never move from its origin point because it is a plant.
                this.X = this.plantedX;
                this.Y = this.plantedY;

                if (this.alpha == true)
                {
                    this.Attack(19, 9);
                }
                else if (this.alpha == "giant")
                {
                    this.Attack(125, 60);
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(4, 2);
                }
                else
                {
                    this.Attack(9, 4);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                }

                if (this.target == player)
                {
                    if (this.DTP() <= this.rangeOfSight)
                    {
                        this.modeRequest = "active";
                    }
                    else
                    {
                        this.modeRequest = "waiting";
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) <= this.rangeOfSight)
                    {
                        this.modeRequest = "active";
                    }
                    else
                    {
                        this.modeRequest = "waiting";
                    }
                }

            }
            else
            {
                //do stuff when a frich dies...
                if (this.doOnDeathOnce == true)
                {

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.modeRequest != this.mode) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.5, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(10, 0.20, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting" && this.modeRequest == "active")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        if (this.mode == "active" && this.modeRequest == "waiting")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }

                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 225, 457, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 225, 457, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        this.drawUnit(polpol, 225, 457, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 225, 457, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting" && this.modeRequest == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        if (this.mode == "active" && this.modeRequest == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        this.mode = this.modeRequest;
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 224, 506, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 224, 506, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 226, 537, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 226, 537, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 225, 568, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 225, 568, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 272, 434, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 272, 434, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 272, 469, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 272, 469, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 274, 499, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 274, 499, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polpol, 272, 524, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        this.drawUnit(polpol, 272, 524, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else if (this.modeRequest != this.mode)
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.mode == "waiting")
                        {
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 230, 433, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                        else if (this.mode == "active")
                        {
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                            this.drawUnit(polpol, 224, 480, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(polpol, 275, 555, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
                this.drawUnit(polpol, 275, 555, 48, 28, -1/2 * 48 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 48 * this.alphaSize, 28 * this.alphaSize);
            }

        }
        //BEES
        if (this.type == "Bees")
        {
            //Set Drops and experience

            if (Math.max(0, 0.2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 3 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = 3 * ((player.getIntelligence() / 50) + 1) / 10;
            }

            this.drops = [[new Item("bee", this.X, this.Y), 1]];


            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(500, true);

            //AI
            if (this.alive == true)
            {
                this.flying = true;
                //Flying Insect Attack
                if (this.DTP() < this.sizeRadius)
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.timeBetweenAttacks = new Date().getTime();
                        player.health -= Math.max(0, 0.015 - Math.max(0, player.armourTotal - this.negateArmour));
                        if (Math.max(0, 0.015 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                        {
                            if (player.resistDisease != true)
                            {
                                player.swollenI = true;
                                player.swollenTime = Math.max(player.swollenTime, 180);
                            }
                        }
                    }
                }
                this.callForNearbyHelpFromType(500, "Bees");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.DTP() > 90 && typeof(this.ultra) != "undefined" && !this.disturbed)
                {
                    this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                }
                else
                {
                    if (this.DTP() > 4)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
            }
            else
            {
                //do stuff when bees die...
                if (this.doOnDeathOnce == true)
                {
                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {

                this.costumeEngine(6, 0.23, false);


                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    this.drawUnit(poly, 42, 312, 79, 70, - this.xAdjustment - 1/2 * 79 * this.alphaSize, - this.yAdjustment - 1/2 * 70 * this.alphaSize, 79 * this.alphaSize, 70 * this.alphaSize);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(poly, 112, 316, 79, 70, - this.xAdjustment - 1/2 * 79 * this.alphaSize, - this.yAdjustment - 1/2 * 70 * this.alphaSize, 79 * this.alphaSize, 70 * this.alphaSize);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(poly, 198, 323, 79, 70, - this.xAdjustment - 1/2 * 79 * this.alphaSize, - this.yAdjustment - 1/2 * 70 * this.alphaSize, 79 * this.alphaSize, 70 * this.alphaSize);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(poly, 271, 333, 79, 70, - this.xAdjustment - 1/2 * 79 * this.alphaSize, - this.yAdjustment - 1/2 * 70 * this.alphaSize, 79 * this.alphaSize, 70 * this.alphaSize);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(poly, 342, 334, 79, 70, - this.xAdjustment - 1/2 * 79 * this.alphaSize, - this.yAdjustment - 1/2 * 70 * this.alphaSize, 79 * this.alphaSize, 70 * this.alphaSize);
                }
                else if (theCostume >= 5)
                {
                    this.drawUnit(poly, 410, 331, 79, 70, - this.xAdjustment - 1/2 * 79 * this.alphaSize, - this.yAdjustment - 1/2 * 70 * this.alphaSize, 79 * this.alphaSize, 70 * this.alphaSize);
                }
            }
        }
        //GOLGEMOFF
        if (this.type == "Golgemoff")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 27 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (27 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawGolgemoffFlesh", this.X, this.Y), 3], [new Item("golgemoffFeelers", this.X, this.Y), 2]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 84 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (84 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawGolgemoffFlesh", this.X, this.Y), 5], [new Item("golgemoffFeelers", this.X, this.Y), 3]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawGolgemoffFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawGolgemoffFlesh", this.X, this.Y), 2], [new Item("golgemoffFeelers", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(860, true);
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(1000, true);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(700, true);
            }
            else
            {
                this.rangeOfSightCalculator(800, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(1.5, 1);
                    this.callForNearbyHelpFromType(750, "Golgemoff");
                }
                else if (this.alpha == "massive")
                {
                    this.Attack(3, 2);
                    this.callForNearbyHelpFromType(700, "Golgemoff");
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(0, 0.25);
                    this.callForNearbyHelpFromType(900, "Golgemoff");
                }
                else
                {
                    this.Attack(1, 0.5);
                    this.callForNearbyHelpFromType(700, "Golgemoff");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

            }
            else
            {
                //do stuff when a golgemoff dies...
                if (this.doOnDeathOnce == true)
                {
                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(5, 0.15, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.13, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 938, 679, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 945, 283, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 939, 742, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 938, 360, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 939, 805, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 939, 440, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 939, 870, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 936, 526, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 945, 283, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 935, 601, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mofu, 938, 936, 67, 69, - this.xAdjustment - 1/2 * 67 * this.alphaSize, - this.yAdjustment - 1/2 * 69 * this.alphaSize, 67 * this.alphaSize, 69 * this.alphaSize);
            }

        }
        //ANTER
        if (this.type == "Anter") //giant ant
        {
            //Set Drops and experience
            if (this.alpha == true) //SOLDIER
            {
                if (Math.max(0, 5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (20 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("anterInnards", this.X, this.Y), 2], [new Item("anterShell", this.X, this.Y), 1], [new Item("anterMandibles", this.X, this.Y), 1]];

                if (Math.round(Math.random()) == 1)
                {
                    this.drops.unshift([new Item("anterAcid", this.X, this.Y), 1]);
                }
            }
            else if (this.alpha == "massive") //ROYAL
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 60 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (60 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("anterInnards", this.X, this.Y), 5], [new Item("anterShell", this.X, this.Y), 2], [new Item("anterMandibles", this.X, this.Y), 1]];

                if (Math.round(Math.random()) == 1)
                {
                    this.drops.unshift([new Item("anterAcid", this.X, this.Y), 3]);
                }
            }
            else //WORKER
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 14 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 14 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("anterInnards", this.X, this.Y), 2], [new Item("anterShell", this.X, this.Y), 1], [new Item("anterMandibles", this.X, this.Y), 1]];

                if (Math.round(Math.random()) == 1)
                {
                    this.drops.unshift([new Item("anterAcid", this.X, this.Y), 1]);
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(400, true);
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(500, true);
            }
            else
            {
                this.rangeOfSightCalculator(400, false);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(3, 3);
                    this.callForNearbyHelpFromType(400, "Anter");
                }
                else if (this.alpha == "massive")
                {
                    this.Attack(5, 4);
                    this.callForNearbyHelpFromType(500, "Anter");
                }
                else
                {
                    this.Attack(2, 2);
                    this.callForNearbyHelpFromType(400, "Anter");
                }

                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight)
                    {
                        this.mofuTargetFood = "none";
                        this.moving = false;
                        this.eating = false;

                        for (var i = 0; i < worldItems.length; i++) //look for food...
                        {
                            if (worldItems[i][0].utility == "food")
                            {
                                if (worldItems[i][0].hunger >= 1)
                                {
                                    if (this.distanceFinder(this, worldItems[i][0]) <= (this.rangeOfSight + 1200)) //go after nearby food.
                                    {
                                        if (this.mofuTargetFood == "none")
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                        else
                                        {
                                            if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                            {
                                                this.mofuTargetFood = worldItems[i][0];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (this.mofuTargetFood != "none")
                        {
                            if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                            {
                                this.eating = true;
                            }
                            else
                            {
                                this.eating = false;
                                this.pointTowards(this.mofuTargetFood);
                                this.moveInRelationToThing(this.mofuTargetFood, 1200);
                            }
                        }
                        else if (typeof(this.ultra) != "undefined")
                        {
                            this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                        }
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight)
                    {
                        this.mofuTargetFood = "none";
                        this.moving = false;
                        this.eating = false;

                        for (var i = 0; i < worldItems.length; i++) //look for food...
                        {
                            if (worldItems[i][0].utility == "food")
                            {
                                if (worldItems[i][0].hunger >= 1)
                                {
                                    if (this.distanceFinder(this, worldItems[i][0]) <= (this.rangeOfSight + 1200)) //go after nearby food.
                                    {
                                        if (this.mofuTargetFood == "none")
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                        else
                                        {
                                            if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                            {
                                                this.mofuTargetFood = worldItems[i][0];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (this.mofuTargetFood != "none")
                        {
                            if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                            {
                                this.eating = true;
                            }
                            else
                            {
                                this.eating = false;
                                this.pointTowards(this.mofuTargetFood);
                                this.moveInRelationToThing(this.mofuTargetFood, 1200);
                            }
                        }
                        else if (typeof(this.ultra) != "undefined")
                        {
                            this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                        }
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

            }
            else
            {
                //do stuff when a anter dies...
                if (this.doOnDeathOnce == true)
                {
                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(5, 0.15, false);
                }
                else if (this.attacking || this.eating) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.14, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking || this.eating)
                    {
                        this.drawUnit(polpol, 13, 489, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polpol, 13, 489, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking || this.eating)
                    {
                        this.drawUnit(polpol, 13, 518, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polpol, 13, 458, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking || this.eating)
                    {
                        this.mofuFeastPrepped = true;
                        this.drawUnit(polpol, 13, 489, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polpol, 12, 426, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking || this.eating)
                    {
                        this.drawUnit(polpol, 13, 548, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                        if (this.eating && !this.attacking)
                        {
                            if (this.mofuFeastPrepped == true)
                            {
                                for (var i = 0; i < worldItems.length; i++)
                                {
                                    if (worldItems[i][0] === this.mofuTargetFood)
                                    {
                                        this.mofuFood += 1;
                                        if (worldItems[i][0].ability == "poisonI" || worldItems[i][0].ability == "poisonII" || worldItems[i][0].ability == "poisonIII" || worldItems[i][0].ability == "poisonIV" || worldItems[i][0].ability == "poisonV")
                                        {
                                            this.health = 0;
                                        }
                                        if (worldItems[i][1] > 1)
                                        {
                                            worldItems[i][1] -= 1;
                                            break;
                                        }
                                        else
                                        {
                                            this.mofuTargetFood = "none";
                                            worldItems.splice(i, 1);
                                            break;
                                        }
                                    }
                                }
                                this.mofuFeastPrepped = false;
                            }
                        }
                    }
                    else
                    {
                        this.drawUnit(polpol, 13, 394, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking || this.eating)
                    {
                        this.drawUnit(polpol, 13, 548, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polpol, 13, 361, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polpol, 63, 489, 50, 30, - this.xAdjustment - 1/2 * 50 * this.alphaSize, - this.yAdjustment - 1/2 * 30 * this.alphaSize, 50 * this.alphaSize, 30 * this.alphaSize);
            }

        }
        //STONE GOLEM
        if (this.type == "StoneGolem")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 80 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1200 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1200 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 130 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3333 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (3333 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 12 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 65 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (65 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (quests.lostGirlFound == false && quests.lostGirlQuest == true && this.ID == "Sleeping Stone")
                {
                    this.drops = [[new Item("natureCall", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [];
                }
            }
            else
            {
                if (Math.max(0, 45 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 212 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 212 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1500, false);
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(2000, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(650, false);
            }
            else
            {
                this.rangeOfSightCalculator(1000, false);
            }

            //AI
            if (this.alive == true)
            {
                if (this.disturbed == true)
                {
                    this.disturbedTime = new Date().getTime();
                    if (this.state != "resting")
                    {
                        if (this.DTP() <= this.engagementRadius + this.sizeRadius + this.engagementRadius + 65)
                        {
                            this.state = "pounding";
                        }
                        else
                        {
                            this.state = "throwing";
                        }

                        if (this.state == "pounding")
                        {
                            if (this.alpha == true)
                            {
                                this.Attack(50, 35);
                                this.sizeRadius = 35;
                            }
                            if (this.alpha == "giant")
                            {
                                this.Attack(76, 60);
                            }
                            if (this.alpha == "baby")
                            {
                                this.Attack(9, 4);
                                this.sizeRadius = 12;
                            }
                            else
                            {
                                this.Attack(34, 14);
                                this.sizeRadius = 24;
                            }

                            this.moveInRelationToPlayer();
                        }

                        this.callForNearbyHelpFromType(1000, "StoneGolem");
                        this.pointTowardsPlayer();
                    }
                }

                if (this.state == "resting")
                {
                    this.mobile = false;
                }
                else
                {
                    this.mobile = true;
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();
            }
            else
            {
                //do stuff when a Stone Golem dies...
                if (this.doOnDeathOnce == true)
                {

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.disturbed == true && this.state == "resting") //The golem gets up once if you attack it.
                {
                    this.costumeEngine(6, 0.19, false);
                }
                else if (this.state == "resting")
                {
                    this.costume = 0;
                }
                else if (this.state == "throwing")
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > ((this.attackWait / 1.5) * 1000))
                    {
                        this.costumeEngine(6, 0.16, false);
                    }
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.075, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (this.state == "pounding")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.costumeEngine(3, 0.14, true);
                        }
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.state == "resting")
                    {
                        this.drawUnit(polypol, -2, 723, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.state == "throwing" || this.attacking && this.state == "pounding")
                    {
                        this.drawUnit(polypol, 1152, 1186, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(polypol, 815, 1185, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 185, 1138, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.state == "resting")
                    {
                        this.drawUnit(polypol, 205, 721, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.state == "throwing" || this.attacking && this.state == "pounding")
                    {
                        this.drawUnit(polypol, 1276, 1186, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 185, 1138, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.state == "resting")
                    {
                        this.drawUnit(polypol, 22, 926, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.state == "throwing" || this.attacking && this.state == "pounding")
                    {
                        this.drawUnit(polypol, 1419, 1186, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 989, 1185, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.state == "resting")
                    {
                        this.drawUnit(polypol, 197, 949, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.state == "throwing" || this.attacking && this.state == "pounding")
                    {
                        if (this.state == "throwing")
                        {
                            this.chargeReady = true;
                        }
                        this.drawUnit(polypol, 1419, 1186, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 185, 1138, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.state == "resting")
                    {
                        this.drawUnit(polypol, 5, 1135, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.state == "throwing")
                    {
                        if (this.chargeReady)
                        {
                            this.chargeReady = false;
                            magicList.push(new Magic({ID:"golemRock"}, false, false, this));
                        }
                        this.drawUnit(polypol, 1277, 1186, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 815, 1185, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.state == "resting")
                    {
                        this.state = "transition";
                        this.drawUnit(polypol, 185, 1138, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else if (this.state == "throwing")
                    {
                        this.timeBetweenAttacks = new Date().getTime();
                        this.costume = 0;
                        this.drawUnit(polypol, 1150, 1186, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 185, 1138, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polypol, 177, 955, 160, 164, -1/2 * 160 * this.alphaSize - this.xAdjustment, -1/2 * 164 * this.alphaSize - this.yAdjustment, 160 * this.alphaSize, 164 * this.alphaSize);
            }

        }
        //AVRAK
        if (this.type == "Avrak")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 15 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 90 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (90 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawAvrakFlesh", this.X, this.Y), 4], [new Item("avrakHide", this.X, this.Y), 3]];
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 34 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 432 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (432 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawAvrakFlesh", this.X, this.Y), 16], [new Item("avrakHide", this.X, this.Y), 11]];
            }
            else
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawAvrakFlesh", this.X, this.Y), 1], [new Item("avrakHide", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(950, "mildly");
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(1250, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(750, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                if (this.charge != true)
                {
                    this.effect = "none";
                    if (this.alpha == true)
                    {
                        this.Attack(12, 6);
                        this.callForNearbyHelpFromType(650, "Avrak");
                    }
                    else if (this.alpha == "giant")
                    {
                        this.Attack(28, 12);
                        this.callForNearbyHelpFromType(650, "Avrak");
                    }
                    else
                    {
                        this.Attack(6, 2);
                        this.callForNearbyHelpFromType(2000, "Avrak");
                    }
                }
                else
                {
                    if (this.alpha == true)
                    {
                        this.Attack(0, 20);
                        this.callForNearbyHelpFromType(650, "Avrak");
                        this.effect = "smashbackII";
                    }
                    else if (this.alpha == "giant")
                    {
                        this.Attack(0, 55);
                        this.callForNearbyHelpFromType(650, "Avrak");
                        this.effect = "smashbackIII";
                    }
                    else
                    {
                        this.Attack(0, 9);
                        this.callForNearbyHelpFromType(2000, "Avrak");
                        this.effect = "smashbackI";
                    }
                }

                //Charge for special attack...
                if (new Date().getTime() - this.storeChargeTime > 8000)
                {
                    this.charge = true;
                }
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }
            else
            {
                //do stuff when an avrak dies...
                if (this.doOnDeathOnce == true)
                {

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.12, false);
                }
                else if (this.attacking && this.charge) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1500))
                    {
                        this.costumeEngine(11, 0.35, true);
                    }
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.20, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    this.chargeReady = false;
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 584, 856, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 259, 410, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking && this.charge)
                    {
                        if (this.chargeReady == true)
                        {
                            this.charge = false;
                            this.storeChargeTime = new Date().getTime();
                        }
                        this.drawUnit(mofu, 542, 1064, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 569, 652, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 257, 635, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 225, 1064, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 209, 1327, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 259, 410, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 257, 635, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 496, 1310, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 257, 635, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 176, 1574, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 261, 839, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 257, 635, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 475, 1577, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 261, 839, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 180, 1814, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 261, 839, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 257, 635, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 469, 1802, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 261, 839, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking && this.charge)
                    {
                        this.drawUnit(mofu, 184, 2022, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 261, 839, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 257, 635, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
                else if (theCostume >= 10)
                {
                    if (this.attacking && this.charge)
                    {
                        this.chargeReady = true;
                        this.drawUnit(mofu, 494, 2022, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(mofu, 261, 839, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 607, 418, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mofu, 605, 210, 278, 224, -1/2 * 278 * this.alphaSize - this.xAdjustment, -1/2 * 224 * this.alphaSize - this.yAdjustment, 278 * this.alphaSize, 224 * this.alphaSize);
            }
        }
        //EVRAK
        if (this.type == "Evrak")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 25 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (25 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawEvrakFlesh", this.X, this.Y), 4], [new Item("evrakHide", this.X, this.Y), 3]];
            }
            if (this.alpha == "giant")
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 190 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (190 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawEvrakFlesh", this.X, this.Y), 16], [new Item("evrakHide", this.X, this.Y), 11]];
            }
            else
            {
                if (Math.max(0, 3 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawEvrakFlesh", this.X, this.Y), 1], [new Item("evrakHide", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(800, true);
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(1000, true);
            }
            else
            {
                this.rangeOfSightCalculator(700, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(3, 4);
                    this.callForNearbyHelpFromType(920, "Evrak");
                    this.callForNearbyHelpFromType(860, "Avrak");
                }
                else if (this.alpha == "giant")
                {
                    this.Attack(19, 11);
                    this.callForNearbyHelpFromType(920, "Evrak");
                    this.callForNearbyHelpFromType(860, "Avrak");
                }
                else
                {
                    this.Attack(1, 2.5);
                    this.callForNearbyHelpFromType(920, "Evrak");
                    this.callForNearbyHelpFromType(860, "Avrak");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.075, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.105, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 944, 2256, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(mofu, 463, 2252, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 730, 2250, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 944, 2256, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 200, 2258, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 1171, 2264, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 463, 2252, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 940, 2258, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 200, 2258, 230, 211, - 1/2 * 230 * this.alphaSize - this.xAdjustment, - 1/2 * 211 * this.alphaSize - this.yAdjustment, 230 * this.alphaSize, 211 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mofu, 1420, 2290, 197, 167, - 1/2 * 197 * this.alphaSize - this.xAdjustment, - 1/2 * 167 * this.alphaSize - this.yAdjustment, 197 * this.alphaSize, 167 * this.alphaSize);
            }
        }
        //SHEHID
        if (this.type == "Shehid")
        {
            if (this.alive)
            {
                this.friendDecider();
                this.targeting();
            }
            //If it is attacked it will wake up.

            if (this.target != "none" && this.target != player)
            {
                this.dtu = this.DTU(this.target);

                if (this.disturbed == true && this.disturbedPrereq == true|| this.dtu <= this.baseSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtu > this.baseSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    if (this.alpha == true)
                    {
                        this.armour = 56;
                        this.heatResistance = 56;
                    }
                    else
                    {
                        this.armour = 30;
                        this.heatResistance = 30;
                    }
                }
            }
            else
            {
                this.dtp = this.DTP();

                if (this.disturbed == true && this.disturbedPrereq == true|| this.dtp <= this.rangeOfSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtp > this.rangeOfSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    if (this.alpha == true)
                    {
                        this.armour = 56;
                        this.heatResistance = 56;
                    }
                    else
                    {
                        this.armour = 30;
                        this.heatResistance = 30;
                    }
                }
            }

            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 20 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 77 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (77 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("shehidShellLrg", this.X, this.Y), 1], [new Item("shehidOozeLrg", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 38 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 38 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("shehidShellSml", this.X, this.Y), 1], [new Item("shehidOozeSml", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(65, false);
                }
                else
                {
                    this.rangeOfSightCalculator(285, "very");
                }
            }
            else
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(65, false);
                }
                else
                {
                    this.rangeOfSightCalculator(185, true);
                }
            }

            //AI
            if (this.alive == true && this.awake == 1 && this.formChange == false)
            {
                if (this.alpha == true)
                {
                    this.Attack(14, 6);
                    this.callForNearbyHelpFromType(250, "Shehid");
                }
                else
                {
                    this.Attack(7, 3);
                    this.callForNearbyHelpFromType(150, "Shehid");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.awake == 1)
                {
                    if (this.formChange == "wake")
                    {
                        this.costumeEngine(7, 0.025, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.costumeEngine(3, 0.15, true);
                        }
                    }
                    else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.075, false);
                    }
                    else
                    {
                        this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else
                {
                    if (this.formChange == "sleep")
                    {
                        this.costumeEngine(7, 0.025, false);
                    }
                    else
                    {
                        this.drawUnit(polypol, 805, 3, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            if (this.formReset == true)
                            {
                                this.formChange = false;
                                this.formReset = false;
                            }
                            this.drawUnit(polypol, 805, 3, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attacking)
                        {
                            this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 1170, 11, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formReset == true)
                        {
                            this.formChange = false;
                            this.formReset = false;
                        }
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 1)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(polypol, 840, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attacking)
                        {
                            this.drawUnit(polypol, 1211, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 1046, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 974, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 2)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(polypol, 873, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attacking)
                        {
                            this.drawUnit(polypol, 1260, 11, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 1083, 10, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 940, 7, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 3)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(polypol, 906, 6, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 1123, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 906, 6, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 4)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(polypol, 940, 7, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 873, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 5)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(polypol, 975, 8, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 840, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume >= 6)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            this.formReset = true;
                            this.armour = 0;
                            this.heatResistance = 0;
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(polypol, 805, 3, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            this.formReset = true;
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(polypol, 1390, 12, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
            }

        }
        //THUEG
        if (this.type == "Thueg")
        {
            if (this.alive)
            {
                this.friendDecider();
                this.targeting();
            }
            //If it is attacked it will wake up.

            if (this.target != "none" && this.target != player)
            {
                this.dtu = this.DTU(this.target);

                if (this.disturbed == true && this.disturbedPrereq == true || this.dtu <= this.baseSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtu > this.baseSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    this.resistances = ["burning", "blinded"];
                    if (this.alpha == true)
                    {
                        this.armour = 25;
                        this.heatResistance = 30;
                    }
                    else if (this.alpha == "baby")
                    {
                        this.armour = 5;
                        this.heatResistance = 10;
                    }
                    else
                    {
                        this.armour = 15;
                        this.heatResistance = 20;
                    }
                }
            }
            else
            {
                this.dtp = this.DTP();

                if (this.disturbed == true && this.disturbedPrereq == true|| this.dtp <= this.rangeOfSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtp > this.rangeOfSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    this.resistances = ["burning", "blinded"];
                    if (this.alpha == true)
                    {
                        this.armour = 25;
                        this.heatResistance = 30;
                    }
                    else if (this.alpha == "baby")
                    {
                        this.armour = 5;
                        this.heatResistance = 10;
                    }
                    else
                    {
                        this.armour = 15;
                        this.heatResistance = 20;
                    }
                }
            }

            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 92 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (92 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 25)
                {
                    this.drops = [[new Item("rawThuegTripe", this.X, this.Y), 2]];
                }
                else
                {
                    this.drops = [];
                }
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 2 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (2 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else
            {
                if (Math.max(0, 5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 23 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 23 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                if (player.getIntelligence() >= 25)
                {
                    this.drops = [[new Item("rawThuegTripe", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(250, false);
                }
                else
                {
                    this.rangeOfSightCalculator(1000, "very");
                }
            }
            else if (this.alpha == "baby")
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(100, false);
                }
                else
                {
                    this.rangeOfSightCalculator(360, false);
                }
            }
            else
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(175, false);
                }
                else
                {
                    this.rangeOfSightCalculator(800, true);
                }
            }

            //AI
            if (this.alive == true && this.awake == 1 && this.formChange == false)
            {
                var rndATK;
                //Determine which attack will take place when the timing is appropriate to do so.
                if (this.attackListo == "finished" || this.attackListo == "start")
                {
                    this.attackListo = "standby";
                    rndATK = Math.round(Math.random());
                    if (rndATK)
                    {
                        this.attackType = "bite";
                    }
                    else
                    {
                        this.attackType = "slash";
                    }
                }

                if (this.attackType == "bite")
                {
                    if (this.alpha == true)
                    {
                        this.negateArmour = 5;
                        this.attackWait = 1.80;
                        this.Attack(10, 8);
                        this.callForNearbyHelpFromType(600, "Thueg");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.negateArmour = 0.5;
                        this.attackWait = 1.80;
                        this.Attack(1, 1.5);
                        this.callForNearbyHelpFromType(600, "Thueg");
                    }
                    else
                    {
                        this.negateArmour = 1.5;
                        this.attackWait = 1.80;
                        this.Attack(6, 4);
                        this.callForNearbyHelpFromType(600, "Thueg");
                    }
                }
                else
                {
                    if (this.alpha == true)
                    {
                        this.negateArmour = 3;
                        this.attackWait = 0.5;
                        this.Attack(3, 3);
                        this.callForNearbyHelpFromType(600, "Thueg");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.negateArmour = 0;
                        this.attackWait = 0.5;
                        this.Attack(1, 1.25);
                        this.callForNearbyHelpFromType(600, "Thueg");
                    }
                    else
                    {
                        this.negateArmour = 0.5;
                        this.attackWait = 0.5;
                        this.Attack(2, 1.5);
                        this.callForNearbyHelpFromType(600, "Thueg");
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS
            var  szr = 2;
            if (this.alive == true)
            {
                if (this.awake == 1)
                {
                    if (this.formChange == "wake")
                    {
                        this.costumeEngine(5, 0.025, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (this.attackType == "bite")
                        {
                            if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                            {
                                this.costumeEngine(6, 0.20, false);
                            }
                        }
                        else if (this.attackType == "slash")
                        {
                            if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                            {
                                this.costumeEngine(6, 0.15, true);
                            }
                        }
                    }
                    else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.075, false);
                    }
                    else //awake derp frame
                    {
                        this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                    }
                }
                else
                {
                    if (this.formChange == "sleep")
                    {
                        this.costumeEngine(5, 0.025, false);
                    }
                    else //sleeping frame
                    {
                        this.drawUnit(nognog, 0, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //fully in shell
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            if (this.formReset == true)
                            {
                                this.formChange = false;
                                this.formReset = false;
                            }
                            this.drawUnit(nognog, 0, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //fully in shell
                        }
                        else if (this.attacking)
                        {
                            if (this.attackType == "bite")
                            {
                                this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                            }
                            else if (this.attackType == "slash")
                            {
                                if (this.attackListo == "reverse")
                                {
                                    this.attackListo = "finished"; //this allows the random attack picking feature to select a new random attack type.
                                }
                                this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                            }
                        }
                        else
                        {
                            this.drawUnit(nognog, 0, 96, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                        }
                    }
                    else
                    {
                        if (this.formReset == true)
                        {
                            this.formChange = false;
                            this.formReset = false;
                        }
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                        }
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(nognog, 55, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#1
                        }
                        else if (this.attacking)
                        {
                            if (this.attackType == "bite")
                            {
                                this.drawUnit(nognog, 193, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                            else if (this.attackType == "slash")
                            {
                                this.drawUnit(nognog, 193, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                        }
                        else
                        {
                            this.drawUnit(nognog, 79, 95, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(nognog, 381, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#3
                        }
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(nognog, 123, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#2
                        }
                        else if (this.attacking)
                        {
                            if (this.attackType == "bite")
                            {
                                this.drawUnit(nognog, 580, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                            else if (this.attackType == "slash")
                            {
                                this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                            }
                        }
                        else
                        {
                            this.drawUnit(nognog, 170, 95, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(nognog, 123, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#2
                        }
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(nognog, 381, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#3
                        }
                        else if (this.attacking)
                        {
                            if (this.attackType == "bite")
                            {
                                this.drawUnit(nognog, 662, 51, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                            else if (this.attackType == "slash")
                            {
                                this.drawUnit(nognog, 381, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#3
                            }
                        }
                        else
                        {
                            this.drawUnit(nognog, 263, 94, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(nognog, 55, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //#1
                        }
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                            this.formReset = true;
                            this.armour = 0;
                            this.heatResistance = 0;
                            this.resistances = ["blinded"];
                        }
                        else if (this.attacking)
                        {
                            if (this.attackType == "bite")
                            {
                                this.drawUnit(nognog, 662, 51, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                            else if (this.attackType == "slash") //last frame for slash attack
                            {
                                this.drawUnit(nognog, 480, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(nognog, 0, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //fully in shell
                            this.formReset = true;
                        }
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake") //just in case it goes over
                        {
                            this.drawUnit(nognog, 279, 48, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //out of shell
                        }
                        else if (this.attacking)
                        {
                            if (this.attackType == "bite")
                            {
                                this.attackListo = "finished";
                                this.drawUnit(nognog, 751, 54, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                            else if (this.attackType == "slash")
                            {
                                this.attackListo = "reverse"; //this means that when the animator loops back it will trigger the state "finished".
                                this.drawUnit(nognog, 480, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr);
                            }
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep") //just in case it goes over
                        {
                            this.drawUnit(nognog, 0, 49, 56, 37, -1/2 * 56 * szr * this.alphaSize - this.xAdjustment, -1/2 * 37 * szr * this.alphaSize - this.yAdjustment, 56 * this.alphaSize * szr, 37 * this.alphaSize * szr); //fully in shell
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 332, 93, 66, 50, -1/2 * 66 * szr * this.alphaSize - this.xAdjustment, -1/2 * 50 * szr * this.alphaSize - this.yAdjustment, 66 * this.alphaSize * szr, 50 * this.alphaSize * szr);
            }

        }
        //Grush
        if (this.type == "Grush")
        {
            if (this.alive)
            {
                this.friendDecider();
                this.targeting();
            }

            if (this.target != "none" && this.target != player)
            {
                //If it is attacked it will wake up.
                this.dtu = this.DTU(this.target);

                if (this.disturbed == true && this.disturbedPrereq == true || this.dtu <= this.baseSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtu > this.baseSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    if (this.alpha == true)
                    {
                        this.armour = 55;
                        this.resistances = ["blinded", "burning"];
                    }
                    else if (this.alpha == "giant")
                    {
                        this.armour = 75;
                        this.resistances = ["blinded", "burning"];
                    }
                    else if (this.alpha == "baby")
                    {
                        this.armour = 15;
                        this.resistances = ["blinded", "burning"];
                    }
                    else
                    {
                        this.armour = 35;
                        this.resistances = ["blinded", "burning"];
                    }
                }
            }
            else
            {
                //If it is attacked it will wake up.
                this.dtp = this.DTP();

                if (this.disturbed == true && this.disturbedPrereq == true || this.dtp <= this.rangeOfSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtp > this.rangeOfSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    if (this.alpha == true)
                    {
                        this.armour = 55;
                    }
                    else if (this.alpha == "giant")
                    {
                        this.armour = 75;
                    }
                    else if (this.alpha == "baby")
                    {
                        this.armour = 15;
                    }
                    else
                    {
                        this.armour = 35;
                    }
                }
            }

            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 95 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (95 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 6 + Math.floor(Math.random() * 3)], [new Item("grushFur", this.X, this.Y), 4 + Math.floor(Math.random() * 3)]];
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 18 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1100 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1100 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 12 + Math.floor(Math.random() * 7)], [new Item("grushFur", this.X, this.Y), 10 + Math.floor(Math.random() * 3)]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 4 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (4 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (Math.round(Math.random()))
                {
                    this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 1], [new Item("grushFur", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 1]];
                }
            }
            else
            {
                if (Math.max(0, 6 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 45 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 3], [new Item("grushFur", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(55, false);
                }
                else
                {
                    this.rangeOfSightCalculator(180, false);
                }
            }
            else if (this.alpha == "giant")
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(80, false);
                }
                else
                {
                    this.rangeOfSightCalculator(280, false);
                }
            }
            else if (this.alpha == "baby")
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(45, false);
                }
                else
                {
                    this.rangeOfSightCalculator(120, false);
                }
            }
            else
            {
                if (this.awake == 0)
                {
                    this.rangeOfSightCalculator(45, false);
                }
                else
                {
                    this.rangeOfSightCalculator(120, false);
                }
            }

            //AI
            if (this.alive == true && this.awake == 1 && this.formChange == false)
            {
                if (this.alpha == true)
                {
                    this.Attack(6, 3);
                }
                else if (this.alpha == "giant")
                {
                    this.Attack(8, 10);
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(0.5, 0.5);
                }
                else
                {
                    this.Attack(4, 2);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.awake == 1)
                {
                    if (this.formChange == "wake")
                    {
                        this.costumeEngine(4, 0.045, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.costumeEngine(2, 0.15, true);
                        }
                    }
                    else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(2, 0.060, false);
                    }
                    else
                    {
                        this.drawUnit(mofu, 690, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                    }
                }
                else
                {
                    if (this.formChange == "sleep")
                    {
                        this.costumeEngine(4, 0.045, false);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 3022, 233, 40, 42, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 42 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 42 * this.alphaSize);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            if (this.formReset == true)
                            {
                                this.formChange = false;
                                this.formReset = false;
                            }
                            this.drawUnit(oldverse, 3022, 233, 40, 42, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 42 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 42 * this.alphaSize);
                        }
                        else if (this.attacking)
                        {
                            this.drawUnit(mofu, 973, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                        else if (this.moving && !this.attacking)
                        {
                            this.drawUnit(mofu, 782, 3, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formReset == true)
                        {
                            this.formChange = false;
                            this.formReset = false;
                        }
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(mofu, 690, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 1)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(mofu, 546, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                        else if (this.attacking)
                        {
                            this.drawUnit(mofu, 1056, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * (72 - 4) * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                        else if (this.moving && !this.attacking)
                        {
                            this.drawUnit(mofu, 877, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(mofu, 619, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 2)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(mofu, 620, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(mofu, 547, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                }
                if (theCostume == 3)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.drawUnit(mofu, 690, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            this.formReset = true;
                            this.armour = 0;
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.drawUnit(oldverse, 3022, 233, 40, 42, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 42 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 42 * this.alphaSize);
                            this.formReset = true;
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(mofu, 1133, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
            }

        }
        //BROLLE WORMS
        if (this.type == "BrolleWorms")
        {
            //Set Drops and experience

            if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 1 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [];

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(300, false);


            //AI
            if (this.alive == true)
            {
                this.Attack(0, 0.15);
                this.callForNearbyHelpFromType(425, "BrolleWorms");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();
                //todo add a script to allow brolle worms to seek out dead bodies to feed upon and in doing so summoning more worms.


                if (this.target == player)
                {
                    if (this.DTP() > this.rangeOfSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > this.baseSight && typeof(this.ultra) != "undefined")
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

            }
            else
            {
                //do stuff when a tilk dies...
                if (this.doOnDeathOnce == true)
                {
                    //track Deaths Of Certain Non-Unique Units During Certain Quests

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(1, 0.1, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(1, 0.1, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0 || theCostume >= 0)
                {
                    this.flashAnimate(250, this.rotation, 1, [{image: lodo, imgX: 7, imgY: 78, portionW: 28, portionH: 24, adjX: -1 / 2 * 28 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 24 * this.alphaSize - this.yAdjustment, width: 28 * this.alphaSize, height: 24 * this.alphaSize}, {image: lodo, imgX: 7, imgY: 100, portionW: 28, portionH: 24, adjX: -1 / 2 * 28 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 24 * this.alphaSize - this.yAdjustment, width: 28 * this.alphaSize, height: 24 * this.alphaSize}, {image: lodo, imgX: 8, imgY: 126, portionW: 28, portionH: 24, adjX: -1 / 2 * 28 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 24 * this.alphaSize - this.yAdjustment, width: 28 * this.alphaSize, height: 24 * this.alphaSize}, {image: lodo, imgX: 7, imgY: 152, portionW: 28, portionH: 24, adjX: -1 / 2 * 28 * this.alphaSize - this.xAdjustment, adjY: -1 / 2 * 24 * this.alphaSize - this.yAdjustment, width: 28 * this.alphaSize, height: 24 * this.alphaSize}]);
                }

            }
            else
            {
                this.drawUnit(lodo, 12, 128, 20, 19, -1/2 * 20 * this.alphaSize - this.xAdjustment, -1/2 * 19 * this.alphaSize - this.yAdjustment, 20 * this.alphaSize, 19 * this.alphaSize);
            }

        }
        //BALKUR
        if (this.type == "Balkur") //balkbalk
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 25 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 125 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (125 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("balkurPelt", this.X, this.Y), 2], [new Item("rawBalkurFlesh", this.X, this.Y), 3], [new Item("balkurFang", this.X, this.Y), 2]];
            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 70 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (70 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("balkurPelt", this.X, this.Y), 1], [new Item("rawBalkurFlesh", this.X, this.Y), 2], [new Item("balkurFang", this.X, this.Y), 1 + Math.round(Math.random())]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(900, "extremely");
            }
            else
            {
                this.rangeOfSightCalculator(800, "extremely");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(13, 9);
                }
                else
                {
                    this.Attack(9, 8);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.allys.push("docile");
                this.targeting();

                if (this.target == player)
                {
                    //trample player
                    if (this.team != "player")
                    {
                        if (this.DTP() < 1.2 * this.engagementRadius)
                        {
                            player.stunnedTime = 2;
                            player.stunnedII = true;
                        }
                    }
                    if (this.team == "balkuria")
                    {
                        var doMove = true;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].alive && ArtificialIntelligenceAccess[i].type == "Balkur" && ArtificialIntelligenceAccess[i] !== this)
                            {
                                if (this.DTU({X: ArtificialIntelligenceAccess[i].territoryX, Y: ArtificialIntelligenceAccess[i].territoryY}) <= ArtificialIntelligenceAccess[i].territory + 300)
                                {
                                    this.aiTimer = 0;
                                    doMove = false;
                                    break;
                                }
                            }
                        }

                        if (doMove && this.aiTimer >= 2.7)
                        {
                            this.pointTowardsPlayer();
                            this.moveInRelationToPlayer();
                        }
                        else
                        {
                            this.pointAwayFromPlayer();
                            this.moveInRelationToPlayer();
                        }
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    //trample unit
                    for (var ll = 0; ll < ArtificialIntelligenceAccess.length; ll++)
                    {
                        if (ArtificialIntelligenceAccess[ll] != this)
                        {
                            if (ArtificialIntelligenceAccess[ll].haste == false && ArtificialIntelligenceAccess[ll].healthMAX < 40 && ArtificialIntelligenceAccess[ll].team != "balkuria")
                            {
                                if (this.team != "player" || ArtificialIntelligenceAccess[ll].team != "player")
                                {
                                    if (ArtificialIntelligenceAccess[ll].DTU(this) <= 1.2 * this.engagementRadius)
                                    {
                                        ArtificialIntelligenceAccess[ll].stunTime = new Date().getTime();
                                        ArtificialIntelligenceAccess[ll].stunTimer = 2;
                                        ArtificialIntelligenceAccess[ll].stunII = true;
                                    }
                                }
                            }
                        }
                    }

                    if (this.team == "balkuria")
                    {
                        var doMove = true;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].alive && ArtificialIntelligenceAccess[i].type == "Balkur" && ArtificialIntelligenceAccess[i] !== this)
                            {
                                if (this.DTU({X: ArtificialIntelligenceAccess[i].territoryX, Y: ArtificialIntelligenceAccess[i].territoryY}) <= ArtificialIntelligenceAccess[i].territory + 300)
                                {
                                    this.aiTimer = 0;
                                    doMove = false;
                                    break;
                                }
                            }
                        }

                        if (doMove && this.aiTimer >= 2.7)
                        {
                            this.pointTowards(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                        else
                        {
                            this.pointAway(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                    }
                    else
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
                else
                {
                    var terr = {X: this.territoryX, Y: this.territoryY};
                    if (this.DTU(terr) >= 170)
                    {
                        this.pointTowards(terr);
                        this.moveInRelationToThing(terr);
                    }
                }

            }

            //ANIMATIONS
            var szx = 1;
            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.14, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(14, 0.31, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 299, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 299, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 640, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 119, 75, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 458, 354, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 124, 170, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 460, 266, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 124, 350, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 301, 265, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 299, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 304, 357, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 119, 75, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 462, 168, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 124, 170, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 461, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 124, 350, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 457, 69, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 299, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 455, 168, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 119, 75, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 10)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 455, 266, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 124, 170, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 11)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 457, 355, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 124, 350, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 12)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 638, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 299, 68, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 13)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(balkur, 115, 257, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(balkur, 119, 75, 119, 74, -1/2 * 119 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * szx * this.alphaSize, 74 * szx * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(balkur, 640, 201, 119, 74, -1/2 * 119 * 1.2 * szx * this.alphaSize - this.xAdjustment, -1/2 * 74 * szx * this.alphaSize - this.yAdjustment, 119 * 1.2 * szx * this.alphaSize, 74 * szx * this.alphaSize);
            }

        }
        //MITER
        if (this.type == "Miter")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 11 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 27 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (27 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (this.bloodQuenched)
                {
                    this.drops = [[new Item("miterBloodSac", this.X, this.Y), 1], [new Item("miterHide", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("emptyMiterBloodSac", this.X, this.Y), 1], [new Item("miterHide", this.X, this.Y), 1]];
                }
            }
            else
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 19 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (19 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (this.bloodQuenched)
                {
                    this.drops = [[new Item("miterBloodSac", this.X, this.Y), 1], [new Item("miterHide", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("emptyMiterBloodSac", this.X, this.Y), 1], [new Item("miterHide", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(710, true);
            }
            else
            {
                this.rangeOfSightCalculator(610, true);
            }

            //AI
            if (this.alive == true)
            {
                if (showUnitAttackBubble)
                {
                    this.attackBubble([[9, this.rotation, 0, this.sizeRadius + 9], [9, this.rotation, 0, this.sizeRadius + 18], [9, this.rotation, 0, this.sizeRadius + 27]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (!this.attackBusy)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none" && typeof(this.target) != "undefined")
                {
                    if (!this.attackBusy)
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (this.aiTimer > 1.7 && !this.attackBusy)
                {
                    this.aiTimer = 0;
                    var rnd = Math.random();
                    if (rnd >= 0.6)
                    {
                        this.attackType = "leech";
                    }
                    else
                    {
                        this.attackType = "slash";
                    }
                }

                if (this.alpha == true)
                {
                    if (this.attackType == "leech")
                    {
                        this.engagementRadius = 55;
                        this.Attack(0, 17);
                        this.negateArmour = 0;
                    }
                    else if (this.attackType == "slash")
                    {
                        this.engagementRadius = 46;
                        this.Attack(6, 3);
                        this.negateArmour = 3;
                        this.effect = "none";
                    }
                }
                else
                {
                    if (this.attackType == "leech")
                    {
                        this.engagementRadius = 41;
                        this.Attack(0, 9);
                        this.negateArmour = 0;
                    }
                    else if (this.attackType == "slash")
                    {
                        this.engagementRadius = 31;
                        this.Attack(4, 2);
                        this.negateArmour = 2;
                        this.effect = "none";
                    }
                }
            }


            //ANIMATIONS
            if (this.alive == true)
            {
                if (this.attackBusy || this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (this.attackType == "leech")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.attackBusy = true;
                            this.costumeEngine(6, 0.10, true);
                        }
                    }
                    else if (this.attackType == "slash")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.attackBusy = true;
                            this.costumeEngine(5, 0.15, true);
                        }
                    }
                }
                else if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.07, false);
                }
                else
                {
                    this.drawUnit(troli, 77, 305, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.stopAttacking)
                    {
                        this.stopAttacking = false;
                        this.attacking = false;
                        this.attackBusy = false;
                    }
                    if (this.attackBusy || this.attacking)
                    {
                        if (this.damageDealt == true) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = false; //tell the loop that the Unit has already dealt the damage for this attack.
                        }

                        this.drawUnit(troli, 77, 254, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(troli, 0, 306, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(troli, 77, 305, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attackBusy || this.attacking)
                    {
                        if (this.attackType == "leech")
                        {
                            this.drawUnit(troli, 77, 254, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            this.drawUnit(troli, 77, 305, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(troli, 1, 350, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attackBusy || this.attacking)
                    {
                        if (this.attackType == "leech")
                        {
                            if (this.attackBubble([[8, this.rotation, 0, this.sizeRadius + 8], [7, this.rotation, 0, this.sizeRadius + 15]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(troli, 178, 252, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            this.drawUnit(troli, 77, 254, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(troli, 0, 306, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attackBusy || this.attacking)
                    {
                        if (this.attackType == "leech")
                        {
                            if (this.attackBubble([[8, this.rotation, 0, this.sizeRadius + 8], [8, this.rotation, 0, this.sizeRadius + 16], [4, this.rotation, 0, this.sizeRadius + 20]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(troli, 179, 304, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            this.drawUnit(troli, 78, 349, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(troli, 1, 350, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attackBusy || this.attacking)
                    {
                        if (this.attackType == "leech")
                        {
                            if (this.attackBubble([[9, this.rotation, 0, this.sizeRadius + 9], [9, this.rotation, 0, this.sizeRadius + 18], [9, this.rotation, 0, this.sizeRadius + 27]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(troli, 179, 348, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(troli, 78, 349, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                            this.attackBusy = false;
                            this.stopAttacking = true;
                        }
                    }
                    else
                    {
                        this.drawUnit(troli, 0, 306, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attackBusy || this.attacking)
                    {
                        if (this.attackType == "leech")
                        {
                            if (this.attackBubble([[9, this.rotation, 0, this.sizeRadius + 9], [9, this.rotation, 0, this.sizeRadius + 18], [9, this.rotation, 0, this.sizeRadius + 27]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(troli, 179, 348, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                            this.attackBusy = false;
                            this.stopAttacking = true;
                            if (this.damageDealt == true)
                            {
                                this.bloodQuenched = true;
                                if (this.alpha == true)
                                {
                                    this.health = Math.min(this.healthMAX, this.health + 17);
                                }
                                else
                                {
                                    this.health = Math.min(this.healthMAX, this.health + 9);
                                }
                            }
                        }
                        else if (this.attackType == "slash") //extra
                        {
                            this.drawUnit(troli, 78, 349, 121, 40, -1/2 * 121 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 121 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(troli, 1, 350, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(troli, 0, 256, 76, 40, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 40 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 40 * this.alphaSize);
            }
        }
        //CLOIMID
        if (this.type == "Cloimid")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 11 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 18 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (18 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
                var randumNum = Math.floor(Math.random() * 10000);
                if (randumNum == 757 || randumNum == 577)
                {
                    this.drops = [[new Item("rawCloimidFlesh", this.X, this.Y), 1], [new Item("cloimidPearl", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawCloimidFlesh", this.X, this.Y), 1]];
                }
            }
            else
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 9 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (9 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (Math.floor(Math.random() * 10000) == 757)
                {
                    this.drops = [[new Item("rawCloimidFlesh", this.X, this.Y), 1], [new Item("cloimidPearl", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawCloimidFlesh", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(100, true);
            this.rotation = this.ultra.rotation;

            //AI
            if (this.alive == true)
            {
                //sense if a creature is in front of it
                if (this.alpha == true)
                {
                    if (this.attackBubble([[17, this.rotation, 0, this.sizeRadius + 17], [17, this.rotation, 0, this.sizeRadius + 26]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    {
                        this.attackContext = true; //this provides a context in which the unit can attack regardless of any other factor than the player's presence in front of it.
                    }
                }
                else
                {
                    if (this.attackBubble([[12, this.rotation, 0, this.sizeRadius + 12], [12, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    {
                        this.attackContext = true; //this provides a context in which the unit can attack regardless of any other factor than the player's presence in front of it.
                    }
                }

                //attack until attack is over
                if (this.attackContext)
                {
                    this.attacking = true;
                }

                //attack
                if (this.alpha)
                {
                    this.Attack(9, 20);
                }
                else
                {
                    this.Attack(7, 14);
                }

                if (this.inShell)
                {
                    if (this.alpha)
                    {
                        this.armour = 200;
                    }
                    else
                    {
                        this.armour = 160;
                    }
                }
                else
                {
                    this.armour = 0;
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();
            }


            //ANIMATIONS
            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(11, 0.10, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    this.inShell = true;
                    if (this.stopAttacking)
                    {
                        this.stopAttacking = false;
                        this.attacking = false;
                        this.attackContext = false;
                    }
                    this.drawUnit(norc, 177, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 1)
                {
                    this.inShell = true;
                    this.drawUnit(norc, 239, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 2)
                {
                    this.inShell = true;
                    this.drawUnit(norc, 239, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 3)
                {
                    this.inShell = true;
                    this.drawUnit(norc, 304, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 4)
                {
                    this.inShell = true;
                    this.drawUnit(norc, 304, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 5)
                {
                    this.inShell = true;
                    this.drawUnit(norc, 371, 184, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 6)
                {
                    this.inShell = true;
                    this.drawUnit(norc, 447, 184, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume <= 7)
                {
                    this.inShell = false;
                    if (this.alpha == true)
                    {
                        if (this.attackBubble([[17, this.rotation, 0, this.sizeRadius + 17], [17, this.rotation, 0, this.sizeRadius + 26]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = true;
                        }
                    }
                    else
                    {
                        if (this.attackBubble([[12, this.rotation, 0, this.sizeRadius + 12], [12, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = true;
                        }
                    }
                    this.drawUnit(norc, 527, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                }
                else if (theCostume >= 8)
                {
                    this.inShell = false;
                    if (this.alpha == true)
                    {
                        if (this.attackBubble([[17, this.rotation, 0, this.sizeRadius + 17], [17, this.rotation, 0, this.sizeRadius + 26]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = true;
                        }
                    }
                    else
                    {
                        if (this.attackBubble([[12, this.rotation, 0, this.sizeRadius + 12], [12, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = true;
                        }
                    }
                    this.stopAttacking = true;
                    this.drawUnit(norc, 623, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
                    if (theCostume >= 10)
                    {
                        if (this.damageDealt == true) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = false; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 716, 183, 60, 27, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 27 * this.alphaSize);
            }
        }
        //BOGGART
        if (this.type == "Boggart")
        {
            var swallowed = [];

            if (this.alphaSize > 3)
            {
                this.alphaSize = 3;
            }

            this.healthMAX = 4 + (24 * this.alphaSize * Math.max(1, Math.floor(this.alphaSize + 0.1)));
            //this.health = this.healthMAX;
            this.speed = 1.5 + (0.5 * this.alphaSize);
            this.rotationSpeed = 0.1 + (0.02 * this.alphaSize);
            this.engagementRadius = 14 + (37 * this.alphaSize);
            this.sizeRadius = 5 + 16 * this.alphaSize;
            if (this.disturbed == true || this.offended == true)
            {
                this.baseTeam = "Boggart";
                this.flying = false;
                this.armour = 0;
                this.magicalResistance = 0;
            }
            else
            {
                this.baseTeam = "neutral";
                this.flying = true;
                this.armour = 1000; //a boggart cannot be harmed when not tangible
                this.magicalResistance = 1000; //a boggart cannot be harmed when not tangible
            }

            //Set Drops and experience
            if (Math.max(0, ((7 * this.alphaSize) + (6 * this.alphaSize)) - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 40 * this.alphaSize * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (40 * this.alphaSize * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [[new Item("boggartSpine", this.X, this.Y), 1]];

            //RANGE OF SIGHT (anything related to range of sight)

            this.rangeOfSightCalculator(200 + 245 * this.alphaSize, "mildy");

            //AI
            if (this.alive == true)
            {
                this.Attack(7* this.alphaSize, 6 * this.alphaSize);

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.ID == "Lezar") //lezar is friends with lelaila and thusly will not eat her.
                {
                    if (this.target != "none" && this.target != player)
                    {
                        if (this.target.ID == "Lelaila")
                        {
                            this.target = player;
                        }
                    }
                }

                if (this.target == player)
                {
                    this.offended = false;
                    if (player.health - 15 * this.alphaSize <= 0)
                    {
                        this.estyle = "finisher";
                    }
                    else
                    {
                        this.estyle = "normal";
                    }

                    if (this.disturbed == true || this.offended == true)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else
                    {
                        if (this.boggartNamed == true)
                        {
                            this.pointTowardsPlayer();
                            if (this.DTP() <= this.engagementRadius)
                            {
                                this.moveInRelationToPlayer();
                                this.disturbed = true;
                                this.disturbedTime = new Date().getTime();
                            }
                        }
                    }
                }
                else if (this.target != "none")
                {
                    if (this.target.health - 15 * this.alphaSize <= 0)
                    {
                        this.estyle = "finisher";
                    }
                    else
                    {
                        this.estyle = "normal";
                    }

                    if (this.disturbed == true || this.offended == true)
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                    else
                    {
                        if (this.boggartNamed == true)
                        {
                            this.pointTowards(this.target);
                            if (this.DTU(this.target) <= this.engagementRadius)
                            {
                                this.moveInRelationToThing(this.target);
                                this.offended = true;
                            }
                        }
                    }
                }

            }
            else if (this.doOnDeathOnce)
            {
                this.doOnDeathOnce = false;
                if (this.ID == "Lezar")
                {
                    uniqueChars.boggartLezarLDS = false;
                }
            }

            //ANIMATIONS
            var szx = 0.6;
            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        if (this.estyle == "finisher")
                        {
                            this.costumeEngine(7, 0.110, true);
                        }
                        else
                        {
                            this.costumeEngine(4, 0.110, true);
                        }
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (this.disturbed == true || this.offended == true)
                {
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            if (this.estyle == "finisher")
                            {
                                this.drawUnit(bogg, 36, 2054, 183, 224, -1/2 * 183 * szx * this.alphaSize - this.xAdjustment, -1/2 * 224 * szx * this.alphaSize - this.yAdjustment, 183 * szx * this.alphaSize, 224 * szx * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(bogg, 36, 2054, 183, 224, -1/2 * 183 * szx * this.alphaSize - this.xAdjustment, -1/2 * 224 * szx * this.alphaSize - this.yAdjustment, 183 * szx * this.alphaSize, 224 * szx * this.alphaSize);
                            }
                        }
                        else
                        {
                            this.drawUnit(bogg, 328, 1331, 183, 199, -1/2 * 183 * szx * this.alphaSize - this.xAdjustment, -1/2 * 199 * szx * this.alphaSize - this.yAdjustment, 183 * szx * this.alphaSize, 199 * szx * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking)
                        {
                            if (this.estyle == "finisher")
                            {
                                this.drawUnit(bogg, 283, 2137, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(bogg, 283, 2137, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                            }
                        }
                        else
                        {
                            this.drawUnit(bogg, 328, 1506, 183, 199, -1/2 * 183 * szx * this.alphaSize - this.xAdjustment, -1/2 * 199 * szx * this.alphaSize - this.yAdjustment, 183 * szx * this.alphaSize, 199 * szx * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 2)
                    {
                        if (this.attacking)
                        {
                            if (this.estyle == "finisher")
                            {
                                this.drawUnit(bogg, 525, 2184, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(bogg, 525, 2184, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                            }
                        }
                        else
                        {
                            this.drawUnit(bogg, 304, 1719, 183, 199, -1/2 * 183 * szx * this.alphaSize - this.xAdjustment, -1/2 * 199 * szx * this.alphaSize - this.yAdjustment, 183 * szx * this.alphaSize, 199 * szx * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 3)
                    {
                        if (this.attacking)
                        {
                            if (theCostume <= 3)
                            {
                                if (this.estyle == "finisher")
                                {
                                    this.drawUnit(bogg, 523, 1974, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                                }
                                else
                                {
                                    this.drawUnit(bogg, 0, 1583, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                                }
                            }
                            else if (theCostume <= 4)
                            {
                                if (this.estyle == "finisher")
                                {
                                    this.damageDealt = false;
                                    this.drawUnit(bogg, 520, 1792, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                                }
                                else
                                {
                                    this.drawUnit(bogg, 0, 1583, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                                }
                            }
                            else if (theCostume >= 5)
                            {
                                if (this.estyle == "finisher")
                                {
                                    if (theCostume >= 6)
                                    {
                                        if (this.target != "none")
                                        {
                                            if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                                            {
                                                this.target.health = 0;
                                                this.target.deleteBody = true;
                                                this.target.killNotByPlayer = true;
                                                swallowed.push(new Unit(999999999, 999999999, this.target.type, this.target.alpha, this.target.ID, this.target.ultra));
                                                swallowed[0].alive = false;
                                                swallowed[0].invisible = true;
                                                swallowed[0].operation();
                                                swallowed = [];
                                                //ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this.target), 1);
                                                this.alphaSize += 0.2;
                                                this.healthMAX = 4 + (24 * this.alphaSize * Math.max(1, Math.floor(this.alphaSize + 0.1)));
                                                this.health = this.healthMAX;
                                                this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                                            }
                                        }
                                        this.drawUnit(bogg, 378, 1170, 219, 141, -1/2 * 219 * szx * this.alphaSize - this.xAdjustment, -1/2 * 141 * szx * this.alphaSize - this.yAdjustment, 219 * szx * this.alphaSize, 141 * szx * this.alphaSize);
                                    }
                                    else
                                    {
                                        this.drawUnit(bogg, 378, 1170, 219, 141, -1/2 * 219 * szx * this.alphaSize - this.xAdjustment, -1/2 * 141 * szx * this.alphaSize - this.yAdjustment, 219 * szx * this.alphaSize, 141 * szx * this.alphaSize);
                                    }
                                }
                                else
                                {
                                    this.drawUnit(bogg, 0, 1583, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
                                }
                            }
                        }
                        else
                        {
                            this.drawUnit(bogg, 311, 1908, 183, 199, -1/2 * 183 * szx * this.alphaSize - this.xAdjustment, -1/2 * 199 * szx * this.alphaSize - this.yAdjustment, 183 * szx * this.alphaSize, 199 * szx * this.alphaSize);
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(bogg, 24, 1812, 218, 200, -1/2 * 218 * szx * this.alphaSize - this.xAdjustment, -1/2 * 200 * szx * this.alphaSize - this.yAdjustment, 218 * szx * this.alphaSize, 200 * szx * this.alphaSize);
            }
        }
        //VARN
        if (this.type == "Varn")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 24 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (24 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("varnPelt", this.X, this.Y), 2], [new Item("rawVarnFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 17 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 17 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("varnPelt", this.X, this.Y), 1], [new Item("rawVarnFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(525, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(450, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(5, 2);
                    this.callForNearbyHelpFromType(350, "Varn");
                }
                else
                {
                    this.Attack(2, 2);
                    this.callForNearbyHelpFromType(275, "Varn");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.110, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 3095, 254, 54, 32, -35 - this.xAdjustment, -22 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 2933, 254, 54, 32, -35 - this.xAdjustment, -22 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 3154, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 2985, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 3214, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 3037, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(verse, 2929, 283, 54, 32, -35 - this.xAdjustment, -22 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
            }
        }
        //PEACOCK
        if (this.type == "Peacock")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 4 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (4 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawPeacockFlesh", this.X, this.Y), 1], [new Item("peacockFeather", this.X, this.Y), 1 + Math.floor(Math.random() * 5)]];
            }
            else
            {
                if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 3 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawPeacockFlesh", this.X, this.Y), 1], [new Item("peacockFeather", this.X, this.Y), 1 + Math.floor(Math.random() * 3)]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(425, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(400, "mildly");
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() <= this.engagementRadius && this.disturbed == false)
                    {
                        if (this.plumed == false)
                        {
                            this.costume = 0;
                            this.wasPlumed = true;
                        }
                        this.alwaysMove = true;
                        this.plumed = true;
                        this.pointTowardsPlayer();
                        if (this.team != "player")
                        {
                            this.speed = -1/4 * this.standardSpeed;
                        }
                        else
                        {
                            if (!this.stay)
                            {
                                this.speed = 3 / 5 * this.standardSpeed;
                            }
                        }
                        this.moveInRelationToPlayer();
                    }
                    else if (this.disturbed)
                    {
                        if (this.plumed == true)
                        {
                            this.wasPlumed = true;
                        }
                        this.plumed = false;
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                        if (!this.stay)
                        {
                            this.speed = this.standardSpeed;
                        }
                    }
                    else
                    {
                        if (this.plumed == true)
                        {
                            this.wasPlumed = true;
                        }
                        this.plumed = false;
                        if (!this.stay)
                        {
                            this.speed = 1/2 * this.standardSpeed;
                        }
                        if (this.team != "player" && this.DTP() > (this.engagementRadius + 25))
                        {
                            this.wander(this.XX, this.YY, 400, 190, false);
                        }
                        else
                        {
                            this.pointTowardsPlayer();
                            this.moveInRelationToPlayer();
                        }
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) <= this.engagementRadius && this.health >= this.healthMAX)
                    {
                        if (this.plumed == false)
                        {
                            this.costume = 0;
                            this.wasPlumed = true;
                        }
                        this.alwaysMove = true;
                        this.plumed = true;
                        this.pointTowards(this.target);
                        if (!this.stay)
                        {
                            this.speed = -1 / 4 * this.standardSpeed;
                        }
                        this.moveInRelationToThing(this.target);
                        //pluming feathers scares small predators (it only turns away one predator at a time, so a pack should have no problem hunting them down)
                        if (this.target.healthMAX < (this.healthMAX + 6) && this.target.target == this && this.target.type != "Person" && this.target.type != "Soldier" && this.target.undeath != true)
                        {
                            this.target.scared = true;
                            this.target.pointAway(this);
                        }
                    }
                    else if (this.health < this.healthMAX)
                    {
                        if (this.plumed == true)
                        {
                            this.wasPlumed = true;
                        }
                        this.plumed = false;
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                        if (!this.stay)
                        {
                            this.speed = this.standardSpeed;
                        }
                    }
                    else
                    {
                        if (this.plumed == true)
                        {
                            this.wasPlumed = true;
                        }
                        this.plumed = false;
                        if (!this.stay)
                        {
                            this.speed = 1 / 2 * this.standardSpeed;
                        }
                        if (this.team != "player" && this.DTU(this.target) > (this.engagementRadius + 25))
                        {
                            this.wander(this.XX, this.YY, 400, 190, false);
                        }
                    }
                }
                else
                {
                    if (this.team != "player")
                    {
                        this.speed = 1/2 * this.standardSpeed;
                        this.wander(this.XX, this.YY, 400, 190, false);
                    }
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.wasPlumed == true) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.075, false);
                }
                else
                {
                    this.costumeEngine(2, 0.1, true);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.wasPlumed == true)
                    {
                        this.drawUnit(atal, 568, 1001, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        if (this.plumed)
                        {
                            this.drawUnit(atal, 42, 1371, 265, 181, -1/2 * 265 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 265 * this.alphaSize, 181 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(atal, 566, 1168, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.plumed)
                        {
                            this.drawUnit(atal, 182, 1177, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(atal, 185, 1009, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume >= 1)
                {
                    if (this.wasPlumed == true)
                    {
                        this.drawUnit(atal, 568, 1001, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        if (this.costume >= 2)
                        {
                            this.wasPlumed = false;
                        }
                    }
                    else if (this.moving)
                    {
                        if (this.plumed)
                        {
                            this.drawUnit(atal, 311, 1368, 265, 181, -1/2 * 265 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 265 * this.alphaSize, 181 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(atal, 563, 1321, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.plumed)
                        {
                            this.drawUnit(atal, 182, 1177, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(atal, 185, 1009, 416, 181, -1/2 * 416 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 416 * this.alphaSize, 181 * this.alphaSize);
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(atal, 667, 1467, 265, 181, -1/2 * 265 * this.alphaSize - this.xAdjustment, -1/2 * 181 * this.alphaSize - this.yAdjustment, 265 * this.alphaSize, 181 * this.alphaSize);
            }
        }
        //DRILE
        if (this.type == "Drile")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 38 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 68 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (68 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 15)
                {
                    this.drops = [[new Item("drileSkin", this.X, this.Y), 1], [new Item("rawDrileFlesh", this.X, this.Y), 3], [new Item("drileKidney", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("drileSkin", this.X, this.Y), 1], [new Item("rawDrileFlesh", this.X, this.Y), 3]];
                }
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 70 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 399 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (399 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 15)
                {
                    this.drops = [[new Item("drileSkin", this.X, this.Y), 2], [new Item("rawDrileFlesh", this.X, this.Y), 6], [new Item("drileKidney", this.X, this.Y), 2]];
                }
                else
                {
                    this.drops = [[new Item("drileSkin", this.X, this.Y), 2], [new Item("rawDrileFlesh", this.X, this.Y), 6]];
                }
            }
            else
            {
                if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 46 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 46 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                if (player.getIntelligence() >= 15)
                {
                    this.drops = [[new Item("drileSkin", this.X, this.Y), 1], [new Item("rawDrileFlesh", this.X, this.Y), 2], [new Item("drileKidney", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("drileSkin", this.X, this.Y), 1], [new Item("rawDrileFlesh", this.X, this.Y), 2]];
                }
            }

            //AI

            if (this.alive == true)
            {
                this.friendDecider();
                this.targeting(); //this Unit type targets earlier than others

                if (this.alpha == true)
                {
                    if (this.target == player)
                    {
                        if (player.water)
                        {
                            this.engagementRadius = 124;
                            this.rangeOfSightCalculator(820, true);
                        }
                        else
                        {
                            this.engagementRadius = 97;
                            this.rangeOfSightCalculator(200, true);
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.target.water)
                        {
                            this.engagementRadius = 124;
                            this.rangeOfSightCalculator(820, true);
                        }
                        else
                        {
                            this.engagementRadius = 97;
                            this.rangeOfSightCalculator(200, true);
                        }
                    }
                    else
                    {
                        this.rangeOfSightCalculator(200, true);
                    }
                    this.Attack(12, 28);
                }
                else if (this.alpha == "massive")
                {
                    if (this.target == player)
                    {
                        if (player.water)
                        {
                            this.rangeOfSightCalculator(1220, true);
                        }
                        else
                        {
                            this.rangeOfSightCalculator(300, true);
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.target.water)
                        {
                            this.rangeOfSightCalculator(1220, true);
                        }
                        else
                        {
                            this.rangeOfSightCalculator(300, true);
                        }
                    }
                    else
                    {
                        this.rangeOfSightCalculator(300, true);
                    }
                    this.Attack(39, 61);
                }
                else
                {
                    if (this.target == player)
                    {
                        if (player.water)
                        {
                            this.engagementRadius = 112;
                            this.rangeOfSightCalculator(720, true);
                        }
                        else
                        {
                            this.engagementRadius = 74;
                            this.rangeOfSightCalculator(160, true);
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.target.water)
                        {
                            this.engagementRadius = 112;
                            this.rangeOfSightCalculator(720, true);
                        }
                        else
                        {
                            this.engagementRadius = 74;
                            this.rangeOfSightCalculator(160, true);
                        }
                    }
                    else
                    {
                        this.rangeOfSightCalculator(160, true);
                    }

                    this.Attack(9, 18);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.115, false);
                }
                else
                {
                    this.costume = 0;
                }

                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.143, false, true);
                    }
                }
                else
                {
                    this.costume2 = 0;
                }


                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
                var theCostume2 = Math.floor(this.costume2); //This rounds this.costume2 down to the nearest whole number.


                if (theCostume <= 0)
                {
                    if (!this.moving)
                    {
                        if (theCostume2 <= 0)
                        {
                            this.drawUnit(polux, 2, 14, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 1) //part open
                        {
                            this.drawUnit(polux, 2, 104, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 2) //most open
                        {
                            this.drawUnit(polux, 4, 197, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 3) //wide open
                        {
                            this.drawUnit(polux, 3, 283, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 4) //most open
                        {
                            this.drawUnit(polux, 4, 197, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 >= 5) //part open
                        {
                            this.drawUnit(polux, 2, 104, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (theCostume2 <= 0)
                        {
                            this.drawUnit(polux, 195, 13, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 1) //part open
                        {
                            this.drawUnit(polux, 195, 103, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 2) //most open
                        {
                            this.drawUnit(polux, 196, 194, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 3) //wide open
                        {
                            this.drawUnit(polux, 194, 279, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 <= 4) //most open
                        {
                            this.drawUnit(polux, 196, 194, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                        else if (theCostume2 >= 5) //part open
                        {
                            this.drawUnit(polux, 195, 103, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume >= 1)
                {
                    if (theCostume2 <= 0)
                    {
                        this.drawUnit(polux, 381, 12, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (theCostume2 <= 1) //part open
                    {
                        this.drawUnit(polux, 380, 102, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (theCostume2 <= 2) //most open
                    {
                        this.drawUnit(polux, 380, 195, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (theCostume2 <= 3) //wide open
                    {
                        this.drawUnit(polux, 380, 281, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (theCostume2 <= 4) //most open
                    {
                        this.drawUnit(polux, 380, 195, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (theCostume2 >= 5) //part open
                    {
                        this.drawUnit(polux, 380, 102, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polux, 799, 53, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
            }
        }
        //RHINOCEROS
        if (this.type == "Rhinoceros")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 200 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (140 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rhinocerosHorn", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 17 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 17 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rhinocerosHorn", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, false);
            }
            else
            {
                this.rangeOfSightCalculator(600, false);
            }

            //AI
            if (this.alive == true)
            {
                if (showUnitAttackBubble)
                {
                    if (this.alpha)
                    {
                        this.attackBubble([[54, this.rotation, 0, this.sizeRadius + 27]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                    else
                    {
                        this.attackBubble([[43, this.rotation, 0, this.sizeRadius + 23]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                }
                var aplhBub = 56;
                var regBub = 43;

                if (this.alpha == true)
                {
                    if (this.land)
                    {
                        this.effect = "smashbackIII";
                        this.Attack(6, 80);
                    }
                    else
                    {
                        this.finalAttackCostume = false;
                        this.effect = "none";
                    }
                    this.callForNearbyHelpFromType(250, "Rhinoceros");
                }
                else
                {
                    if (this.land)
                    {
                        this.Attack(3, 65);
                        this.effect = "smashbackIII";
                    }
                    else
                    {
                        this.finalAttackCostume = false;
                        this.effect = "none";
                    }

                    this.callForNearbyHelpFromType(250, "Rhinoceros");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.lastTrrgt != "player")
                    {
                        this.doCharge = false;
                        this.lastTrrgt = "player";
                    }
                    this.dtp = this.DTP();

                    if (this.dtp <= this.rangeOfSight && !this.doCharge)
                    {

                        this.moving = false;
                        this.attackWait = 0;
                        this.pointTowardsPlayer();
                    }
                    if (this.rotation == this.newRotation)
                    {
                        this.attackWait = 2.5;
                        this.doCharge = true;
                    }

                    if (this.doCharge && this.dtp > this.rangeOfSight)
                    {
                        this.doCharge = false;
                    }
                    if (this.doCharge)
                    {
                        this.moveInRelationToPlayer();
                    }

                    if (this.hurtByPlayer)
                    {
                        this.doCharge = false;
                        this.hurtByPlayer = false;
                    }
                }
                else if (this.target != "none" && typeof(this.target) != "undefined")
                {
                    if (this.lastTrrgt != this.target.barcode)
                    {
                        this.doCharge = false;
                        this.lastTrrgt = this.target.barcode;
                    }
                    this.dtu = this.DTU(this.target);

                    if (this.dtu <= this.rangeOfSight && !this.doCharge)
                    {
                        this.moving = false;
                        this.attackWait = 0;
                        this.pointTowards(this.target);
                    }

                    if (this.rotation == this.newRotation)
                    {
                        this.attackWait = 2.5;
                        this.doCharge = true;
                    }

                    if (this.doCharge && this.dtu > this.rangeOfSight)
                    {
                        this.doCharge = false;
                    }
                    if (this.doCharge)
                    {
                        this.moveInRelationToThing(this.target);
                    }
                    if (this.lastHealth != this.health)
                    {
                        this.pointTowards(this.target);
                    }
                    this.lastHealth = this.health;
                }
            }
            else
            {
                this.doCharge = false;
                this.moving = false;
            }

            //ANIMATIONS
            var szr = 1;
            if (this.alive == true)
            {
                if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.attacking = true;
                    this.costumeEngine(2, 0.05, false);
                }
                else
                {
                    this.attacking = false;
                    this.costume = 0;
                    this.drawUnit(polux, 71, 1068, 219, 103, -1/2 * 219 * this.alphaSize * szr - this.xAdjustment, -1/2 * 103 * this.alphaSize * szr - this.yAdjustment, 219 * this.alphaSize * szr, 103 * this.alphaSize * szr);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.moving) //moving is attacking
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(polux, 339, 1066, 219, 103, -1/2 * 219 * this.alphaSize * szr - this.xAdjustment, -1/2 * 103 * this.alphaSize * szr - this.yAdjustment, 219 * this.alphaSize * szr, 103 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 1)
                {

                    if (this.alpha)
                    {
                        if (this.attackBubble([[aplhBub, this.rotation, 0, this.sizeRadius + 27]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }
                    else
                    {
                        if (this.attackBubble([[regBub, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }

                    this.drawUnit(polux, 668, 1065, 219, 103, -1/2 * 219 * this.alphaSize * szr - this.xAdjustment, -1/2 * 103 * this.alphaSize * szr - this.yAdjustment, 219 * this.alphaSize * szr, 103 * this.alphaSize * szr);
                }
                else if (theCostume >= 2)
                {
                    if (this.alpha)
                    {
                        if (this.attackBubble([[aplhBub, this.rotation, 0, this.sizeRadius + 27]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }
                    else
                    {
                        if (this.attackBubble([[regBub, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }
                    this.drawUnit(polux, 339, 1066, 219, 103, -1/2 * 219 * this.alphaSize * szr - this.xAdjustment, -1/2 * 103 * this.alphaSize * szr - this.yAdjustment, 219 * this.alphaSize * szr, 103 * this.alphaSize * szr);
                }
            }
            else
            {
                this.drawUnit(polux, 97, 540, 219, 103, -1/2 * 219 * this.alphaSize * szr - this.xAdjustment, -1/2 * 103 * this.alphaSize * szr - this.yAdjustment, 219 * this.alphaSize * szr, 103 * this.alphaSize * szr);
            }
        }
        //YIOSHK
        if (this.type == "Yioshk")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 30 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (30 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawYioshkFlesh", this.X, this.Y), 2]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 22 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 22 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawYioshkFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(800, true);
            }
            else
            {
                this.rangeOfSightCalculator(700, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(11, 8);
                }
                else
                {
                    this.Attack(9, 6);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 63, 47, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(mufmuf, 4, 46, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 34, 22, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 61, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 5, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 122, 48, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 4, 46, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 122, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 5, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 122, 48, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 4, 46, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 61, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 5, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mufmuf, 4, 102, 39, 28, -1/2 * 39 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 39 * this.alphaSize, 28 * this.alphaSize);
            }
        }
        //BORB BEETLE
        if (this.type == "BorbBeetle")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 0 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 0 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (0 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else
            {
                if (Math.max(0, 0 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 0 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 0 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(70, true);
            }
            else
            {
                this.rangeOfSightCalculator(45, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.target.insect == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(0.20, 0.10);
                    }
                    else
                    {
                        this.Attack(0.15, 0.05);
                    }
                }

                //bug gets crushed if player is moving over it
                if (this.aiTimer > 0.3 && player.movingType != 0)
                {
                    this.aiTimer = 0;
                    if (this.DTP() <= (player.mySize - this.sizeRadius))
                    {
                        if (this.alpha == true)
                        {
                            if (Math.random() > 0.6)
                            {
                                this.health = 0;
                            }
                        }
                        else
                        {
                            if (Math.random() > 0.3)
                            {
                                this.health = 0;
                            }
                        }
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointAwayFromPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    if (this.target.insect == true)
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                    else
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.090, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(milk, 692, 469, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(milk, 732, 469, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(milk, 692, 469, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(milk, 690, 506, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(milk, 733, 507, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(milk, 692, 469, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(milk, 733, 537, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(milk, 690, 535, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(milk, 733, 570, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(milk, 691, 569, 40, 27, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 27 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 27 * this.alphaSize);
            }
        }
        //BOAR
        if (this.type == "Boar")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 60 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (60 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawBoarFlesh", this.X, this.Y), 1]];
                if (player.getIntelligence() >= 24)
                {
                    this.drops.push([new Item("rawPorkbelly", this.X, this.Y), 1]);
                }
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (3 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 25 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 25 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawBoarFlesh", this.X, this.Y), 1]];
                if (Math.round(Math.random()) == 0 && player.getIntelligence() >= 24)
                {
                    this.drops.push([new Item("rawPorkbelly", this.X, this.Y), 1]);
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(650, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(400, false);
            }
            else
            {
                this.rangeOfSightCalculator(600, false);
            }

            //AI
            var aplhBub = 29;
            var bbyBub = 6;
            var regBub = 22;
            if (this.alive == true)
            {
                if (showUnitAttackBubble)
                {
                    if (this.alpha)
                    {
                        this.attackBubble([[aplhBub, this.rotation, 0, this.sizeRadius + 30]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                    else if (this.alpha == "baby")
                    {
                        this.attackBubble([[bbyBub, this.rotation, 0, this.sizeRadius + 7]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                    else
                    {
                        this.attackBubble([[regBub, this.rotation, 0, this.sizeRadius + 21]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                }

                if (this.alpha == true)
                {
                    if (this.land)
                    {
                        this.effect = "smashbackI";
                        this.Attack(8, 13);
                    }
                    else
                    {
                        this.finalAttackCostume = false;
                        this.effect = "none";
                    }
                }
                else if (this.alpha == "baby")
                {
                    if (this.land)
                    {
                        this.effect = "smashbackI";
                        this.Attack(3, 4);
                    }
                    else
                    {
                        this.finalAttackCostume = false;
                        this.effect = "none";
                    }
                }
                else
                {
                    if (this.land)
                    {
                        this.Attack(7, 9);
                        this.effect = "smashbackI";
                    }
                    else
                    {
                        this.finalAttackCostume = false;
                        this.effect = "none";
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.lastTrrgt != "player")
                    {
                        this.doCharge = false;
                        this.lastTrrgt = "player";
                    }
                    this.dtp = this.DTP();

                    if (this.dtp <= this.rangeOfSight && !this.doCharge)
                    {

                        this.moving = false;
                        this.attackWait = 0;
                        this.pointTowardsPlayer();
                    }
                    if (this.rotation == this.newRotation)
                    {
                        this.attackWait = 0.5;
                        this.doCharge = true;
                    }

                    if (this.doCharge && this.dtp > this.rangeOfSight)
                    {
                        this.doCharge = false;
                    }
                    if (this.doCharge)
                    {
                        this.moveInRelationToPlayer();
                    }

                    if (this.hurtByPlayer)
                    {
                        this.doCharge = false;
                        this.hurtByPlayer = false;
                    }
                }
                else if (this.target != "none" && typeof(this.target) != "undefined")
                {
                    if (this.lastTrrgt != this.target.barcode)
                    {
                        this.doCharge = false;
                        this.lastTrrgt = this.target.barcode;
                    }
                    this.dtu = this.DTU(this.target);

                    if (this.dtu <= this.rangeOfSight && !this.doCharge)
                    {
                        this.moving = false;
                        this.attackWait = 0;
                        this.pointTowards(this.target);
                    }

                    if (this.rotation == this.newRotation)
                    {
                        this.attackWait = 0.5;
                        this.doCharge = true;
                    }

                    if (this.doCharge && this.dtu > this.rangeOfSight)
                    {
                        this.doCharge = false;
                    }
                    if (this.doCharge)
                    {
                        this.moveInRelationToThing(this.target);
                    }
                    if (this.lastHealth != this.health)
                    {
                        this.pointTowards(this.target);
                    }
                    this.lastHealth = this.health;
                }
            }
            else
            {
                this.doCharge = false;
                this.moving = false;
            }

            //ANIMATIONS
            var szr = 1/4;
            if (this.alive == true)
            {
                if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.attacking = true;
                    this.costumeEngine(2, 0.05, false);
                }
                else
                {
                    this.attacking = false;
                    this.costume = 0;
                    this.drawUnit(atal, 10, 1649, 205, 101, -1/2 * 205 * this.alphaSize * szr - this.xAdjustment, -1/2 * 101 * this.alphaSize * szr - this.yAdjustment, 205 * this.alphaSize * szr, 101 * this.alphaSize * szr);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.moving) //moving is attacking
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(atal, 533, 1661, 205, 101, -1/2 * 205 * this.alphaSize * szr - this.xAdjustment, -1/2 * 101 * this.alphaSize * szr - this.yAdjustment, 205 * this.alphaSize * szr, 101 * this.alphaSize * szr);
                    }
                }
                else if (theCostume >= 1)
                {

                    if (this.alpha)
                    {
                        if (this.attackBubble([[aplhBub, this.rotation, 0, this.sizeRadius + 30]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }
                    else if (this.alpha == "baby")
                    {
                        if (this.attackBubble([[bbyBub, this.rotation, 0, this.sizeRadius + 7]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }
                    else
                    {
                        if (this.attackBubble([[regBub, this.rotation, 0, this.sizeRadius + 21]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                        {
                            this.damageDealt = false;
                        }
                    }

                    this.drawUnit(atal, 245, 1657, 205, 101, -1/2 * 205 * this.alphaSize * szr - this.xAdjustment, -1/2 * 101 * this.alphaSize * szr - this.yAdjustment, 205 * this.alphaSize * szr, 101 * this.alphaSize * szr);
                }
            }
            else
            {
                this.drawUnit(atal, 766, 1664, 227, 153, -1/2 * 227 * this.alphaSize * szr - this.xAdjustment, -1/2 * 153 * this.alphaSize * szr - this.yAdjustment, 227 * this.alphaSize * szr, 153 * this.alphaSize * szr);
            }
        }
        //BeachMite
        if (this.type == "BeachMite")
        {
            //Set Drops and experience
            if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 0.5 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (0.5 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [[new Item("beachMiteInnards", this.X, this.Y), 1]];

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(125, "extremely");

            //AI
            if (this.alive == true)
            {
                //CARRION FEASTING
                var carrionTarget = "none";
                var carrionDist = 1000000000;
                var carrionDistNew = 0;
                //Appear to be eating dead bodies
                for (var carrionNum = 0; carrionNum < deadAIList.length; carrionNum++)
                {
                    if (deadAIList[carrionNum].type != "BeachMite" && deadAIList[carrionNum].flotation == false)
                    {
                        carrionDistNew = Math.sqrt((this.X - deadAIList[carrionNum].X) * (this.X - deadAIList[carrionNum].X) + (this.Y - deadAIList[carrionNum].Y) * (this.Y - deadAIList[carrionNum].Y));
                        if (carrionDistNew <= carrionDist)
                        {
                            carrionDist = carrionDistNew;
                            carrionTarget = deadAIList[carrionNum];
                        }
                    }
                }

                this.callForNearbyHelpFromType(325, "BeachMite");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    var playDistEr = this.DTP();
                    if (carrionDist < playDistEr && playDistEr > this.rangeOfSight && carrionTarget != "none")
                    {
                        this.pointTowards(carrionTarget);
                        if (carrionDist <= this.engagementRadius)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            this.attacking = false;
                            this.rangeOfSightCalculator(4225, "mildy");
                            this.moveInRelationToThing(carrionTarget);
                        }
                    }
                    else
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    var unDistIt = this.DTU(this.target);
                    if (carrionDist < unDistIt && unDistIt > this.rangeOfSight && carrionTarget != "none")
                    {
                        this.pointTowards(carrionTarget);
                        if (carrionDist <= this.engagementRadius)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            this.attacking = false;
                            this.rangeOfSightCalculator(4225, "mildy");
                            this.moveInRelationToThing(carrionTarget);
                        }
                    }
                    else
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 14, 166, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(norc, 65, 166, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 14, 166, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 14, 186, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 39, 166, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 38, 186, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 65, 166, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 64, 185, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 39, 166, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 90, 174, 24, 22, -1/2 * 24 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 24 * this.alphaSize, 22 * this.alphaSize);
            }
        }
        //CANGREJO
        if (this.type == "Cangrejo")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 19 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 262 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (262 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("crabFlesh", this.X, this.Y), 6]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 51 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1640 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1640 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("crabFlesh", this.X, this.Y), 20]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 3 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 22 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (22 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("crabFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 11 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 102 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 102 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("crabFlesh", this.X, this.Y), 3]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(950, false);
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(1350, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(500, false);
            }
            else
            {
                this.rangeOfSightCalculator(600, false);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(9, 12);
                    this.callForNearbyHelpFromType(150, "Cangrejo");
                }
                else if (this.alpha == "massive")
                {
                    this.Attack(23, 37);
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(1, 2.5);
                    this.callForNearbyHelpFromType(700, "Cangrejo");
                }
                else
                {
                    this.Attack(5, 7);
                    this.callForNearbyHelpFromType(150, "Cangrejo");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.08, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(11, 0.14, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 188, 84, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(norc, 290, 6, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 291, 85, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(norc, 381, 7, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 377, 87, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(norc, 487, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 478, 89, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(norc, 602, 6, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 478, 89, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 291, 85, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 589, 88, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 676, 86, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 779, 85, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 779, 85, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
                else if (theCostume >= 10)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 591, 87, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 188, 5, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 697, 6, 85, 71, -1/2 * 85 * this.alphaSize - this.xAdjustment, -1/2 * 71 * this.alphaSize - this.yAdjustment, 85 * this.alphaSize, 71 * this.alphaSize);
            }
        }
        //ANEMONE
        if (this.type == "Anemone")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (45 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("anemoneTentacle", this.X, this.Y), 2]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 5 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (5 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("anemoneTentacle", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(400, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(240, false);
            }
            else
            {
                this.rangeOfSightCalculator(320, false);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(0, 0);
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(0, 0);
                }
                else
                {
                    this.Attack(0, 0);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    if (this.DTP() < 140 || this.disturbed)
                    {
                        if (this.hacerMover)
                        {
                            this.moveInRelationToPlayer();
                        }
                        this.moving = true;
                    }
                    else
                    {
                        this.costume = 0;
                        this.moving = false;
                    }
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    if (this.DTU(this.target) < 170)
                    {
                        if (this.hacerMover)
                        {
                            this.moveInRelationToThing(this.target);
                        }
                        this.moving = true;
                    }
                    else
                    {
                        this.costume = 0;
                        this.moving = false;
                    }
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.08, true);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.12, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.flashAnimate(90, this.rotation, 1, [{image: norc, imgX: 489, imgY: 228, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 552, imgY: 228, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 622, imgY: 230, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 770, imgY: 229, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 690, imgY: 230, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}]);
                    }
                    else if (this.moving)
                    {
                        this.hacerMover = false;
                        this.tentaclePull = false;
                        this.drawUnit(norc, 622, 231, 53, 49, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 49 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 49 * this.alphaSize);
                    }
                    else
                    {
                        this.flashAnimate(90, this.rotation, 1, [{image: norc, imgX: 489, imgY: 228, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 552, imgY: 228, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 622, imgY: 230, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 770, imgY: 229, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 690, imgY: 230, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}]);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(norc, 480, 334, 71, 50, -1/2 * 71 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 71 * this.alphaSize, 50 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.hacerMover = false;
                        this.tentaclePull = false;
                        this.drawUnit(norc, 480, 334, 71, 50, -1/2 * 71 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 71 * this.alphaSize, 50 * this.alphaSize);
                    }
                    else
                    {
                        this.flashAnimate(90, this.rotation, 1, [{image: norc, imgX: 489, imgY: 228, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 552, imgY: 228, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 622, imgY: 230, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 770, imgY: 229, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}, {image: norc, imgX: 690, imgY: 230, portionW: 53, portionH: 49, adjX: -1/2 * 53 * this.alphaSize, adjY: -1/2 * 49 * this.alphaSize, width: 53 * this.alphaSize, height: 49 * this.alphaSize}]);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.hacerAtaque = true;
                        this.drawUnit(norc, 486, 286, 53, 49, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 49 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 49 * this.alphaSize);
                    }
                    else
                    {
                        if (this.tentaclePull)
                        {
                            this.hacerMover = true;
                        }
                        this.drawUnit(norc, 486, 286, 53, 49, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 49 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 49 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.hacerAtaque = true;
                        this.drawUnit(norc, 530, 287, 66, 50, -1/2 * 66 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 66 * this.alphaSize, 50 * this.alphaSize);
                    }
                    else
                    {
                        if (this.tentaclePull)
                        {
                            this.hacerMover = true;
                        }
                        this.drawUnit(norc, 530, 287, 66, 50, -1/2 * 66 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 66 * this.alphaSize, 50 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.hacerAtaque = true;
                        this.drawUnit(norc, 587, 288, 66, 50, -1/2 * 66 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 66 * this.alphaSize, 50 * this.alphaSize);
                    }
                    else
                    {
                        if (this.tentaclePull)
                        {
                            this.hacerMover = true;
                        }
                        this.drawUnit(norc, 587, 288, 66, 50, -1/2 * 66 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 66 * this.alphaSize, 50 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        if (this.hacerAtaque == true)
                        {
                            this.hacerAtaque = false;
                            scenicList.push(new Scenery("anemoneSlime", this.X + Math.cos(this.rotation) * -18 * this.alphaSize, this.Y + Math.sin(this.rotation) * -18 * this.alphaSize, this.rotation, this.alphaSize));
                        }
                        this.drawUnit(norc, 648, 287, 71, 50, -1/2 * 71 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 71 * this.alphaSize, 50 * this.alphaSize);
                    }
                    else
                    {
                        this.tentaclePull = true;
                        this.drawUnit(norc, 648, 287, 71, 50, -1/2 * 71 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 71 * this.alphaSize, 50 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 734, 286, 71, 50, -1/2 * 71 * this.alphaSize - this.xAdjustment, -1/2 * 50 * this.alphaSize - this.yAdjustment, 71 * this.alphaSize, 50 * this.alphaSize);
            }
        }
        //KOOBU
        if (this.type == "Koobu")
        {
            //Set Drops and experience

            if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 1 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = 1 * ((player.getIntelligence() / 50) + 1) / 10;
            }

            this.drops = [[new Item("koobuPelt", this.X, this.Y), 1], [new Item("rawKoobuFlesh", this.X, this.Y), 1]];


            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(260, "mildly");

            //AI
            if (this.alive == true)
            {

                this.callForNearbyHelpFromType(260, "Koobu");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointAwayFromPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointAway(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.075, false);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 567, 710, 37, 25, -1/2 * 37 * this.alphaSize - this.xAdjustment, -1/2 * 25 * this.alphaSize - this.yAdjustment, 37 * this.alphaSize, 25 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 530, 710, 37, 25, -1/2 * 37 * this.alphaSize - this.xAdjustment, -1/2 * 25 * this.alphaSize - this.yAdjustment, 37 * this.alphaSize, 25 * this.alphaSize);
                    }
                }
                else if (theCostume >= 1)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 610, 710, 37, 25, -1/2 * 37 * this.alphaSize - this.xAdjustment, -1/2 * 25 * this.alphaSize - this.yAdjustment, 37 * this.alphaSize, 25 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 530, 710, 37, 25, -1/2 * 37 * this.alphaSize - this.xAdjustment, -1/2 * 25 * this.alphaSize - this.yAdjustment, 37 * this.alphaSize, 25 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 651, 715, 37, 25, -1/2 * 37 * this.alphaSize - this.xAdjustment, -1/2 * 25 * this.alphaSize - this.yAdjustment, 37 * this.alphaSize, 25 * this.alphaSize);
            }
        }
        //MUD BEETLE
        if (this.type == "MudBeetle")
        {
            //Set Drops and experience

            if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 3 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = 3 * ((player.getIntelligence() / 50) + 1) / 10;
            }

            this.drops = [[new Item("mudBeetleLeg", this.X, this.Y), 1]];


            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(390, true);

            //AI
            if (this.alive == true)
            {
                this.callForNearbyHelpFromType(480, "MudBeetle");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointAwayFromPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointAway(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(8, 0.32, false);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 653, 343, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 724, 344, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 653, 343, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 795, 344, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 866, 343, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
                else if (theCostume >= 7)
                {
                    if (this.moving)
                    {
                        this.drawUnit(norc, 795, 344, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 584, 342, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 938, 346, 61, 45, -1/2 * 61 * this.alphaSize - this.xAdjustment, -1/2 * 45 * this.alphaSize - this.yAdjustment, 61 * this.alphaSize, 45 * this.alphaSize);
            }
        }
        //SKOL
        if (this.type == "Skol")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 34 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (34 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawSkolFlesh", this.X, this.Y), 5], [new Item("skolPelt", this.X, this.Y), 4]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 37 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 140 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (140 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawSkolFlesh", this.X, this.Y), 10], [new Item("skolPelt", this.X, this.Y), 9]];
            }
            else
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 26 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 26 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawSkolFlesh", this.X, this.Y), 1], [new Item("skolPelt", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(625, true);
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(900, true);
            }
            else
            {
                this.rangeOfSightCalculator(575, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(13, 7);
                    this.callForNearbyHelpFromType(600, "Skol");
                }
                else if (this.alpha == "massive")
                {
                    this.Attack(35, 10);
                    this.callForNearbyHelpFromType(800, "Skol");
                }
                else
                {
                    this.Attack(5, 5);
                    this.callForNearbyHelpFromType(550, "Skol");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS
            var szx = 1.9
            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.15, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theng, 354, 2, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(theng, 62, 4, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theng, 3, 46, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(theng, 144, 3, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theng, 62, 47, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(theng, 223, 3, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theng, 144, 50, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(theng, 62, 4, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theng, 225, 52, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(theng, 4, 4, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(theng, 292, 52, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(theng, 289, 2, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(theng, 356, 55, 53, 34, -1/2 * 53 * this.alphaSize * szx - this.xAdjustment, -1/2 * 34 * this.alphaSize * szx - this.yAdjustment, 53 * this.alphaSize * szx, 34 * this.alphaSize * szx);
            }
        }
        //MOLTE
        if (this.type == "Molte")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 24 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 115 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (115 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                var rrarnd = Math.random();
                if (rrarnd > 0.3)
                {
                    this.drops = [[new Item("rawMolteFlesh", this.X, this.Y), 7], [new Item("molteHide", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawMolteFlesh", this.X, this.Y), 7], [new Item("molteHide", this.X, this.Y), 1], [new Item("molteHead", this.X, this.Y), 1]];
                }
            }
            else
            {
                if (Math.max(0, 16 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 90 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 90 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                var rrarnd = Math.random();
                if (rrarnd > 0.3)
                {
                    this.drops = [[new Item("rawMolteFlesh", this.X, this.Y), 5], [new Item("molteHide", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawMolteFlesh", this.X, this.Y), 5], [new Item("molteHide", this.X, this.Y), 1], [new Item("moltePaw", this.X, this.Y), 1]];
                }
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(19, 9);
                }
                else
                {
                    this.Attack(14, 7);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    //RANGE OF SIGHT (anything related to range of sight)
                    if (this.alpha == true)
                    {
                        if (player.health < (2/3 * player.healthMAX))
                        {
                            this.rangeOfSightCalculator(1200, true);
                        }
                        else if (wKey || sKey || aKey || dKey || spaceKey || eKey)
                        {
                            this.rangeOfSightCalculator(800, true);
                        }
                        else
                        {
                            this.disturbed = false;
                            this.rangeOfSightCalculator(200, true);
                        }
                    }
                    else
                    {
                        if (player.health < (2/3 * player.healthMAX))
                        {
                            this.rangeOfSightCalculator(1100, true);
                        }
                        else if (wKey || sKey || aKey || dKey || spaceKey || eKey)
                        {
                            this.rangeOfSightCalculator(700, true);
                        }
                        else
                        {
                            this.disturbed = false;
                            this.rangeOfSightCalculator(120, true);
                        }
                    }

                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    //RANGE OF SIGHT (anything related to range of sight)
                    if (this.alpha == true)
                    {
                        if (this.target.health < (2/3 * this.target.healthMAX))
                        {
                            this.rangeOfSightCalculator(1200, true);
                        }
                        else if (this.target.moving)
                        {
                            this.rangeOfSightCalculator(800, true);
                        }
                        else
                        {
                            this.rangeOfSightCalculator(200, true);
                        }
                    }
                    else
                    {
                        if (this.target.health < (2/3 * this.target.healthMAX))
                        {
                            this.rangeOfSightCalculator(1100, true);
                        }
                        else if (this.target.moving)
                        {
                            this.rangeOfSightCalculator(700, true);
                        }
                        else
                        {
                            this.rangeOfSightCalculator(120, true);
                        }
                    }

                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS
            var szx = 2;
            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.17, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(7, 0.132, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(molte, 115, 117, 102, 73, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 73 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 73 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(molte, 106, 0, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        if (player.halfAcid != true)
                        {
                            player.stunnedTime = 1;
                            player.stunnedIII = true;
                        }
                        this.drawUnit(molte, 309, 117, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(molte, 207, 0, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(molte, 205, 118, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(molte, 106, 0, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(molte, 309, 117, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(molte, 322, 0, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(molte, 8, 116, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(molte, 106, 0, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(molte, 398, 118, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(molte, 207, 0, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(molte, 3, 1, 102, 72, -1/2 * 102 * this.alphaSize * szx - this.xAdjustment, -1/2 * 72 * this.alphaSize * szx - this.yAdjustment, 102 * this.alphaSize * szx, 72 * this.alphaSize * szx);
            }
        }
        //SPRITE
        if (this.type == "Sprite")
        {
            //Set Drops and experience
            if (Math.max(0, 182 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 10 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [[new Item("sprite", this.X, this.Y), 1]];


            this.rangeOfSightCalculator(2922, true);


            //AI
            if (this.alive == true)
            {
                //this.timeResistance = timeSpeed; //this makes sprites resistant to time slowing spells etc.

                //sprites don't show their health bar
                this.healthShownTime = 0;
                this.showHealthTime = 0;

                this.Attack(100, 32);

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                //fog generation
                var fogs = 0;
                for (var l = 0; l < scenicList.length; l++)
                {
                    if (scenicList[l].type == "fog" || scenicList[l].type == "highFog" || scenicList[l].type == "lowFog")
                    {
                        fogs += 1;
                    }
                }
                if (fogs <= 22)
                {
                    if (new Date().getTime() - this.fogGenTime > 8000)
                    {
                        this.fogGenTime = new Date().getTime();
                        var boop = Math.random();

                        if (boop <= 0.3)
                        {
                            scenicList.push(new Scenery("highFog", this.X + Math.random() * 4400 - 2200, this.Y + Math.random() * 4400 - 2200, Math.random() * 2*Math.PI, 0.55 + Math.random(), Math.min(1, 0.1 + Math.random())));
                        }
                        else if (boop <= 0.9)
                        {
                            scenicList.push(new Scenery("fog", this.X + Math.random() * 4400 - 2200, this.Y + Math.random() * 4400 - 2200, Math.random() * 2*Math.PI, 0.55 + Math.random(), Math.min(1, 0.1 + Math.random())));
                        }
                        else
                        {
                            scenicList.push(new Scenery("lowFog", this.X + Math.random() * 4400 - 2200, this.Y + Math.random() * 4400 - 2200, Math.random() * 2*Math.PI, 0.55 + Math.random(), Math.min(1, 0.1 + Math.random())));
                        }
                    }
                }

                if (this.aiTimer > 40 && this.mood != 2 || this.mood == -1)
                {
                    this.aiTimer = 0;
                    this.mood = Math.random();
                    if (this.mood > 0.75)
                    {
                        for (var l = 0; l < Inventory.length; l++)
                        {
                            if (Inventory[l][0].type == "itlinBranch") //the itlin branch calms the mood of the sprite so that it does not try to murder you.
                            {
                                this.mood = 0.4444;
                                break;
                            }
                        }
                    }
                    this.xAdder = 0;
                    this.yAdder = 0;
                    this.doMischiefTime = new Date().getTime();
                    this.didAttack = false;
                    this.spritePhaseTime = new Date().getTime();
                    this.phase = "nada";
                }

                if (this.disturbed)
                {
                    this.mood = 2;
                }

                if (this.mood <= 0.25) //ambivalent
                {
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                    this.engagementRadius = 10;
                    this.mode = "faded";
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        if (this.DTP() < 150)
                        {
                            this.X += (Math.random() * 1200 - 600);
                            this.Y += (Math.random() * 1200 - 600);
                        }
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        if (this.DTU(this.target) < 150)
                        {
                            this.X += (Math.random() * 1200 - 600);
                            this.Y += (Math.random() * 1200 - 600);
                        }
                    }
                }
                else if (this.mood <= 0.5) //mischeivous / hangry
                {
                    //fly in a wacky pattern
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                    this.engagementRadius = 10;
                    this.xAdder += 0.05 + (Math.random() / 100);
                    this.yAdder += 0.05 + (Math.random() / 100);
                    this.mode = "none";
                    this.pointTowards({X: this.X + this.xAdder * Math.sin(this.xAdder), Y: this.Y + this.yAdder * Math.cos(this.yAdder)});
                    this.moveInRelationToPlayer();

                    if (this.DTP() > 2900)
                    {
                        this.X = X + Math.random() * 1800 - 900;
                        this.Y = Y + Math.random() * 1800 - 900;
                    }

                    //teleport away hostile with fog
                    if (this.target == player)
                    {
                        if (this.DTP() < 150)
                        {
                            if (fogs >= 19)
                            {
                                for (var l = 0; l < scenicList.length; l++)
                                {
                                    if (scenicList[l].type == "fog" || scenicList[l].type == "lowFog" || scenicList[l].type == "highFog")
                                    {
                                        scenicList.splice(l, 1);
                                        break;
                                    }
                                }
                            }

                            X += (Math.random() * 700 - 350);
                            Y += (Math.random() * 700 - 350);

                            scenicList.push(new Scenery("fog", X, Y, Math.random() * 2*Math.PI, 0.66 + Math.random(), Math.min(1, 0.6 + Math.random())));
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.DTU(this.target) < 150)
                        {
                            if (fogs >= 19)
                            {
                                for (var l = 0; l < scenicList.length; l++)
                                {
                                    if (scenicList[l].type == "fog" || scenicList[l].type == "lowFog" || scenicList[l].type == "highFog")
                                    {
                                        scenicList.splice(l, 1);
                                        break;
                                    }
                                }
                            }

                            this.target.X += (Math.random() * 700 - 350);
                            this.target.Y += (Math.random() * 700 - 350);

                            scenicList.push(new Scenery("fog", this.target.X, this.target.Y, Math.random() * 2*Math.PI, 0.66 + Math.random(), Math.min(1, 0.6 + Math.random())));
                        }
                    }

                    //rearrange items
                    if (new Date().getTime() - this.doMischiefTime > 2000)
                    {
                        this.doMischiefTime = new Date().getTime();
                        for (var l = 0; l < worldItems.length; l++)
                        {
                            if (worldItems[l][0].utility != "questItem" && worldItems[l][0].type != "salt" && worldItems[l][0].type != "salt")
                            {
                                if (this.DTU(worldItems[l][0]) < 3000)
                                {
                                    if (worldItems[l][0].utility == "food")
                                    {
                                        worldItems[l][0].X += Math.min(50, 50 / worldItems[l][0].weight) * Math.cos(Math.atan2(this.Y - worldItems[l][0].Y, this.X - worldItems[l][0].X));
                                        worldItems[l][0].Y += Math.min(50, 50 / worldItems[l][0].weight) * Math.sin(Math.atan2(this.Y - worldItems[l][0].Y, this.X - worldItems[l][0].X));
                                        if (this.DTU(worldItems[l][0]) < 51);
                                        {
                                            worldItems.splice(l, 1);
                                            this.saltMak += 1;
                                            this.healthMAX += 2;
                                            this.health = Math.min(this.healthMAX, this.health + 6);
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        worldItems[l][0].X += Math.random() * 900 - 450;
                                        worldItems[l][0].Y += Math.random() * 900 - 450;
                                    }
                                }
                            }
                        }
                    }
                    //release salt as excrement
                    if (this.saltMak >= 4)
                    {
                        worldItems.push([new Item("salt", this.X, this.Y), 1]);
                        this.saltMak -= 4;
                    }
                }
                else if (this.mood <= 0.75) //shy
                {
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                    this.engagementRadius = 10;
                    this.mode = "idle";
                    if (this.aiTimer <= 4)
                    {
                        this.rotation = Math.random() * Math.PI * 2;

                        if (fogs > 0)
                        {
                            var frrth = -1;
                            var thrrd = -1;
                            var secndd = -1;
                            var frrst = -1;
                            for (var l = 0; l < scenicList.length; l++)
                            {
                                if (scenicList[l].type == "fog" || scenicList[l].type == "highFog")
                                {
                                    if (scenicList[l].information > 0.77 && scenicList[l].temporary >= 1)
                                    {
                                        frrst = l;
                                    }
                                    else if (scenicList[l].information > 0.77 || scenicList[l].temporary >= 1)
                                    {
                                        secndd = l;
                                    }
                                    else
                                    {
                                        thrrd = l;
                                    }
                                }
                                else if (scenicList[l].type == "lowFog")
                                {
                                    frrth = l;
                                }
                            }

                            if (frrst != -1)
                            {
                                this.X = scenicList[frrst].X;
                                this.Y = scenicList[frrst].Y;
                            }
                            else if (secndd != -1)
                            {
                                this.X = scenicList[secndd].X;
                                this.Y = scenicList[secndd].Y;
                            }
                            else if (thrrd != -1)
                            {
                                this.X = scenicList[thrrd].X;
                                this.Y = scenicList[thrrd].Y;
                            }
                            else if (frrth != -1)
                            {
                                this.X = scenicList[frrth].X;
                                this.Y = scenicList[frrth].Y;
                            }
                        }
                    }

                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        if (this.DTP() < 200)
                        {
                            if (fogs >= 19)
                            {
                                for (var l = 0; l < scenicList.length; l++)
                                {
                                    if (scenicList[l].type == "fog" || scenicList[l].type == "lowFog" || scenicList[l].type == "highFog")
                                    {
                                        scenicList.splice(l, 1);
                                        break;
                                    }
                                }
                            }
                            this.X += (Math.random() * 2800 - 1400);
                            this.Y += (Math.random() * 2800 - 1400);
                            scenicList.push(new Scenery("fog", this.X, this.Y, Math.random() * 2*Math.PI, 0.77 + Math.random(), Math.min(1, 0.8 + Math.random())));
                        }
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        if (this.DTU(this.target) < 200)
                        {
                            if (fogs >= 19)
                            {
                                for (var l = 0; l < scenicList.length; l++)
                                {
                                    if (scenicList[l].type == "fog" || scenicList[l].type == "lowFog" || scenicList[l].type == "highFog")
                                    {
                                        scenicList.splice(l, 1);
                                        break;
                                    }
                                }
                            }
                            this.X += (Math.random() * 2800 - 1400);
                            this.Y += (Math.random() * 2800 - 1400);
                            scenicList.push(new Scenery("fog", this.X, this.Y, Math.random() * 2*Math.PI, 0.77 + Math.random(), Math.min(1, 0.8 + Math.random())));
                        }
                    }

                    if (this.DTP() > 4000)
                    {
                        if (fogs >= 22)
                        {
                            for (var l = 0; l < scenicList.length; l++)
                            {
                                if (scenicList[l].type == "fog" || scenicList[l].type == "lowFog" || scenicList[l].type == "highFog")
                                {
                                    scenicList.splice(l, 1);
                                    break;
                                }
                            }
                        }
                        this.X = X + Math.random() * 3200 - 1600;
                        this.Y = Y + Math.random() * 3200 - 1600;
                        scenicList.push(new Scenery("fog", this.X, this.Y, Math.random() * 2*Math.PI, 1, Math.min(1, 0.8 + Math.random())));
                    }
                }
                else //maniacal
                {
                    this.engagementRadius = 145;
                    if (this.mood == 2)
                    {
                        this.target = player;
                    }

                    if (new Date().getTime() - this.spritePhaseTime > 2622 || new Date().getTime() - this.spritePhaseTime > 1000 && this.didAttack == true)
                    {
                        this.spritePhaseTime = new Date().getTime();
                        this.mode = "none";
                        this.didAttack = false;
                        this.yAdjustment = 0;
                        this.xAdjustment = 0;

                        var booby = Math.random();
                        if (booby <= 0.33)
                        {
                            this.phase = "violence";
                        }
                        else if (booby <= 0.66)
                        {
                            this.phase = "terrorize";
                        }
                        else
                        {
                            this.phase = "taunt";
                        }

                        if (this.phase == "violence")
                        {
                            if (this.target == player)
                            {
                                this.X = X + Math.random() * 400 - 200;
                                this.Y = Y + Math.random() * 400 - 200;
                            }
                            else if (this.target != "none")
                            {
                                this.X = this.target.X + Math.random() * 400 - 200;
                                this.Y = this.target.Y + Math.random() * 400 - 200;
                            }
                        }
                        else if (this.phase == "taunt")
                        {
                            if (this.target == player)
                            {
                                this.X = X + Math.random() * 800 - 400;
                                this.Y = Y + Math.random() * 800 - 400;

                                if (this.DTP() > 202)
                                {
                                    if (Math.random() > 0.5)
                                    {
                                        if (Math.random() < 0.5)
                                        {
                                            this.mode = "faded";
                                        }
                                        this.yAdjustment = 40 * Math.random() - 20;
                                        this.xAdjustment = 160 * Math.random() - 80;
                                    }
                                }
                            }
                            else if (this.target != "none")
                            {
                                this.X = this.target.X + Math.random() * 800 - 400;
                                this.Y = this.target.Y + Math.random() * 800 - 400;

                                if (this.DTU(this.target) > 350)
                                {
                                    if (Math.random() < 0.5)
                                    {
                                        this.mode = "faded";
                                    }
                                }

                            }
                        }
                        else if (this.phase == "terrorize")
                        {
                            var bettyboopp = Math.random();

                            if (this.target == player)
                            {
                                player.blinded = true;
                                player.blindedStoreTime = new Date().getTime();
                                player.blindedTime = 2;
                                this.X = X + Math.random() * 1800 - 900;
                                this.Y = Y + Math.random() * 1800 - 900;

                                if (this.DTP() > 400)
                                {
                                    if (bettyboopp <= 0.25)
                                    {
                                        this.mode = "faded";
                                        this.yAdjustment = 40 * Math.random() - 20;
                                        this.xAdjustment = 160 * Math.random() - 80;
                                    }
                                    else if (bettyboopp <= 0.5)
                                    {
                                        this.mode = "idle";
                                        this.yAdjustment = 60 * Math.random() - 30;
                                        this.xAdjustment = 180 * Math.random() - 90;
                                    }
                                }
                            }
                            else if (this.target != "none")
                            {
                                this.target.blinded = true;
                                this.target.blindedStoreTime = new Date().getTime();
                                this.target.blindedTime = 2;
                                this.X = X + Math.random() * 1800 - 900;
                                this.Y = Y + Math.random() * 1800 - 900;

                                if (this.DTU(this.target) > 400)
                                {
                                    if (bettyboopp <= 0.25)
                                    {
                                        this.mode = "faded";
                                    }
                                    else if (bettyboopp <= 0.5)
                                    {
                                        this.mode = "idle";
                                    }
                                }
                            }
                        }
                    }

                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        if (this.DTP() > 800)
                        {
                            this.moveInRelationToPlayer();
                        }
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        if (this.DTU(this.target) > 800)
                        {
                            this.moveInRelationToThing(this.target);
                        }
                    }
                }
            }

            //ANIMATIONS
            var szx = 1;
            if (this.alive == true)
            {
                if (this.mode == "idle")
                {
                    this.costume = 0;
                    this.flashAnimate(90, this.rotation, 0.4, [{image: tomb, imgX: 2376, imgY: 378, portionW: 78, portionH: 70, adjX: -1/2 * 78 * 1 * this.alphaSize, adjY: -1/2 * 70 * 1 * this.alphaSize, width: 78 * 1 * this.alphaSize, height: 70 * 1 * this.alphaSize}, {image: tomb, imgX: 2339, imgY: 464, portionW: 157, portionH: 74, adjX: -1/2 * 157 * 1 * this.alphaSize, adjY: -1/2 * 74 * 1 * this.alphaSize, width: 157 * 1 * this.alphaSize, height: 74 * 1 * this.alphaSize}, {image: tomb, imgX: 2356, imgY: 545, portionW: 125, portionH: 70, adjX: -1/2 * 125 * 1 * this.alphaSize, adjY: -1/2 * 70 * 1 * this.alphaSize, width: 125 * 1 * this.alphaSize, height: 70 * 1 * this.alphaSize}, {image: tomb, imgX: 2355, imgY: 653, portionW: 114, portionH: 87, adjX: -1/2 * 114 * 1 * this.alphaSize, adjY: -1/2 * 87 * 1 * this.alphaSize, width: 114 * 1 * this.alphaSize, height: 87 * 1 * this.alphaSize}, {image: tomb, imgX: 2372, imgY: 882, portionW: 81, portionH: 87, adjX: -1/2 * 81 * 1 * this.alphaSize, adjY: -1/2 * 87 * 1 * this.alphaSize, width: 81 * 1 * this.alphaSize, height: 87 * 1 * this.alphaSize}, {image: tomb, imgX: 2384, imgY: 774, portionW: 49, portionH: 43, adjX: -1/2 * 49 * 1 * this.alphaSize, adjY: -1/2 * 43 * 1 * this.alphaSize, width: 49 * 1 * this.alphaSize, height: 43 * 1 * this.alphaSize}, {image: tomb, imgX: 2397, imgY: 835, portionW: 25, portionH: 25, adjX: -1/2 * 25 * 1 * this.alphaSize, adjY: -1/2 * 25 * 1 * this.alphaSize, width: 25 * 1 * this.alphaSize, height: 25 * 1 * this.alphaSize}]);
                }
                else if (this.mode == "faded")
                {
                    this.costume = 0;
                    this.flashAnimate(190, this.rotation, 0.3, [{image: tomb, imgX: 2270, imgY: 728, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2251, imgY: 796, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2200, imgY: 793, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2248, imgY: 844, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2200, imgY: 829, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2248, imgY: 880, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2248, imgY: 843, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2201, imgY: 880, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2270, imgY: 728, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2270, imgY: 728, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}, {image: tomb, imgX: 2270, imgY: 728, portionW: 51, portionH: 48, adjX: -1/2 * 51 * 1 * this.alphaSize, adjY: -1/2 * 48 * 1 * this.alphaSize, width: 51 * 1 * this.alphaSize, height: 48 * 1 * this.alphaSize}]);
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costume = 0;
                    this.flashAnimate(90, this.rotation, 0.8, [{image: tomb, imgX: 2108, imgY: 25, portionW: 79, portionH: 59, adjX: -1/2 * 79 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 79 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2190, imgY: 26, portionW: 79, portionH: 59, adjX: -1/2 * 79 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 79 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2290, imgY: 86, portionW: 88, portionH: 59, adjX: -1/2 * 88 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 88 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2278, imgY: 23, portionW: 98, portionH: 59, adjX: -1/2 * 98 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 98 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}]); // + 1/2 * Math.PI
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000)) //sprites are time proof
                    {
                        this.costumeEngine(13, 0.292, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.mode == "idle")
                    {

                    }
                    else if (this.mode == "faded")
                    {

                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(tomb, 1868, 29, 59, 54, -1/2 * 59 * this.alphaSize * szx - this.xAdjustment, -1/2 * 54 * this.alphaSize * szx - this.yAdjustment, 59 * this.alphaSize * szx, 54 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.flashAnimate(90, this.rotation, 0.8, [{image: tomb, imgX: 2108, imgY: 25, portionW: 79, portionH: 59, adjX: -1/2 * 79 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 79 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2190, imgY: 26, portionW: 79, portionH: 59, adjX: -1/2 * 79 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 79 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2290, imgY: 86, portionW: 88, portionH: 59, adjX: -1/2 * 88 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 88 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2278, imgY: 23, portionW: 98, portionH: 59, adjX: -1/2 * 98 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 98 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}]);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(tomb, 2030, 23, 77, 64, -1/2 * 77 * this.alphaSize * szx - this.xAdjustment, -1/2 * 64 * this.alphaSize * szx - this.yAdjustment, 77 * this.alphaSize * szx, 64 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.flashAnimate(90, this.rotation, 0.8, [{image: tomb, imgX: 2108, imgY: 25, portionW: 79, portionH: 59, adjX: -1/2 * 79 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 79 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2190, imgY: 26, portionW: 79, portionH: 59, adjX: -1/2 * 79 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 79 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2290, imgY: 86, portionW: 88, portionH: 59, adjX: -1/2 * 88 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 88 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}, {image: tomb, imgX: 2278, imgY: 23, portionW: 98, portionH: 59, adjX: -1/2 * 98 * 1 * this.alphaSize, adjY: -1/2 * 59 * 1 * this.alphaSize, width: 98 * 1 * this.alphaSize, height: 59 * 1 * this.alphaSize}]);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.drawUnit(tomb, 1921, 26, 104, 63, -1/2 * 104 * this.alphaSize * szx - this.xAdjustment, -1/2 * 63 * this.alphaSize * szx - this.yAdjustment, 104 * this.alphaSize * szx, 63 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.drawUnit(tomb, 2265, 161, 152, 63, -1/2 * 152 * this.alphaSize * szx - this.xAdjustment, -1/2 * 63 * this.alphaSize * szx - this.yAdjustment, 152 * this.alphaSize * szx, 63 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.drawUnit(tomb, 2248, 244, 211, 106, -1/2 * 211 * this.alphaSize * szx - this.xAdjustment, -1/2 * 106 * this.alphaSize * szx - this.yAdjustment, 211 * this.alphaSize * szx, 106 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.drawUnit(tomb, 2411, 88, 276, 163, -1/2 * 276 * this.alphaSize * szx - this.xAdjustment, -1/2 * 163 * this.alphaSize * szx - this.yAdjustment, 276 * this.alphaSize * szx, 163 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(tomb, 2447, 283, 299, 174, -1/2 * 299 * this.alphaSize * szx - this.xAdjustment, -1/2 * 174 * this.alphaSize * szx - this.yAdjustment, 299 * this.alphaSize * szx, 174 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(tomb, 2494, 478, 245, 138, -1/2 * 245 * this.alphaSize * szx - this.xAdjustment, -1/2 * 138 * this.alphaSize * szx - this.yAdjustment, 245 * this.alphaSize * szx, 138 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(tomb, 2466, 648, 278, 92, -1/2 * 278 * this.alphaSize * szx - this.xAdjustment, -1/2 * 92 * this.alphaSize * szx - this.yAdjustment, 278 * this.alphaSize * szx, 92 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(tomb, 2456, 790, 267, 92, -1/2 * 267 * this.alphaSize * szx - this.xAdjustment, -1/2 * 92 * this.alphaSize * szx - this.yAdjustment, 267 * this.alphaSize * szx, 92 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 10)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(tomb, 2483, 870, 194, 62, -1/2 * 194 * this.alphaSize * szx - this.xAdjustment, -1/2 * 62 * this.alphaSize * szx - this.yAdjustment, 194 * this.alphaSize * szx, 62 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume <= 11)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(tomb, 2529, 934, 110, 62, -1/2 * 110 * this.alphaSize * szx - this.xAdjustment, -1/2 * 62 * this.alphaSize * szx - this.yAdjustment, 110 * this.alphaSize * szx, 62 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
                else if (theCostume >= 12)
                {
                    if (this.attacking)
                    {
                        this.didAttack = true;
                        this.drawUnit(tomb, 2626, 937, 110, 62, -1/2 * 110 * this.alphaSize * szx - this.xAdjustment, -1/2 * 62 * this.alphaSize * szx - this.yAdjustment, 110 * this.alphaSize * szx, 62 * this.alphaSize * szx);
                    }
                    else
                    {

                    }
                }
            }
            else
            {
                this.drawUnit(tomb, 2512, 1, 76, 80, -1/2 * 76 * this.alphaSize * szx - this.xAdjustment, -1/2 * 80 * this.alphaSize * szx - this.yAdjustment, 76 * this.alphaSize * szx, 80 * this.alphaSize * szx);
            }
        }
        //GARGOYLE
        if (this.type == "Gargoyle")
        {
            //Set Drops and experience
            if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 230 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (230 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [[new Item("gargoyleHeart", this.X, this.Y), 1]];

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(900, true);

            var movTyp = "walk";

            //AI
            if (this.alive == true)
            {
                //turn into a statue in the daytime
                if (timeOfDay == "Day" || timeOfDay == "Dawn")
                {
                    this.gargStoned = "in";
                }


                this.Attack(17, 23);

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();


                if (this.gargStoned == false)
                {
                    if (this.target == player)
                    {
                        if (this.DTP() > 140)
                        {
                            movTyp = "fly";
                            this.speed = this.flySpeed;
                            this.flying = true;
                        }
                        else
                        {
                            movTyp = "walk";
                            this.speed = this.walkSpeed;
                            this.flying = false;
                        }
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        if (this.DTU(this.target) > 140)
                        {
                            movTyp = "fly";
                            this.speed = this.flySpeed;
                        }
                        else
                        {
                            movTyp = "walk";
                            this.speed = this.walkSpeed;
                        }
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
            }

            //ANIMATIONS
            var szx = 1;
            if (this.alive == true)
            {
                if (this.gargStoned == "un")
                {
                    this.costumeEngine(4, 0.10, false);
                }
                else if (this.gargStoned == "in")
                {
                    this.costumeEngine(3, 0.10, false);
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    if (movTyp == "walk")
                    {
                        this.costumeEngine(3, 0.16, false);
                    }
                    else if (movTyp == "fly")
                    {
                        this.costumeEngine(4, 0.16, false);
                    }
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.16, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.gargStoned == "un")
                    {
                        this.drawUnit(garg, 364, 205, 175, 167, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                    }
                    else if (this.gargStoned == "in")
                    {
                        this.drawUnit(garg, 2, 205, 175, 167, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(garg, 7, 31, 200, 159, -1/2 * 200 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 200 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else if (movTyp == "fly")
                    {
                        this.drawUnit(garg, 18, 551, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(garg, 2, 374, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.gargStoned == "in" || this.gargStoned == "un")
                    {
                        this.drawUnit(garg, 188, 205, 175, 167, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(garg, 188, 34, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else if (movTyp == "fly")
                    {
                        this.drawUnit(garg, 238, 549, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(garg, 198, 373, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.gargStoned == "un")
                    {
                        this.drawUnit(garg, 2, 205, 175, 167, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                    }
                    else if (this.gargStoned == "in")
                    {
                        this.drawUnit(garg, 364, 205, 175, 167, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                        scenicList.push(new Scenery("gargoyle", this.X, this.Y, this.rotation, true));
                        ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this), 1);
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(garg, 373, 37, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else if (movTyp == "fly")
                    {
                        this.drawUnit(garg, 18, 551, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(garg, 399, 371, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.gargStoned == "un")
                    {
                        this.drawUnit(garg, 7, 31, 200, 159, -1/2 * 200 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 200 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                        this.gargStoned = false;
                    }
                    else if (this.attacking)
                    {
                        this.drawUnit(garg, 373, 37, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else if (movTyp == "fly")
                    {
                        this.drawUnit(garg, 461, 546, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(garg, 2, 374, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(garg, 545, 35, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(garg, 2, 374, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(garg, 708, 37, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(garg, 2, 374, 175, 159, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(garg, 617, 380, 175, 167, -1/2 * 175 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 175 * this.alphaSize * szx, 167 * this.alphaSize * szx);
            }
        }
        //GREYTROLL
        if (this.type == "GreyTroll")
        {
            //console.log(this.ID + "// hung: " + this.hunger + " aged: " + this.aging);

            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1600 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1600 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("greyTrollFur", this.X, this.Y), 4], [new Item("trollFlesh", this.X, this.Y), 14]];
            }
            else
            {
                if (Math.max(0, 19 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 399 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (399 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("greyTrollFur", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 4]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1400, true);
            }
            else
            {
                this.rangeOfSightCalculator(600, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    if (!this.eatingSkol)
                    {
                        this.Attack(35, 75);
                    }
                    if (this.disturbed)
                    {
                        this.callForNearbyHelpFromType(1500, "GreyTroll");
                    }
                }
                else
                {
                    this.Attack(9, 11);
                    this.callForNearbyHelpFromType(1100, "GreyTroll");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                this.hunger -= 0.02;

                var targetNear = false;
                if (this.target != "none")
                {
                    if (this.DTU(this.target) <= this.engagementRadius)
                    {
                        if (this.target.alive == true)
                        {
                            targetNear = true;
                        }
                    }
                }
                var mater = {};
                var voop = false;
                if (this.mate != "none")
                {
                    for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                    {
                        if (ArtificialIntelligenceAccess[j].type == "GreyTroll" && ArtificialIntelligenceAccess[j].alpha == true)
                        {
                            if (ArtificialIntelligenceAccess[j].barcode == this.mate)
                            {
                                mater = ArtificialIntelligenceAccess[j];
                                voop = true;
                                break;
                            }
                        }
                    }
                    if (!voop)
                    {
                        this.mate = "none";
                    }

                }

                if (this.alpha == true)
                {
                    if (this.mate == "none")
                    {
                        for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                        {
                            if (ArtificialIntelligenceAccess[j].type == "GreyTroll" && ArtificialIntelligenceAccess[j].alpha == true)
                            {
                                if (this.gender == 0)
                                {
                                    if (ArtificialIntelligenceAccess[j].gender == 1 && ArtificialIntelligenceAccess[j].mate == "none" && ArtificialIntelligenceAccess[j].mother != this)
                                    {
                                        this.mate = ArtificialIntelligenceAccess[j].barcode;
                                        ArtificialIntelligenceAccess[j].mate = this.barcode;
                                    }
                                }
                            }
                        }
                    }
                    else if (mater.alive == false || mater.petrified == true)
                    {
                        this.mate = "none";
                    }

                    if (this.mate != "none")
                    {
                        if (this.gender == 1)
                        {
                            this.homeX = mater.homeX;
                            this.homeY = mater.homeY;

                            this.horny += 0.1;

                            if (mater.pregnant == true)
                            {
                                this.mating = false;
                            }
                            var nunOffnders = true;
                            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                            {
                                if (ArtificialIntelligenceAccess[j].target == this || ArtificialIntelligenceAccess[j].target == mater || ArtificialIntelligenceAccess[j].target.type == "GreyTroll" && ArtificialIntelligenceAccess[j].target.alpha == false && this.DTU(ArtificialIntelligenceAccess[j]) < 1100)
                                {
                                    if (ArtificialIntelligenceAccess[j].target.alive == true)
                                    {
                                        nunOffnders = false;
                                        this.offended = true;
                                        break;
                                    }
                                    //if (this.target != player)
                                    //{
                                    //
                                    //}
                                }
                            }
                            if (nunOffnders)
                            {
                                this.offended = false;
                            }

                            if (this.disturbed || this.offended)
                            {
                                this.mating = false;
                            }
                        }
                        else
                        {
                            var nunOffnders = true;
                            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                            {
                                if (ArtificialIntelligenceAccess[j].target == this) // && this.target != player
                                {
                                    if (ArtificialIntelligenceAccess[j].target.alive == true)
                                    {
                                        nunOffnders = false;
                                        this.offended = true;
                                        break;
                                    }
                                }
                            }
                            if (nunOffnders == true)
                            {
                                this.offended = false;
                            }

                            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                            {
                                if (ArtificialIntelligenceAccess[j].type == "GreyTroll" && ArtificialIntelligenceAccess[j].alpha == false)
                                {
                                    if (ArtificialIntelligenceAccess[j].mother == this)
                                    {
                                        this.nursing = true;
                                        break;
                                    }
                                }
                            }
                            if (mater.mating == false && this.matingNum > 0)
                            {
                                this.mating = false;
                                this.matingNum = 0;
                            }
                            if (this.matingNum >= 29)
                            {
                                this.mating = false;
                                this.matingNum = 0;
                                this.pregnant = true;
                                this.birthTime = new Date().getTime();
                                mater.horny = -500;
                            }

                            if (this.pregnant == true)
                            {
                                if (new Date().getTime() - this.birthTime > 240000)
                                {
                                    this.pregnant = false;
                                    this.health = 1/3 * this.health;
                                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "GreyTroll", false, "Unit Generated Grey Troll"));
                                    if (ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].ID == "Unit Generated Grey Troll")
                                    {
                                        if (ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].mother == "none")
                                        {
                                            ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].mother = this;
                                            ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].homeX = this.homeX;
                                            ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].homeY = this.homeY;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }

                if (this.hunger > 0)
                {
                    if (this.alpha)
                    {
                        //troll health regeneration
                        if (this.health < this.healthMAX)
                        {
                            this.health += 0.19;
                        }
                        else
                        {
                            this.health = this.healthMAX;
                        }

                    }
                    else
                    {
                        //troll health regeneration
                        if (this.health < this.healthMAX)
                        {
                            this.health += 0.08;
                        }
                        else
                        {
                            this.health = this.healthMAX;
                        }

                    }
                }
                else if (this.hunger < 0)
                {
                    this.hunger = 0;
                }

                if (this.alpha == true && this.gender == 1 && this.mate != "none")
                {
                    if (mater.hunger < 100 && this.hunger >= 20 && mater.pregnant || mater.hunger < 100 && this.hunger >= 20 && mater.nursing)
                    {
                        this.feedMate = true;
                    }
                    else
                    {
                        this.feedMate = false;
                    }
                }

                //hunting and defending
                if (this.alpha == true)
                {
                    if (this.gender == 1 && this.feedMate == true && this.hunger >= 20 && this.offended == false && this.disturbed == false)
                    {
                        this.pointTowards(mater);
                        if (this.DTU(mater) <= this.engagementRadius + 100)
                        {
                            this.hunger -= 20;
                            mater.hunger += 20;
                            scenicList.push(new Scenery("trollScraps", this.X + Math.cos(this.rotation) * 4/5 * this.engagementRadius, this.Y + Math.sin(this.rotation) * 4/5 * this.engagementRadius, Math.random(), false))
                        }
                        this.moveInRelationToThing(mater);
                    }
                    else if (this.mate != "none" && this.mating && this.disturbed == false && this.offended == false || this.mate != "none" && this.horny >= 85 &&  this.disturbed == false && this.offended == false)
                    {
                        if (this.gender == 1 && this.mating != true && mater.pregnant != true)
                        {
                            if (this.DTU(mater) <= this.engagementRadius + 100)
                            {
                                mater.mating = true;
                                this.mating = true;
                            }

                            if (this.mating == false)
                            {
                                this.pointTowards(mater);
                                this.moveInRelationToThing(mater);
                            }
                        }
                    }
                    else if (this.DTP() > this.engagementRadius && !targetNear && !this.disturbed && !this.offended && this.hunger < 100)
                    {
                        this.corpseYum = "none";
                        this.eating = false;
                        //this.eatingSkol = false;
                        for (var kk = 0; kk < deadAIList.length; kk++)
                        {
                            if (deadAIList[kk].type != "GreyTroll" && deadAIList[kk].undeath == false && deadAIList[kk].team != "trollia" && deadAIList[kk].team != "undead" && this.DTU(deadAIList[kk]) < (this.engagementRadius + 350))
                            {
                                this.corpseYum = deadAIList[kk];
                                break;
                            }
                        }
                        if (this.corpseYum != "none")
                        {
                            this.pointTowards(this.corpseYum);
                            this.moveInRelationToThing(this.corpseYum);
                            if (this.DTU(this.corpseYum) <= this.engagementRadius)
                            {
                                this.eating = true;
                                this.attacking = true;
                                this.followThrough = true;
                            }
                        }

                    }
                    else if (this.DTU({X: this.homeX, Y: this.homeY}) > 1000 && this.hunger > 50 || this.DTU({X: this.homeX, Y: this.homeY}) > 500 && this.pregnant == true || this.DTU({X: this.homeX, Y: this.homeY}) > 800 && this.nursing == true) //go home
                    {
                        this.pointTowards({X: this.homeX, Y: this.homeY});
                        this.moveInRelationToThing({X: this.homeX, Y: this.homeY});
                    }
                    else
                    {
                        if (this.target == player)
                        {
                            if (this.disturbed || this.hunger < 50 && this.pregnant == false && this.nursing == false || this.DTP() < this.engagementRadius + 200)
                            {
                                this.pointTowardsPlayer();
                                this.moveInRelationToPlayer();
                            }
                        }
                        else if (this.target != "none")
                        {
                            if (this.target.type == "Skol" && this.target.alpha != "massive")
                            {
                                this.eatingSkol = true;
                                this.attacking = true;
                                this.followThrough = true;
                            }

                            if (this.offended || this.hunger < 50 && this.pregnant == false && this.nursing == false || this.DTU(this.target) < this.engagementRadius + 200)
                            {
                                this.pointTowards(this.target);
                                this.moveInRelationToThing(this.target);
                            }
                        }
                    }
                }
                else
                {
                    if (this.mother != "none")
                    {
                        if (this.mother.alive == false)
                        {
                            this.mother = "none";
                        }
                    }

                    var nunOffnders = true;
                    for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                    {
                        if (ArtificialIntelligenceAccess[j].target == this) //&& this.target != player
                        {
                            if (ArtificialIntelligenceAccess[j].target.alive == true)
                            {
                                nunOffnders = false;
                                this.offended = true;
                                break;
                            }
                        }
                    }
                    if (nunOffnders == true)
                    {
                        this.offended = false;
                    }

                    var babyFolMa = false;
                    if (this.target != "none")
                    {
                        if (this.DTU(this.target) < 165)
                        {
                            babyFolMa = true;
                        }
                    }

                    if (this.disturbed && this.health >= 1/9 * this.healthMAX && this.DTP() < 165 || this.offended && this.health >= 1/9 * this.healthMAX && babyFolMa || this.DTP() < this.engagementRadius && this.health >= 1/9 * this.healthMAX || targetNear && this.health >= 1/9 * this.healthMAX) //fight back until weak
                    {
                        if (this.target == player)
                        {
                            this.pointTowardsPlayer();
                            if (this.disturbed && this.DTP() < 165 || this.DTP() < this.engagementRadius)
                            {
                                this.moveInRelationToPlayer();
                            }
                        }
                        else if (this.target != "none")
                        {
                            this.pointTowards(this.target);
                            if (this.offended && this.DTU(this.target) < 165 || this.DTU(this.target) < this.engagementRadius)
                            {
                                this.moveInRelationToThing(this.target);
                            }
                        }
                    }
                    else //go to mother
                    {
                        if (this.mother != "none")
                        {
                            if (this.DTU(this.mother) <= this.engagementRadius + 100)
                            {
                                if (this.hunger <= 49.5 && this.mother.hunger >= 0.5)
                                {
                                    this.mother.hunger -= 0.5;
                                    this.hunger += 0.5;
                                    this.aging += 0.5;
                                }
                            }
                            else
                            {
                                this.pointTowards(this.mother);
                                this.moveInRelationToThing(this.mother);
                            }
                        }
                        else //eat dead
                        {
                            if (!targetNear && !this.disturbed && this.hunger < 100 && !this.offended || this.eating && !this.disturbed && !this.offended) //this.DTP() > this.engagementRadius
                            {
                                this.corpseYum = "none";
                                this.eating = false;
                                this.eatingSkol = false;
                                for (var kk = 0; kk < deadAIList.length; kk++)
                                {
                                    console.log(this.ID + " " + this.DTU(deadAIList[kk]) + " < " + (this.engagementRadius + 350));
                                    if (deadAIList[kk].type != "GreyTroll" && deadAIList[kk].undeath == false && deadAIList[kk].team != "trollia" && deadAIList[kk].team != "undead" && this.DTU(deadAIList[kk]) < (this.engagementRadius + 350))
                                    {
                                        this.corpseYum = deadAIList[kk];
                                        console.log(this.corpseYum);
                                        console.log("^^^^^ pass1");
                                        break;
                                    }
                                }
                                if (this.corpseYum != "none")
                                {
                                    this.pointTowards(this.corpseYum);
                                    this.moveInRelationToThing(this.corpseYum);
                                    if (this.DTU(this.corpseYum) <= this.engagementRadius)
                                    {
                                        this.eating = true;
                                        this.attacking = true;
                                        this.followThrough = true;
                                    }
                                }

                            }
                            else if (this.DTU({X: this.homeX, Y: this.homeY}) > 500 && this.hunger > 50 && this.eating == false) //go home
                            {
                                this.pointTowards({X: this.homeX, Y: this.homeY});
                                this.moveInRelationToThing({X: this.homeX, Y: this.homeY});
                            }
                            else if (this.corpseYum == "none")
                            {
                                if (this.target == player)
                                {
                                    this.pointTowardsPlayer();
                                    if (this.disturbed || this.hunger < 50 || this.DTP() < this.engagementRadius)
                                    {
                                        this.moveInRelationToPlayer();
                                    }
                                }
                                else if (this.target != "none")
                                {
                                    this.pointTowards(this.target);
                                    if (this.offended && this.DTU(this.target) < 250 || this.hunger < 50 || this.DTU(this.target) < this.engagementRadius)
                                    {
                                        this.moveInRelationToThing(this.target);
                                    }
                                }
                            }
                        }
                    }

                    if (this.aging >= 300)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "GreyTroll", true, "Unit Generated Grey Troll"));
                        if (ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].ID == "Unit Generated Grey Troll")
                        {
                            ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].mother = this.mother;
                            if (this.gender == 0)
                            {
                                ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].homeX = this.homeX + (Math.random() * 4600) - 2300;
                                ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].homeY = this.homeY + (Math.random() * 4600) - 2300;
                            }
                        }
                        ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this), 1);
                    }
                }

                if (this.disturbed)
                {
                    if (this.DTP() > 1500)
                    {
                        this.disturbed = false;
                    }
                }

            }

            //ANIMATIONS
            var szx = 1.9;

            if (this.alive == true)
            {
                if (this.mating)
                {
                    this.costumeEngine(2, 0.15, false);
                }
                else if (this.eating )
                {
                    this.isEating = true;
                    this.costumeEngine(7, 0.090, false);
                }
                else if (this.attacking && this.target != "none" || this.eatingSkol == true) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        if (this.eatingSkol == true) //eat skol
                        {
                            this.costumeEngine(16, 0.075, false);
                        }
                        else //smash
                        {
                            this.costumeEngine(6, 0.100, false);
                        }
                    }
                }
                else if (this.moving && !this.attacking && this.eatingSkol != true && this.eating != true && this.isEating != true) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(8, 0.15, false);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (!this.mating)
                {
                    if (theCostume <= 0)
                    {
                        if (this.attacking || this.eatingSkol == true || this.eating)
                        {
                            if (this.eatingSkol == true)
                            {
                                this.drawUnit(garg, 33, 761, 203, 167, -1/2 * 203 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 203 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else if (this.eating == true )
                            {
                                this.drawUnit(garg, 33, 761, 203, 167, -1/2 * 203 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 203 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else
                            {
                                this.drawUnit(garg, 33, 761, 203, 167, -1/2 * 203 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 203 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                        else
                        {
                            this.drawUnit(garg, 254, 1492, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking || this.eatingSkol == true || this.eating)
                        {
                            if (this.eatingSkol == true)
                            {
                                this.damageDealt = false;
                                this.drawUnit(garg, 221, 764, 203, 167, -1/2 * 203 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 203 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else if (this.eating == true)
                            {
                                this.drawUnit(garg, 12, 1282, 242, 167, -1/2 * 242 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 242 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else
                            {
                                this.drawUnit(garg, 32, 1490, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                        else
                        {
                            this.drawUnit(garg, 270, 1717, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                        }
                    }
                    else if (theCostume <= 2)
                    {
                        if (this.attacking || this.eatingSkol == true || this.eating)
                        {
                            if (this.eatingSkol == true)
                            {
                                this.damageDealt = false;
                                this.drawUnit(garg, 427, 765, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else if (this.eating == true)
                            {
                                this.drawUnit(garg, 243, 1282, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else
                            {
                                this.drawUnit(garg, 243, 1282, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                        else
                        {
                            this.drawUnit(garg, 696, 1509, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                        }
                    }
                    else if (theCostume <= 3)
                    {
                        if (this.attacking || this.eatingSkol == true || this.eating)
                        {
                            if (this.eatingSkol == true)
                            {
                                if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                                {
                                    ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this.target), 1);
                                    this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                                }
                                this.drawUnit(garg, 634, 763, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else if (this.eating == true)
                            {
                                this.drawUnit(garg, 460, 1285, 204, 167, -1/2 * 204 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 204 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else
                            {
                                this.drawUnit(garg, 460, 1285, 204, 167, -1/2 * 204 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 204 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                        else
                        {
                            this.drawUnit(garg, 270, 1717, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                        }
                    }
                    else if (theCostume <= 4)
                    {
                        if (this.attacking || this.eatingSkol == true || this.eating)
                        {
                            if (this.eatingSkol == true)
                            {
                                this.drawUnit(garg, 23, 944, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else if (this.eating == true)
                            {
                                this.damageDealt = false;
                                this.drawUnit(garg, 657, 1294, 172, 167, -1/2 * 172 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 172 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else
                            {
                                this.damageDealt = false;
                                this.drawUnit(garg, 460, 1285, 204, 167, -1/2 * 204 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 204 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                        else
                        {
                            this.drawUnit(garg, 254, 1492, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                        }
                    }
                    else if (theCostume >= 5)
                    {
                        if (this.attacking || this.eatingSkol == true || this.eating)
                        {
                            if (this.eatingSkol == true)
                            {
                                if (theCostume <= 5)
                                {
                                    this.drawUnit(garg, 238, 935, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 6)
                                {
                                    this.drawUnit(garg, 446, 937, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 7)
                                {
                                    this.drawUnit(garg, 656, 940, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 8)
                                {
                                    this.drawUnit(garg, 52, 1117, 217, 167, -1/2 * 217 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 217 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 9)
                                {
                                    this.drawUnit(garg, 243, 1112, 180, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 180 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 10)
                                {
                                    this.drawUnit(garg, 435, 1116, 180, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 180 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 11)
                                {
                                    this.drawUnit(garg, 624, 1116, 180, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 180 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 12)
                                {
                                    this.drawUnit(garg, 784, 1116, 180, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 180 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 13)
                                {
                                    this.drawUnit(garg, 455, 766, 180, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 180 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume <= 14)
                                {
                                    this.drawUnit(garg, 216, 764, 205, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                }
                                else if (theCostume >= 15)
                                {
                                    this.drawUnit(garg, 29, 761, 205, 167, -1/2 * 180 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                                    this.eatingSkol = false;
                                    this.followThrough = false;
                                    this.attacking = false;
                                    this.hunger += 40;
                                    theCostume = 0;
                                }
                            }
                            else if (this.eating == true)
                            {
                                if (theCostume >= 6)
                                {
                                    if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                                    {
                                        if (this.corpseYum != "none")
                                        {
                                            this.hunger += (1/3 * this.corpseYum.healthMAX);
                                            if (this.alpha == false)
                                            {
                                                this.aging += (1/3 * this.corpseYum.healthMAX);
                                            }
                                            deadAIList.splice(deadAIList.indexOf(this.corpseYum), 1);
                                        }
                                        this.eating = false;
                                        this.isEating = false;
                                        this.followThrough = false;
                                        this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                                    }
                                }
                                this.drawUnit(garg, 657, 1294, 172, 167, -1/2 * 172 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 172 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else
                            {
                                if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                                {
                                    this.finalAttackCostume = true; //deal the damage!
                                    this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                                }
                                this.drawUnit(garg, 51, 1489, 172, 167, -1/2 * 172 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 172 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                        else
                        {
                            if (theCostume <= 5)
                            {
                                this.drawUnit(garg, 50, 1709, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            if (theCostume <= 6)
                            {
                                this.drawUnit(garg, 478, 1502, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                            else if (theCostume >= 7)
                            {
                                this.drawUnit(garg, 50, 1709, 205, 167, -1/2 * 205 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 205 * this.alphaSize * szx, 167 * this.alphaSize * szx);
                            }
                        }
                    }
                }
                else if (this.gender == 0)
                {
                    if (theCostume <= 0)
                    {
                        this.drawUnit(garg, 687, 563, 231, 159, -1/2 * 231 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 231 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                    else if (theCostume >= 1)
                    {
                        this.matingNum += 0.2;
                        this.drawUnit(garg, 639, 213, 231, 159, -1/2 * 231 * this.alphaSize * szx - this.xAdjustment, -1/2 * 159 * this.alphaSize * szx - this.yAdjustment, 231 * this.alphaSize * szx, 159 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(garg, 434, 1701, 385, 167, -1/2 * 385 * this.alphaSize * szx - this.xAdjustment, -1/2 * 167 * this.alphaSize * szx - this.yAdjustment, 385 * this.alphaSize * szx, 167 * this.alphaSize * szx);
            }
        }
        //BASILISK
        if (this.type == "Basilisk")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 5000 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (5000 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("basiliskFang", this.X, this.Y), 2], [new Item("basiliskScale", this.X, this.Y), Math.floor(Math.random() * 4) + 1], [new Item("basiliskEye", this.X, this.Y), Math.floor(Math.random() * 2) + 1]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 250 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (250 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                var rrnndd = Math.random();
                if (rrnndd < 0.15)
                {
                    this.drops = [[new Item("basiliskScale", this.X, this.Y), 1], [new Item("basiliskEye", this.X, this.Y), 1]];
                }
                else if (rrnndd < 0.35)
                {
                    this.drops = [[new Item("basiliskEye", this.X, this.Y), 1]];
                }
                else if (rrnndd > 0.8)
                {
                    this.drops = [[new Item("basiliskScale", this.X, this.Y), 1]];
                }
            }
            else
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3500 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 3500 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("basiliskFang", this.X, this.Y), Math.floor(Math.random() * 2) + 1], [new Item("basiliskScale", this.X, this.Y), Math.floor(Math.random() * 2) + 1], [new Item("basiliskEye", this.X, this.Y), Math.floor(Math.random() * 2) + 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(475, "none");
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(250, "none");
            }
            else
            {
                this.rangeOfSightCalculator(425, "none");
            }

            //AI
            if (this.alive == true)
            {
                var baskEngageTarget = false;
                var baskEngagePlayer = false;
                //Petrify all... bow before the king of the snakes!!!
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    var pointX;
                    var pointY;
                    var distDist;

                    for (var j = 0; j < 10; j++)
                    {
                        pointY = this.Y + Math.sin(this.rotation + Math.PI) * (j+1)/10 * this.rangeOfSight;
                        pointX = this.X + Math.cos(this.rotation + Math.PI) * (j+1)/10 * this.rangeOfSight;
                        distDist = Math.sqrt((pointX - ArtificialIntelligenceAccess[i].X)*(pointX - ArtificialIntelligenceAccess[i].X)+(pointY - ArtificialIntelligenceAccess[i].Y)*(pointY - ArtificialIntelligenceAccess[i].Y));

                        if (testingUnitCenters)
                        {
                            XXX.save();
                            XXX.beginPath();
                            XXX.translate(X - pointX + (1/2 * CCC.width), Y - pointY + (1/2 * CCC.height));
                            XXX.arc(0, 0, 1.05/10 * this.rangeOfSight, 0, 2*Math.PI);
                            XXX.fillStyle = "green";
                            XXX.fill();
                            XXX.restore();
                        }

                        if (distDist < 1.05/10 * this.rangeOfSight + ArtificialIntelligenceAccess[i].sizeRadius)
                        {
                            baskEngageTarget = ArtificialIntelligenceAccess[i].barcode;
                            if (ArtificialIntelligenceAccess[i].petrificationResistance != true && ArtificialIntelligenceAccess[i].petrified != true)
                            {
                                ArtificialIntelligenceAccess[i].petrified = true;
                                ArtificialIntelligenceAccess[i].stackDominance += 666;
                                break;
                            }
                        }
                    }

                    if (i == 0)
                    {
                        for (var j = 0; j < 10; j++)
                        {
                            pointY = this.Y + Math.sin(this.rotation + Math.PI) * (j+1)/10 * this.rangeOfSight;
                            pointX = this.X + Math.cos(this.rotation + Math.PI) * (j+1)/10 * this.rangeOfSight;
                            distDist = Math.sqrt((pointX - X)*(pointX - X)+(pointY - Y)*(pointY - Y));

                            if (distDist < 1.05/10 * this.rangeOfSight + player.mySize)
                            {
                                baskEngagePlayer = true;
                                if (player.petrificationResistance != true)
                                {
                                    player.petrified = true;
                                }
                                break;
                            }
                        }
                    }
                }

                if (this.alpha == true)
                {
                    this.Attack(20, 40);
                    this.callForNearbyHelpFromType(250, "Basilisk");
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(3, 6);
                    this.callForNearbyHelpFromType(250, "Basilisk");
                }
                else
                {
                    this.Attack(15, 40);
                    this.callForNearbyHelpFromType(250, "Basilisk");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                var baskCanAttack = false; //the basilisk can only attack if the target is in its forward facing sight and close enough
                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                    if (baskEngagePlayer)
                    {
                        baskCanAttack = true;
                    }
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                    if (baskEngageTarget == this.target.barcode)
                    {
                        baskCanAttack = true;
                    }
                }

            }
            else if (this.doOnDeathOnce)
            {
                this.doOnDeathOnce = false;
                if (this.ID == "lilBask")
                {
                    quests.stolenScriptureLilBaskKilled += 1;
                }
                else if (this.ID == "Bask")
                {
                    quests.stolenScriptureBaskKilled += 1;
                }
            }

            //ANIMATIONS
            var szx = 1;
            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.085, false);
                }
                else if (this.attacking && baskCanAttack || this.attackBusy) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.13276662713, false);
                    }
                }
                else
                {
                    this.costume = 0;
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = true;
                        this.drawUnit(polux, 144, 1344, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                    else
                    {
                        if (!this.moving)
                        {
                            this.drawUnit(polux, 144, 1344, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                        }
                        else
                        {
                            this.drawUnit(polux, 148, 1505, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                        }
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.attackBusy = true;
                        this.drawUnit(polux, 432, 1203, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(polux, 423, 1497, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polux, 699, 1205, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(polux, 420, 1354, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polux, 153, 1199, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(polux, 688, 1362, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == true)
                        {
                            this.damageDealt = false;
                            if (baskCanAttack)
                            {
                                this.finalAttackCostume = true;
                            }
                        }
                        this.drawUnit(polux, 144, 1344, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(polux, 148, 1504, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.attackBusy = false;
                        this.drawUnit(polux, 144, 1344, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(polux, 423, 1497, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(polux, 691, 1503, 283, 141, -1/2 * 283 * this.alphaSize * szx - this.xAdjustment, -1/2 * 141 * this.alphaSize * szx - this.yAdjustment, 283 * this.alphaSize * szx, 141 * this.alphaSize * szx);
            }
        }
        //ANCIENT CRAWLER
        if (this.type == "AncientCrawler")
        {
            //Set Drops and experience
            if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 888 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (888 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [[new Item("ancientFragment", this.X, this.Y), 11]];

            this.rangeOfSightCalculator(2100, false);

            //AI
            if (this.alive == true)
            {
                if (showUnitAttackBubble)
                {
                    this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (!this.attackBusy)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none" && typeof(this.target) != "undefined")
                {
                    if (!this.attackBusy)
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (this.aiTimer > 9 && !this.attackBusy)
                {
                    this.aiTimer = 0;
                    var rnd = Math.random();
                    if (rnd >= 0.45)
                    {
                        this.attackType = "flames";
                    }
                    else
                    {
                        this.attackType = "slash";
                    }
                }

                if (this.attackType == "flames")
                {
                    this.Attack(17, 12);
                    this.negateArmour = 0;
                    this.effect = "fire";
                }
                else if (this.attackType == "slash")
                {
                    this.Attack(26, 9);
                    this.negateArmour = 5;
                    this.effect = "none";
                }
            }

            //ANIMATIONS
            if (this.alive == true)
            {
                if (this.attacking || this.attackBusy) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (this.attackType == "flames")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.attackBusy = true;
                            this.costumeEngine(6, 0.12, true);
                        }
                    }
                    else if (this.attackType == "slash")
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1200))
                        {
                            this.attackBusy = true;
                            this.costumeEngine(6, 0.17, true);
                        }
                    }
                }
                else if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.14, false);
                }
                else
                {
                    this.drawUnit(oldverse, 462, 189, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.stopAttacking)
                    {
                        this.stopAttacking = false;
                        this.attacking = false;
                        this.attackBusy = false;
                    }

                    if (this.attacking || this.attackBusy)
                    {
                        if (this.damageDealt == true) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = false; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(oldverse, 462, 189, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(oldverse, 462, 189, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 462, 189, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking || this.attackBusy)
                    {
                        if (this.attackType == "flames")
                        {
                            this.drawUnit(oldverse, 462, 189, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            this.drawUnit(oldverse, 934, 289, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(oldverse, 569, 186, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking || this.attackBusy)
                    {
                        if (this.attackType == "flames")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 466, 291, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            this.drawUnit(oldverse, 1049, 292, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(oldverse, 698, 185, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking || this.attackBusy)
                    {
                        if (this.attackType == "flames")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 565, 293, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 1178, 293, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(oldverse, 827, 185, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking || this.attackBusy)
                    {
                        if (this.attackType == "flames")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 697, 293, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                        else if (this.attackType == "slash")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 1314, 291, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(oldverse, 960, 186, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking || this.attackBusy)
                    {
                        if (this.attackType == "flames")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 814, 293, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                            this.stopAttacking = true;
                        }
                        else if (this.attackType == "slash")
                        {
                            if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                            {
                                this.damageDealt = true;
                            }
                            this.drawUnit(oldverse, 1430, 292, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                            this.stopAttacking = true;
                        }
                    }
                    else
                    {
                        this.drawUnit(oldverse, 569, 186, 86, 107, -1/2 * 86 * this.alphaSize - this.xAdjustment, -1/2 * 107 * this.alphaSize - this.yAdjustment, 86 * this.alphaSize, 107 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 1825, 181, 39, 33, -1/2 * 39 * this.alphaSize - this.xAdjustment, -1/2 * 33 * this.alphaSize - this.yAdjustment, 39 * this.alphaSize, 33 * this.alphaSize);
            }
        }
        //BOULCHOM
        if (this.type == "Boulchom")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 110 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (67 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("boulchomPelt", this.X, this.Y), 1], [new Item("rawBoulchomFlesh", this.X, this.Y), 2]];
                if (player.getIntelligence() >= 30)
                {
                    this.drops.push([new Item("boulchomLung", this.X, this.Y), 1]);
                }
            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 17 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 17 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("boulchomPelt", this.X, this.Y), 1], [new Item("rawBoulchomFlesh", this.X, this.Y), 1]];
                if (player.getIntelligence() >= 30)
                {
                    this.drops.push([new Item("boulchomLung", this.X, this.Y), 1]);
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1000, false);
            }
            else
            {
                this.rangeOfSightCalculator(900, false);
            }

            //AI
            if (this.alive == true)
            {
                if (showUnitAttackBubble)
                {
                    if (this.alpha)
                    {
                        this.attackBubble([[35, this.rotation, 0, this.sizeRadius + 31]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                    else
                    {
                       this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 23]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                }

                if (this.alpha == true)
                {
                    this.Attack(23, 12);
                    this.callForNearbyHelpFromType(900, "Boulchom");
                }
                else
                {
                    this.Attack(12, 5);
                    this.callForNearbyHelpFromType(800, "Boulchom");
                }

                //if the charging creature becomes stuck on an obstacle it alters its engagement radius such that it thinks to unstick itself and it points towards its target again.
                if (!this.isChargeBlocked()) //if not trapped on a non-unit obstacle
                {
                    if (this.alpha)
                    {
                        this.engagementRadius = 247;
                    }
                    else
                    {
                        this.engagementRadius = 210;
                    }
                }
                else //if trapped on a non-unit obstacle
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                    }
                    else if (this.target != "none" && typeof(this.target) != "undefined")
                    {
                        this.pointTowards(this.target);
                    }

                    if (this.alpha)
                    {
                        this.engagementRadius = this.sizeRadius + 13;
                    }
                    else
                    {
                        this.engagementRadius = this.sizeRadius + 8;
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.dtp = this.DTP();

                    if (this.dtp > this.engagementRadius && !this.doCharge)
                    {
                        this.attackWait = 0;
                        this.pointTowardsPlayer();
                    }
                    else if (this.dtp <= this.engagementRadius)
                    {
                        this.attackWait = 2.5;
                        this.doCharge = true;
                    }

                    if (this.doCharge && this.dtp >= this.chargeDist)
                    {
                        this.doCharge = false;
                    }
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none" && typeof(this.target) != "undefined")
                {
                    this.dtu = this.DTU(this.target);

                    if (this.dtu > this.engagementRadius && !this.doCharge)
                    {
                        this.attackWait = 0;
                        this.pointTowards(this.target);
                    }
                    else if (this.dtu <= this.engagementRadius)
                    {
                        this.attackWait = 2.5;
                        this.doCharge = true;
                    }

                    if (this.doCharge && this.dtu >= this.chargeDist)
                    {
                        this.doCharge = false;
                    }
                    this.moveInRelationToThing(this.target);
                }
            }

            //ANIMATIONS
            var szr = 1.5;
            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.125, true);
                    }
                }
                else if (this.moving) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.085, false);
                }
                else
                {
                    this.drawUnit(nognog, 159, 194, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        if (this.stopAttacking)
                        {
                            this.attacking = false;
                        }

                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }

                        this.drawUnit(nognog, 159, 194, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 15, 193, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                    else
                    {
                        this.drawUnit(nognog, 159, 194, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        if (!this.isChargeBlocked())
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[35, this.rotation, 0, this.sizeRadius + 31]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        else
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[21, this.rotation, 0, this.sizeRadius + 19]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        this.stopAttacking = true;

                        this.drawUnit(nognog, 229, 195, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                    else
                    {
                        this.drawUnit(nognog, 93, 194, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        if (!this.isChargeBlocked())
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[35, this.rotation, 0, this.sizeRadius + 31]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        else
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[21, this.rotation, 0, this.sizeRadius + 19]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        this.stopAttacking = true;

                        this.drawUnit(nognog, 321, 227, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                    else
                    {
                        this.drawUnit(nognog, 15, 193, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        if (!this.isChargeBlocked())
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[35, this.rotation, 0, this.sizeRadius + 31]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 23]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        else
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[21, this.rotation, 0, this.sizeRadius + 19]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[16, this.rotation, 0, this.sizeRadius + 14]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        this.stopAttacking = true;

                        this.drawUnit(nognog, 391, 229, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                    else
                    {
                        this.drawUnit(nognog, 93, 194, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 475, 229, 46, 42, -1/2 * 46 * this.alphaSize * szr - this.xAdjustment, -1/2 * 42 * this.alphaSize * szr - this.yAdjustment, 46 * this.alphaSize * szr, 42 * this.alphaSize * szr);
            }
        }
        //Lombris
        if (this.type == "Lombris")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 81 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 245 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (245 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("lombrisFlesh", this.X, this.Y), 3]];
            }
            else
            {
                if (Math.max(0, 24 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 92 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 92 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("lombrisFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, false);
            }
            else
            {
                this.rangeOfSightCalculator(550, false);
            }

            //AI
            if (this.alive == true)
            {
                if (showUnitAttackBubble)
                {
                    if (this.alpha)
                    {
                        this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 38], [26, this.rotation, 0, this.sizeRadius + 2]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                    else
                    {
                        this.attackBubble([[15, this.rotation, 0, this.sizeRadius + 9], [12, this.rotation, 0, this.sizeRadius - 7]]); //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                    }
                }

                if (!this.attacking)
                {
                    this.underground = true;
                    this.resistances = ["blinded", "burning"];
                }
                else
                {
                    this.resistances = ["blinded"];
                }

                if (this.alpha == true)
                {
                    this.Attack(55, 35);
                    this.callForNearbyHelpFromType(200, "Lombris");
                }
                else
                {
                    this.Attack(19, 10);
                    this.callForNearbyHelpFromType(200, "Lombris");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (!this.attacking)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (!this.attackBusy)
                    {
                        this.underground = true;
                        this.pointTowardsPlayer();
                    }
                    else
                    {
                        this.underground = false;
                    }
                }
                else if (this.target != "none" && typeof(this.target) != "undefined")
                {
                    if (!this.attacking)
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                    else if (!this.attackBusy)
                    {
                        this.underground = true;
                        this.pointTowards(this.target);
                    }
                    else
                    {
                        this.underground = false;
                    }
                }
            }

            //ANIMATIONS
            var szr = 1.5;
            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.attackBusy = true;
                        this.costumeEngine(11, 0.125, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    this.emerge = true;

                    if (this.attacking)
                    {
                        this.attackBusy = true;
                        if (this.stopAttacking)
                        {
                            this.attackBusy = false;
                            this.attacking = false;
                        }
                        //draw nothing
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 524, 260, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 565, 260, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 604, 260, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        if (this.emerge)
                        {
                            this.drawUnit(nognog, 652, 260, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                        }
                        else
                        {
                            this.drawUnit(nognog, 791, 259, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr); //on the way back
                        }
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 746, 260, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 699, 259, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 648, 228, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 694, 226, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking)
                    {
                        if (this.emerge)
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 30], [26, this.rotation, 0, this.sizeRadius + 2]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[15, this.rotation, 0, this.sizeRadius + 9], [12, this.rotation, 0, this.sizeRadius - 7]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        this.drawUnit(nognog, 746, 226, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }
                }
                else if (theCostume >= 10)
                {
                    if (this.attacking)
                    {
                        if (this.emerge)
                        {
                            if (this.alpha)
                            {
                                if (this.attackBubble([[26, this.rotation, 0, this.sizeRadius + 30], [26, this.rotation, 0, this.sizeRadius + 2]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                            else
                            {
                                if (this.attackBubble([[15, this.rotation, 0, this.sizeRadius + 9], [12, this.rotation, 0, this.sizeRadius - 7]])) //[[radius, this.rotation, relativeAngle, distance], ["", "", "", ""], etc.]
                                {
                                    this.damageDealt = false;
                                }
                            }
                        }
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.stopAttacking = true;
                        this.drawUnit(nognog, 799, 228, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
                    }

                    this.emerge = false;
                }
            }
            else
            {
                this.drawUnit(nognog, 829, 259, 57, 26, -1/2 * 57 * this.alphaSize * szr - this.xAdjustment, -1/2 * 26 * this.alphaSize * szr - this.yAdjustment, 57 * this.alphaSize * szr, 26 * this.alphaSize * szr);
            }
        }
        //NOG
        if (this.type == "Nog")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("nogSkin", this.X, this.Y), 1], [new Item("rawNogFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 6 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 6 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("nogSkin", this.X, this.Y), 1], [new Item("rawNogFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(525, true);
            }
            else
            {
                this.rangeOfSightCalculator(375, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(3, 1.5);
                    this.callForNearbyHelpFromType(350, "Varn");
                }
                else
                {
                    this.Attack(2, 1);
                    this.callForNearbyHelpFromType(275, "Varn");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.110, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 386, 296, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(nognog, 222, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 457, 296, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(nognog, 304, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 536, 296, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(nognog, 304, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 610, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(nognog, 304, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 688, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(nognog, 304, 297, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 792, 764, 56, 39, -1/2 * 56 - this.xAdjustment, -1/2 * 39 - this.yAdjustment, 56 * this.alphaSize, 39 * this.alphaSize);
            }
        }
        //DETH
        if (this.type == "Deth")
        {
            //GENETIC COMPOSER
                //Life
            this.lifespan = this.PER * 3;
                //Speed
            this.speed = 1 + (this.DEX / 7) * Math.min(1, this.age / 10);
                //Awareness
            if (this.age < 5)
            {
                this.rangeOfSight = this.PER * 20;
            }
            else if (this.age < 10)
            {
                this.rangeOfSight = this.PER * 35;
            }
            else if (this.age < 5/6 * this.lifespan)
            {
                this.rangeOfSight = this.PER * 50;
            }
            else
            {
                this.rangeOfSight = this.PER * 30;
            }
                //Build
            this.healthMAX = this.CON * Math.min(1, this.age / 10);
            this.engagementRadius = 10 + this.CON * Math.min(1, this.age / 10); //+ this.weaponRange;
            this.sizeRadius = 6 + this.CON * Math.min(1, this.age / 10);
            this.alphaSize = 0.4 + (this.CON / 20) * Math.min(1, this.age / 10);

            this.yAdjustment = 0;
            this.xAdjustment = 0;

            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 30 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (30 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("", this.X, this.Y), 2]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 22 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 22 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(800, true);
            }
            else
            {
                this.rangeOfSightCalculator(700, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(11, 8);
                }
                else
                {
                    this.Attack(9, 6);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 63, 47, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(mufmuf, 4, 46, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 34, 22, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 61, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 5, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 122, 48, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 4, 46, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 122, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 5, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 122, 48, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 4, 46, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 61, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 5, 71, 40, 21, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 21 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 21 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mufmuf, 4, 102, 39, 28, -1/2 * 39 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 39 * this.alphaSize, 28 * this.alphaSize);
            }
        }
        //Hyeling Soldier
        if (this.type == "HyelingSoldier") //soldado de hielo
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 40 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (40 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (this.dropRND >= 0.85)
                {
                    this.drops = [[new Item("hyelingCleaver", this.X, this.Y), 1], [new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
                }
                else
                {
                    if (this.dropRND >= 0.80)
                    {
                        this.drops = [[new Item("hyelingArmour", this.X, this.Y), 1], [new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
                    }
                    else
                    {
                        this.drops = [[new Item("brokenHyelingCleaver", this.X, this.Y), 1], [new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
                    }
                }
            }
            else
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 32 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 32 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                if (this.dropRND >= 0.92)
                {
                    this.drops = [[new Item("hyelingCleaver", this.X, this.Y), 1], [new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
                }
                else
                {
                    if (this.dropRND >= 0.87)
                    {
                        this.drops = [[new Item("hyelingArmour", this.X, this.Y), 1], [new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
                    }
                    else
                    {
                        this.drops = [[new Item("brokenHyelingCleaver", this.X, this.Y), 1], [new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
                    }
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(860, true);
            }
            else
            {
                this.rangeOfSightCalculator(820, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(8, 3);
                    this.callForNearbyHelpFromType(940, "HyelingSoldier");
                    this.callForNearbyHelpFromType(940, "Hyeling");
                }
                else
                {
                    this.Attack(7, 2.5);
                    this.callForNearbyHelpFromType(940, "HyelingSoldier");
                    this.callForNearbyHelpFromType(940, "Hyeling");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.action == "charging")
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
                else if (this.action == "fleeing")
                {
                    if (this.target == player)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                //BRAIN
                //if about to die run away
                this.action = "charging";

                if (this.health <= 1/4 * this.healthMAX)
                {
                    this.action = "fleeing";

                    if (this.DTP() <= 110 && shiftKey == true)
                    {
                        this.action = "charging";
                    }
                }
                else
                {
                    // If target persuing gets too close, turn and fight regardless of chances...
                    if (this.target == player)
                    {
                        if (player.health > this.health && player.weaponEquipped != "none" || player.armourTotal >= 6 && player.weaponEquipped != "none" || player.level > 15 || player.magicLevel > 1)
                        {
                            this.action = "fleeing";
                            this.isSameTypeNearby(this.X, this.Y, 940, this.type);
                            if (this.numberOfSameTypeNearby >= 1 && player.armourTotal < 8 && player.level <= 15 && player.magicLevel <= 1)
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 3 && player.armourTotal <= 8.25 && player.level <= 30 && player.magicLevel <= 5)
                            {
                                this.action = "charging";
                            }
                        }
                        if (this.DTP() <= 175 && shiftKey == true)
                        {
                            this.action = "charging";
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.target.health > this.health && this.target.team != "herd" || this.target.armour >= 6 && this.target.team != "herd")
                        {
                            this.action = "fleeing";
                            this.isSameTypeNearby(this.X, this.Y, 900, this.type);
                            if (this.numberOfSameTypeNearby >= 1 && this.target.armour < 8 && this.target.health < (3 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 2 && this.target.armour <= 8 && this.target.health < (4 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 3 && this.target.armour <= 8.25 && this.target.health < (5 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 4 && this.target.armour <= 8.35 && this.target.health < (8 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                        }
                        if (this.DTU(this.target) <= 175 && this.target.speed >= this.speed)
                        {
                            this.action = "charging";
                        }
                    }
                }

                //sounds for circumstances
                if (this.target == player)
                {
                    if (this.isSameTypeNearby(this.X, this.Y, 310, this.type) && this.DTP() > this.rangeOfSight || this.X != this.plantedX && this.Y != this.plantedY && this.isSameTypeNearby(this.X, this.Y, 310, this.type) && !this.attacking)
                    {
                        this.voice([hyelingClick1, hyelingClick2, hyelingClick3], 2100, true, false);
                        this.voiceFrequency = 9 * this.dropRND + 2;
                    }
                    else if (this.action == "fleeing")
                    {
                        this.voice([hyelingPaincry1, hyelingPaincry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                    else if (this.action == "charging")
                    {
                        this.voice([hyelingBattlecry1, hyelingBattlecry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                }
                else
                {
                    if (this.isSameTypeNearby(this.X, this.Y, 310, this.type) && this.DTU(this.target) > this.rangeOfSight || this.target == "none" && this.isSameTypeNearby(this.X, this.Y, 310, this.type) || this.X != this.plantedX && this.Y != this.plantedY && this.isSameTypeNearby(this.X, this.Y, 310, this.type) && !this.attacking)
                    {
                        this.voice([hyelingClick1, hyelingClick2, hyelingClick3], 2100, true, false);
                        this.voiceFrequency = 9 * this.dropRND + 2;
                    }
                    else if (this.action == "fleeing")
                    {
                        this.voice([hyelingPaincry1, hyelingPaincry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                    else if (this.action == "charging")
                    {
                        this.voice([hyelingBattlecry1, hyelingBattlecry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.150, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (this.X != this.plantedX && this.Y != this.plantedY)
                {
                    this.flashAnimate( 550 / this.speed, this.rotation + 1/2 * Math.PI, 1, [{image: furr, imgX: 229, imgY: 298, portionW: 30, portionH: 62, adjX: -1/2 * 30 * 1 * this.alphaSize, adjY: -1/2 * 62 * 1 * this.alphaSize, width: 30 * 1 * this.alphaSize, height: 62 * 1 * this.alphaSize}, {image: furr, imgX: 227, imgY: 375, portionW: 30, portionH: 62, adjX: -1/2 * 30 * 1 * this.alphaSize, adjY: -1/2 * 62 * 1 * this.alphaSize, width: 30 * 1 * this.alphaSize, height: 62 * 1 * this.alphaSize}])
                }
                this.plantedX = this.X;
                this.plantedY = this.Y;
                if (!this.attacking)
                {
                    this.drawUnit(furr, 26, 133, 92, 53, -1/2 * 92 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 53 * 1.6  * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                }

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 26, 133, 92, 53, -1/2 * 92 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 53 * 1.6  * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 25, 195, 92, 53, -1/2 * 92 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 53 * 1.6  * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 24, 253, 92, 53, -1/2 * 92 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 53 * 1.6  * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 25, 311, 92, 53, -1/2 * 92 * 1.6 * this.alphaSize - this.xAdjustment, (-1/2 * 53 * 1.6 - 17) * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 28, 366, 92, 53, (-1/2 * 92 * 1.6 + 5) * this.alphaSize - this.xAdjustment, (-1/2 * 53 * 1.6 - 23)  * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 28, 431, 92, 53, (-1/2 * 92 * 1.6 + 5) * this.alphaSize - this.xAdjustment, (-1/2 * 53 * 1.6 - 25)  * this.alphaSize - this.yAdjustment, 92 * 1.6 * this.alphaSize, 53 * 1.6 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(furr, 208, 623, 56, 72, -1/2 * 56 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 72 * 1.6 * this.alphaSize - this.yAdjustment, 56 * 1.6 * this.alphaSize, 72 * 1.6 * this.alphaSize);
            }
        }
        //Hyeling
        if (this.type == "Hyeling") //ciudadano de hielo
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (20 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
            }
            if (this.alpha == "baby")
            {
                if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (3 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawHyelingFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 14 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 14 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("hyelingClaws", this.X, this.Y), 1], [new Item("rawHyelingFlesh", this.X, this.Y), 2]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(860, true);
            }
            if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(780, true);
            }
            else
            {
                this.rangeOfSightCalculator(820, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(4, 2);
                    this.callForNearbyHelpFromType(940, "HyelingSoldier");
                    this.callForNearbyHelpFromType(940, "Hyeling");
                }
                if (this.alpha == true)
                {
                    this.Attack(1.5, 0.5);
                    this.callForNearbyHelpFromType(940, "HyelingSoldier");
                    this.callForNearbyHelpFromType(940, "Hyeling");
                }
                else
                {
                    this.Attack(3, 1.5);
                    this.callForNearbyHelpFromType(940, "HyelingSoldier");
                    this.callForNearbyHelpFromType(940, "Hyeling");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.action == "charging")
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
                else if (this.action == "fleeing")
                {
                    if (this.target == player)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                //BRAIN
                //if about to die run away
                this.action = "charging";

                if (this.health <= 1/4 * this.healthMAX || this.health <= 99/100 * this.healthMAX && this.alpha == "baby")
                {
                    this.action = "fleeing";

                    if (this.DTP() <= 110 && shiftKey == true && this.alpha != "baby")
                    {
                        this.action = "charging";
                    }
                }
                else
                {
                    // If target persuing gets too close, turn and fight regardless of chances...
                    if (this.target == player)
                    {
                        if (player.health > this.health && player.weaponEquipped != "none" || player.armourTotal >= 6 && player.weaponEquipped != "none" || player.level > 15 || player.magicLevel > 1)
                        {
                            this.action = "fleeing";
                            this.isSameTypeNearby(this.X, this.Y, 940, this.type);
                            if (this.numberOfSameTypeNearby >= 2 && player.armourTotal < 8 && player.level <= 15 && player.magicLevel <= 1)
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 4 && player.armourTotal <= 8.25 && player.level <= 30 && player.magicLevel <= 5)
                            {
                                this.action = "charging";
                            }
                        }
                        if (this.DTP() <= 175 && shiftKey == true)
                        {
                            this.action = "charging";
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.target.health > this.health && this.target.team != "herd" || this.target.armour >= 6 && this.target.team != "herd")
                        {
                            this.action = "fleeing";
                            this.isSameTypeNearby(this.X, this.Y, 900, this.type);
                            if (this.numberOfSameTypeNearby >= 2 && this.target.armour < 8 && this.target.health < (3 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 3 && this.target.armour <= 8 && this.target.health < (4 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 4 && this.target.armour <= 8.25 && this.target.health < (5 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                            else if (this.numberOfSameTypeNearby >= 5 && this.target.armour <= 8.35 && this.target.health < (8 * Math.max(this.health, 1/2 * this.healthMAX)))
                            {
                                this.action = "charging";
                            }
                        }
                        if (this.DTU(this.target) <= 175 && this.target.speed >= this.speed)
                        {
                            this.action = "charging";
                        }
                    }
                }

                //sounds for circumstances
                if (this.target == player)
                {
                    if (this.isSameTypeNearby(this.X, this.Y, 310, this.type) && this.DTP() > this.rangeOfSight || this.X != this.plantedX && this.Y != this.plantedY && this.isSameTypeNearby(this.X, this.Y, 310, this.type) && !this.attacking)
                    {
                        this.voice([hyelingClick1, hyelingClick2, hyelingClick3], 2100, true, false);
                        this.voiceFrequency = 9 * this.dropRND + 2;
                    }
                    else if (this.action == "fleeing")
                    {
                        this.voice([hyelingPaincry1, hyelingPaincry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                    else if (this.action == "charging")
                    {
                        this.voice([hyelingBattlecry1, hyelingBattlecry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                }
                else
                {
                    if (this.isSameTypeNearby(this.X, this.Y, 310, this.type) && this.DTU(this.target) > this.rangeOfSight || this.target == "none" && this.isSameTypeNearby(this.X, this.Y, 310, this.type) || this.X != this.plantedX && this.Y != this.plantedY && this.isSameTypeNearby(this.X, this.Y, 310, this.type) && !this.attacking)
                    {
                        this.voice([hyelingClick1, hyelingClick2, hyelingClick3], 2100, true, false);
                        this.voiceFrequency = 9 * this.dropRND + 2;
                    }
                    else if (this.action == "fleeing")
                    {
                        this.voice([hyelingPaincry1, hyelingPaincry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                    else if (this.action == "charging")
                    {
                        this.voice([hyelingBattlecry1, hyelingBattlecry2], 2100, true, false);
                        this.voiceFrequency = 4 * this.dropRND + 3.5;
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.122, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (this.X != this.plantedX && this.Y != this.plantedY)
                {
                    this.flashAnimate( 550 / this.speed, this.rotation + 1/2 * Math.PI, 1, [{image: furr, imgX: 229, imgY: 220, portionW: 30, portionH: 62, adjX: -1/2 * 30 * 1 * this.alphaSize, adjY: -1/2 * 62 * 1 * this.alphaSize, width: 30 * 1 * this.alphaSize, height: 62 * 1 * this.alphaSize}, {image: furr, imgX: 230, imgY: 143, portionW: 30, portionH: 62, adjX: -1/2 * 30 * 1 * this.alphaSize, adjY: -1/2 * 62 * 1 * this.alphaSize, width: 30 * 1 * this.alphaSize, height: 62 * 1 * this.alphaSize}])
                }
                this.plantedX = this.X;
                this.plantedY = this.Y;
                if (!this.attacking)
                {
                    this.drawUnit(furr, 141, 137, 61, 49, -1/2 * 61 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 49 * 1.6  * this.alphaSize - this.yAdjustment, 61 * 1.6 * this.alphaSize, 49 * 1.6 * this.alphaSize);
                }

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 141, 137, 61, 49, -1/2 * 61 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 49 * 1.6  * this.alphaSize - this.yAdjustment, 61 * 1.6 * this.alphaSize, 49 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 143, 190, 61, 49, -1/2 * 61 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 49 * 1.6  * this.alphaSize - this.yAdjustment, 61 * 1.6 * this.alphaSize, 49 * 1.6 * this.alphaSize);
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(furr, 143, 242, 61, 49, -1/2 * 61 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 49 * 1.6  * this.alphaSize - this.yAdjustment, 61 * 1.6 * this.alphaSize, 49 * 1.6 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(furr, 281, 617, 76, 70, -1/2 * 76 * 1.6 * this.alphaSize - this.xAdjustment, -1/2 * 70 * 1.6 * this.alphaSize - this.yAdjustment, 76 * 1.6 * this.alphaSize, 70 * 1.6 * this.alphaSize);
            }
        }
        //DUENDE
        if (this.type == "Duende") //hadas que vive en las casas de las humanas sin permiso
        {
            //Set Drops and experience

            if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 25 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (25 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [[new Item("duendeEsophagus", this.X, this.Y), 1]];

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(860, true);

            //AI
            if (this.alive == true)
            {
                this.Attack(5, 3);
                this.callForNearbyHelpFromType(600, "Duende");

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.action == "charging")
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
                else if (this.action == "fleeing")
                {
                    if (this.target == player)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                //BRAIN
                this.dtp = this.DTP();
                this.playerFrontX = X + Math.cos(player.rotation + 1/2 * Math.PI) * 55;
                this.playerFrontY = Y + Math.sin(player.rotation + 1/2 * Math.PI) * 55;
                this.dtpf = this.DTU({X: this.playerFrontX, Y: this.playerFrontY});
                if (this.target != player && this.target != "none")
                {
                    this.targetFrontX = this.target.X + Math.cos(this.target.rotation + 1/2 * Math.PI) * 55;
                    this.targetFrontY = this.target.Y + Math.sin(this.target.rotation + 1/2 * Math.PI) * 55;
                    this.dtpf = this.DTU({X: this.targetFrontX, Y: this.targetFrontY});
                }

                if (this.health <= 3/10 * this.healthMAX)
                {
                    this.action = "fleeing";
                }
                else
                {
                    this.action = "charging";
                }

                if (this.target == player)
                {
                    if (spaceKey == true || eKey == true)
                    {
                        if (this.dtpf < 76)
                        {
                            for (var j = 0; j < scenicList.length; j++)
                            {
                                if (scenicList[j].type == "fouxDuende")
                                {
                                    if (scenicList[j].temporary == this.barcode)
                                    {
                                        scenicList.splice(j, 1);
                                        break;
                                    }
                                }
                            }
                            scenicList.push(new Scenery("fouxDuende", this.X, this.Y, this.rotation, this.barcode));
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Foux", false, "Duende"));

                            this.X = X + Math.cos(-1/2 * player.rotation - Math.random() * Math.PI) * (10 + Math.random() * 100);
                            this.Y = Y + Math.sin(-1/2 * player.rotation - Math.random() * Math.PI) * (10 + Math.random() * 100);
                        }
                        else if (this.action == "fleeing")
                        {
                            if (this.aiTimer > 7)
                            {
                                this.X += Math.cos(-Math.atan2(this.Y - Y, this.X - X) + 1/2 * Math.PI) * 220;
                                this.Y += Math.sin(-Math.atan2(this.Y - Y, this.X - X)+ 1/2 * Math.PI) * 220;
                                this.aiTimer = 0;
                            }
                        }
                    }
                }
                else if (this.target != "none")
                {
                    if (this.target.attacking)
                    {
                        if (this.dtpf < 76)
                        {
                            for (var j = 0; j < scenicList.length; j++)
                            {
                                if (scenicList[j].type == "fouxDuende")
                                {
                                    if (scenicList[j].temporary == this.barcode)
                                    {
                                        scenicList.splice(j, 1);
                                        break;
                                    }
                                }
                            }
                            scenicList.push(new Scenery("fouxDuende", this.X, this.Y, this.rotation, this.barcode));
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Foux", false, "Duende"));

                            this.X = this.target.X + Math.cos(-1/2 * player.rotation - Math.random() * Math.PI) * (this.target.sizeRadius + Math.random() * 140);
                            this.Y = this.target.Y + Math.sin(-1/2 * player.rotation - Math.random() * Math.PI) * (this.target.sizeRadius + Math.random() * 140);
                        }
                        else if (this.action == "fleeing")
                        {
                            if (this.aiTimer > 7)
                            {
                                this.X += Math.cos(Math.atan2(this.Y - this.target.Y, this.X - this.target.X)+ 1/2 * Math.PI) * 260;
                                this.Y += Math.sin(Math.atan2(this.Y - this.target.Y, this.X - this.target.X)+ 1/2 * Math.PI) * 260;
                                this.aiTimer = 0;
                            }
                        }
                    }
                }
            }
            else if (this.doOnDeathOnce)
            {
                this.doOnDeathOnce = false;
                if (region == "e5" && map == "world" || region == "e4" && map == "world")
                {
                    quests.duendeInfestationKillCount += 1;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.122, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (this.X != this.plantedX && this.Y != this.plantedY)
                {
                    this.flashAnimate( 500 / this.speed, this.rotation + 1/2 * Math.PI, 1, [{image: atal, imgX: 100000, imgY: 100000, portionW: 68, portionH: 137, adjX: -1/2 * 68 * 0.8 * this.alphaSize, adjY: -1/2 * 137 * 0.8 * this.alphaSize, width: 68 * 0.8 * this.alphaSize, height: 137 * 0.8 * this.alphaSize}, {image: atal, imgX: 14, imgY: 1792, portionW: 68, portionH: 137, adjX: -1/2 * 68 * 0.8 * this.alphaSize, adjY: -1/2 * 137 * 0.8 * this.alphaSize, width: 68 * 0.8 * this.alphaSize, height: 137 * 0.8 * this.alphaSize}, {image: atal, imgX: 100000, imgY: 100000, portionW: 68, portionH: 137, adjX: -1/2 * 68 * 0.8 * this.alphaSize, adjY: -1/2 * 137 * 0.8 * this.alphaSize, width: 68 * 0.8 * this.alphaSize, height: 137 * 0.8 * this.alphaSize}, {image: atal, imgX: 90, imgY: 1792, portionW: 68, portionH: 137, adjX: -1/2 * 68 * 0.8 * this.alphaSize, adjY: -1/2 * 137 * 0.8 * this.alphaSize, width: 68 * 0.8 * this.alphaSize, height: 137 * 0.8 * this.alphaSize}])
                }
                this.plantedX = this.X;
                this.plantedY = this.Y;
                if (!this.attacking)
                {
                    this.drawUnit(atal, 344, 1825, 143, 136, -1/2 * 143 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 136 * 1  * this.alphaSize - this.yAdjustment, 143 * 1 * this.alphaSize, 136 * 1 * this.alphaSize);
                }

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 201, 1826, 143, 136, -1/2 * 143 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 136 * 1  * this.alphaSize - this.yAdjustment, 143 * 1 * this.alphaSize, 136 * 1 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 344, 1825, 143, 136, -1/2 * 143 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 136 * 1  * this.alphaSize - this.yAdjustment, 143 * 1 * this.alphaSize, 136 * 1 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 506, 1823, 143, 136, -1/2 * 143 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 136 * 1  * this.alphaSize - this.yAdjustment, 143 * 1 * this.alphaSize, 136 * 1 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 650, 1820, 143, 136, -1/2 * 143 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 136 * 1  * this.alphaSize - this.yAdjustment, 143 * 1 * this.alphaSize, 136 * 1 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(atal, 813, 1846, 160, 136, -1/2 * 160 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 136 * 1  * this.alphaSize - this.yAdjustment, 160 * 1 * this.alphaSize, 136 * 1 * this.alphaSize);
            }
        }
        //MUGMUL
        if (this.type == "Mugmul") //yeol nut eating ape-like creature
        {
            //Set Drops and experience
            if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 20 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (20 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            if (this.eatNut == "pod")
            {
                if (player.getIntelligence() >= 18)
                {
                    this.drops = [[new Item("yeolPod", this.X, this.Y), 1], [new Item("rawMugmulFlesh", this.X, this.Y), 1], [new Item("mugmulFur", this.X, this.Y), 1], [new Item("mugmulBrain", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("yeolPod", this.X, this.Y), 1], [new Item("rawMugmulFlesh", this.X, this.Y), 1], [new Item("mugmulFur", this.X, this.Y), 1]];
                }
            }
            else if (this.eatNut == "nut")
            {
                if (player.getIntelligence() >= 18)
                {
                    this.drops = [[new Item("yeolNut", this.X, this.Y), 1], [new Item("rawMugmulFlesh", this.X, this.Y), 1], [new Item("mugmulFur", this.X, this.Y), 1], [new Item("mugmulBrain", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("yeolNut", this.X, this.Y), 1], [new Item("rawMugmulFlesh", this.X, this.Y), 1], [new Item("mugmulFur", this.X, this.Y), 1]];
                }
            }
            else
            {
                if (player.getIntelligence() >= 18)
                {
                    this.drops = [[new Item("rawMugmulFlesh", this.X, this.Y), 1], [new Item("mugmulFur", this.X, this.Y), 1], [new Item("mugmulBrain", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawMugmulFlesh", this.X, this.Y), 1], [new Item("mugmulFur", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            this.rangeOfSightCalculator(1100, true);

            //AI
            if (this.alive == true)
            {

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.eatNut == "pod" || this.eatNut == "nut")
                {
                    this.attacking = true;
                }
                else
                {
                    this.attacking = false;
                }

                //BEHAVIORS

                this.foodGrab = false; //this variable determines whether the creature will regard the enemy as an obstacle to collecting food it finds in precarious spaces.
                if (this.action == "flee") //run away from predator
                {
                    if (this.target == player)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
                else if (this.action == "gather") //look for nuts to eat by looking under trees
                {
                    if ((Math.floor(this.aiTimer * 10) / 10) % 2 == 0)
                    {
                        //console.log(":::::::::::::::::::::");
                        //console.log((Math.floor(this.aiTimer * 10) / 10));
                        //console.log((Math.floor(this.aiTimer * 10) / 10) % 2 == 0);
                        var distanciaACosa = 0;
                        var distanciaACosaMC = this.rangeOfSight;
                        this.cosaEncontrada = -1;
                        this.enLista = null;

                        for (var i = 0; i < worldItems.length; i++)
                        {
                            if (worldItems[i][0].type == "yeolPod" || worldItems[i][0].type == "yeolNut")
                            {
                                distanciaACosa = Math.sqrt((worldItems[i][0].X-this.X)*(worldItems[i][0].X-this.X)+(worldItems[i][0].Y-this.Y)*(worldItems[i][0].Y-this.Y));
                                if (distanciaACosa <= distanciaACosaMC)
                                {
                                    distanciaACosaMC = distanciaACosa;
                                    this.cosaEncontrada = i;
                                    this.enLista = "wI";
                                }
                            }
                        }
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i].type == "item")
                            {
                                if (scenicList[i].information[0] == "yeolPod" || scenicList[i].information[0] == "yeolNut")
                                {
                                    distanciaACosa = Math.sqrt((scenicList[i].X - this.X) * (scenicList[i].X - this.X) + (scenicList[i].Y - this.Y) * (scenicList[i].Y - this.Y));
                                    if (distanciaACosa <= distanciaACosaMC)
                                    {
                                        distanciaACosaMC = distanciaACosa;
                                        this.cosaEncontrada = i;
                                        this.enLista = "sL";
                                    }
                                }
                            }
                        }
                    }

                    if (this.cosaEncontrada >= 0) //if desired item found within the worldItems or ScenicLists
                    {
                        if (this.enLista == "wI" && this.cosaEncontrada < worldItems.length)
                        {
                            var framm = {X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y};

                            if (this.target == player)
                            {
                                if (this.hunger <= 20 && (this.DTP() - this.distanceFinder(framm, this)) > 25 && !this.hurtByPlayer)
                                {
                                    this.foodGrab = true;
                                }
                                if (this.DTP() - this.distanceFinder(framm, this) > 0.15 * this.rangeOfSight && player.getSurvivalism() < 10 || this.DTP() - this.distanceFinder(framm, this) > 0.1 * this.rangeOfSight && player.getSurvivalism() >= 10 || this.foodGrab)
                                {
                                    this.pointTowards({X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y});
                                    this.moveInRelationToThing({X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y});
                                }
                            }
                            else if (this.target != "none")
                            {
                                if (this.target.target == player)
                                {
                                    if (this.target.DTP() + 25 < this.distanceFinder(framm, this.target))
                                    {
                                        this.foodGrab = true;
                                    }
                                }
                                else if (this.target.target != "none" )
                                {
                                    if (this.distanceFinder(this.target.target, this.target) + 25 < this.distanceFinder(framm, this.target))
                                    {
                                        this.foodGrab = true;
                                    }
                                }

                                if (this.distanceFinder(framm, this.target) > 0.2 * this.rangeOfSight || this.foodGrab)
                                {
                                    this.pointTowards({X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y});
                                    this.moveInRelationToThing({X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y});
                                }
                            }
                            else
                            {
                                this.pointTowards({X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y});
                                this.moveInRelationToThing({X: worldItems[this.cosaEncontrada][0].X, Y: worldItems[this.cosaEncontrada][0].Y});
                            }

                            if (this.distanceFinder(framm, this) <= this.engagementRadius && !this.attacking)
                            {
                                if (worldItems[this.cosaEncontrada][0].type == "yeolPod")
                                {
                                    this.eatNut = "pod";
                                }
                                else
                                {
                                    this.eatNut = "nut";
                                }
                                if (worldItems[this.cosaEncontrada][1] > 1)
                                {
                                    worldItems[this.cosaEncontrada][1] -= 1;
                                }
                                else
                                {
                                    worldItems.splice(this.cosaEncontrada, 1);
                                }

                                this.cosaEncontrada = -1;
                            }
                        }
                        else if (this.enLista == "sL" && this.cosaEncontrada < scenicList.length)
                        {
                            var framm = {X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y};

                            if (this.target == player)
                            {
                                if (this.hunger <= 20 && (this.DTP() - this.distanceFinder(framm, this)) > 25 && !this.hurtByPlayer)
                                {
                                    this.foodGrab = true;
                                }
                                if (this.DTP() - this.distanceFinder(framm, this) > 0.15 * this.rangeOfSight && player.getSurvivalism() < 10 || this.DTP() - this.distanceFinder(framm, this) > 0.1 * this.rangeOfSight && player.getSurvivalism() >= 10 || this.foodGrab)
                                {
                                    this.pointTowards({X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y});
                                    this.moveInRelationToThing({X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y});
                                }
                            }
                            else if (this.target != "none")
                            {
                                if (this.target.target == player)
                                {
                                    if (this.target.DTP() + 25 < this.distanceFinder(framm, this.target))
                                    {
                                        this.foodGrab = true;
                                    }
                                }
                                else if (this.target.target != "none" )
                                {
                                    if (this.distanceFinder(this.target.target, this.target) + 25 < this.distanceFinder(framm, this.target))
                                    {
                                        this.foodGrab = true;
                                    }
                                }

                                if (this.distanceFinder(framm, this.target) > 0.2 * this.rangeOfSight || this.foodGrab)
                                {
                                    this.pointTowards({X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y});
                                    this.moveInRelationToThing({X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y});
                                }
                            }
                            else
                            {
                                this.pointTowards({X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y});
                                this.moveInRelationToThing({X: scenicList[this.cosaEncontrada].X, Y: scenicList[this.cosaEncontrada].Y});
                            }

                            if (this.distanceFinder(framm, this) <= this.engagementRadius && !this.attacking)
                            {
                                if (scenicList[this.cosaEncontrada].information[0] == "yeolPod")
                                {
                                    this.eatNut = "pod";
                                }
                                else
                                {
                                    this.eatNut = "nut";
                                }
                                if (scenicList[this.cosaEncontrada].information[1] > 1)
                                {
                                    scenicList[this.cosaEncontrada].information[1] -= 1;
                                }
                                else
                                {
                                    scenicList.splice(this.cosaEncontrada, 1);
                                }
                                this.cosaEncontrada = -1;
                            }
                        }
                    }
                    else //if item not found go towards nearest yeol tree
                    {
                        var distanciaACosa = 0;
                        var distanciaACosaMC = this.rangeOfSight * 1.5;

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i].type == "yeolTree")
                            {
                                for (var j = 0; j < this.treesSearched.length; j++)
                                {
                                    if (i != this.treesSearched[j])
                                    {
                                        distanciaACosa = Math.sqrt((scenicList[i].X - this.X) * (scenicList[i].X - this.X) + (scenicList[i].Y - this.Y) * (scenicList[i].Y - this.Y));
                                        if (distanciaACosa <= distanciaACosaMC && distanciaACosa > 1/11 * this.rangeOfSight)
                                        {
                                            distanciaACosaMC = distanciaACosa;
                                            this.treeSelected = i;
                                        }
                                        else if (distanciaACosa <= 1/11 * this.rangeOfSight && this.treeSelected != "none")
                                        {
                                            this.treesSearched.push(this.treeSelected);
                                            this.treeSelected = "none";
                                        }
                                    }
                                }
                            }
                        }

                        if (this.treeSelected != "none")
                        {
                            this.pointTowards({X: scenicList[this.treeSelected].X, Y: scenicList[this.treeSelected].Y});
                            this.moveInRelationToThing({X: scenicList[this.treeSelected].X, Y: scenicList[this.treeSelected].Y});
                        }
                    }
                }


                //BRAIN
                //reset treesSearched every 111 seconds
                if ((Math.floor(this.aiTimer * 10) / 10) % 111 == 0)
                {
                    this.treesSearched = [];
                }

                //console.log(this.hunger + " / " + this.hungerMAX);
                if (this.hunger <= this.hungerMAX - 10)
                {
                    this.action = "gather";
                }
                else if (this.water)
                {
                    this.moveInRelationToThing({X:99999999999999, Y: 99999999999999}); //move forward if in water and not being chased.
                }

                //if about to die run away
                if (this.target == player)
                {
                    if (player.getSurvivalism() < 10)
                    {
                        if (this.DTP() < 0.15 * this.rangeOfSight && !this.foodGrab)
                        {
                            this.action = "flee";
                        }
                    }
                    else
                    {
                        if (this.DTP() < 0.1 * this.rangeOfSight && !this.foodGrab)
                        {
                            this.action = "flee";
                        }
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) < 0.2 * this.rangeOfSight && !this.foodGrab)
                    {
                        this.action = "flee";
                    }
                }


                //HUNGER
                if (this.hunger < 0)
                {
                    this.health -= 0.1;
                    this.killNotByPlayer = true; //if starving nothing is gained from its death.
                }
                this.hunger -= 0.005;
            }

            //ANIMATIONS
            var szx = 1;
            if (this.alive == true)
            {
                if (this.attacking && !this.water) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(15, 0.10, false);
                    }
                }
                else if (this.water) //if swimming
                {
                    this.costumeEngine(5, 0.122, true);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (!this.water)
                {
                    if (this.X != this.plantedX && this.Y != this.plantedY)
                    {
                        this.flashAnimate(550 / this.speed, this.rotation - Math.PI, 1, [{image: polux, imgX: 347, imgY: 851, portionW: 74, portionH: 47, adjX: -1/2 * 74 * szx * this.alphaSize, adjY: -1/2 * 47 * szx * this.alphaSize, width: 74 * szx * this.alphaSize, height: 47 * szx * this.alphaSize}, {image: polux, imgX: 347, imgY: 928, portionW: 74, portionH: 47, adjX: -1/2 * 74 * szx * this.alphaSize, adjY: -1/2 * 47 * szx * this.alphaSize, width: 74 * szx * this.alphaSize, height: 47 * szx * this.alphaSize}])
                    }
                    this.plantedX = this.X;
                    this.plantedY = this.Y;
                }

                if (!this.attacking && !this.water)
                {
                    this.drawUnit(polux, 439, 831, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                }

                if (theCostume <= 0)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 439, 831, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else if (this.water)
                    {
                        this.drawUnit(polux, 661, 909, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 446, 909, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 447, 909, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 514, 910, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 440, 831, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 514, 910, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 257, 831, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 514, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking && !this.water)
                    {
                        this.eatNut = "nut";
                        this.drawUnit(polux, 588, 911, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 588, 911, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 588, 828, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 588, 828, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 663, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 10)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 663, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 11)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 663, 909, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume <= 13)
                {
                    if (this.attacking && !this.water)
                    {
                        this.attackReady = true;
                        this.drawUnit(polux, 663, 909, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
                else if (theCostume >= 14)
                {
                    if (this.attacking && !this.water)
                    {
                        this.drawUnit(polux, 448, 910, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                        if (this.attackReady == true)
                        {
                            this.attackReady = false;
                            this.hunger += 10;
                            this.health += 0.5;
                            this.eatNut = false;
                            this.cosaEncontrada = -1;
                            this.enLista = false;
                            this.costume = 0;
                        }
                    }
                    else
                    {
                        this.drawUnit(polux, 177, 830, 66, 87, -1/2 * 66 * szx * this.alphaSize - this.xAdjustment, -1/2 * 87 * szx  * this.alphaSize - this.yAdjustment, 66 * szx * this.alphaSize, 87 * szx * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polux, 205, 701, 88, 46, -1/2 * 88 * 1 * this.alphaSize - this.xAdjustment, -1/2 * 46 * 1 * this.alphaSize - this.yAdjustment, 88 * 1 * this.alphaSize, 46 * 1 * this.alphaSize);
            }
        }
        //UT
        if (this.type == "Ut") //uttttt //UTUT
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 129 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (129 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawUtFlesh", this.X, this.Y), 5], [new Item("utTentacle", this.X, this.Y), 9]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 9 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (9 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawUtFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 49 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 49 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("rawUtFlesh", this.X, this.Y), 2], [new Item("utTentacle", this.X, this.Y), 2]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, true);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(500, true);
            }
            else
            {
                this.rangeOfSightCalculator(600, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(22, 8);
                    this.callForNearbyHelpFromType(800, "Ut");
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(4, 1);
                    this.callForNearbyHelpFromType(1200, "Ut");
                }
                else
                {
                    this.Attack(11, 4);
                    this.callForNearbyHelpFromType(700, "Ut");
                }

                //Super Sticky Slime Trail
                if (this.moving && !this.attacking)
                {
                    if (new Date().getTime() >= this.loopTimer + 625)
                    {
                        this.loopTimer = new Date().getTime();
                        scenicList.push(new Scenery("utSlime", this.X , this.Y, this.rotation, this.alphaSize));
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.070, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(8, 0.110, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 681, 794, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 520, 245, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 797, 786, 93, 103, -1/2 * 93 * this.alphaSize - this.xAdjustment, -1/2 * 103 * this.alphaSize - this.yAdjustment, 93 * this.alphaSize, 103 * this.alphaSize);
                        //this.drawUnit(freeverse, 794, 800, 91, 75, -1/2 * 91 * this.alphaSize - this.xAdjustment, -1/2 * 75 * this.alphaSize - this.yAdjustment, 91 * this.alphaSize, 95 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 616, 247, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 901, 788, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 707, 236, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 676, 888, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 681, 794, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 783, 888, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 797, 786, 93, 103, -1/2 * 93 * this.alphaSize - this.xAdjustment, -1/2 * 103 * this.alphaSize - this.yAdjustment, 93 * this.alphaSize, 103 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 876, 890, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 901, 788, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                }
                else if (theCostume >= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 569, 911, 97, 84, -1/2 * 97 * this.alphaSize - this.xAdjustment, -1/2 * 84 * this.alphaSize - this.yAdjustment, 97 * this.alphaSize, 84 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 520, 245, 99, 96, -1/2 * 99 * this.alphaSize - this.xAdjustment, -1/2 * 96 * this.alphaSize - this.yAdjustment, 99 * this.alphaSize, 96 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(freeverse, 400, 228, 97, 95, -1/2 * 97 * this.alphaSize - this.xAdjustment, -1/2 * 95 * this.alphaSize - this.yAdjustment, 97 * this.alphaSize, 95 * this.alphaSize);
            }
        }
        //GREWBLE
        if (this.type == "Grewble")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 129 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (129 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("grewbleGuts", this.X, this.Y), 5]];
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 340 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (340 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("grewbleGuts", this.X, this.Y), 9]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 9 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (9 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("grewbleGuts", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 49 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 49 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("grewbleGuts", this.X, this.Y), 3]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(650, true);
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(1000, true);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(500, true);
            }
            else
            {
                this.rangeOfSightCalculator(500, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(8, 10);
                    this.callForNearbyHelpFromType(500, "Grewble");
                }
                else if (this.alpha == "giant")
                {
                    this.Attack(16, 24);
                    this.callForNearbyHelpFromType(500, "Grewble");
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(1, 1);
                    this.callForNearbyHelpFromType(500, "Grewble");
                }
                else
                {
                    this.Attack(2, 4);
                    this.callForNearbyHelpFromType(500, "Grewble");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(5, 0.100, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(8, 0.110, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 66, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 66, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 115, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 64, 35, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 166, 2, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 66, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 220, 2, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 63, 67, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 269, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 62, 103, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 319, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 66, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
                else if (theCostume >= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(lodo, 315, 41, 60, 30, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 30 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 30 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(lodo, 115, 1, 49, 34, -1/2 * 49 * this.alphaSize - this.xAdjustment, -1/2 * 34 * this.alphaSize - this.yAdjustment, 49 * this.alphaSize, 34 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(lodo, 315, 82, 60, 30, -1/2 * 60 * this.alphaSize - this.xAdjustment, -1/2 * 30 * this.alphaSize - this.yAdjustment, 60 * this.alphaSize, 30 * this.alphaSize);
            }
        }
        //ETNA
        if (this.type == "Etna")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 67 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (67 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("etnaVenomSac", this.X, this.Y), 1]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 4 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (4 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 60 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 60 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("etnaVenomSac", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(670, true);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(670, true);
            }
            else
            {
                this.rangeOfSightCalculator(670, true);
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                //this.targeting();
                this.webTargeting(); //this type of targeting makes it so this unit only targets units or players stuck in web.

                if (this.target == player)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(0, 3);
                        this.callForNearbyHelpFromType(50, "Etna");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.Attack(0, 0.2);
                        this.callForNearbyHelpFromType(50, "Etna");
                    }
                    else
                    {
                        this.Attack(0, 2);
                        this.callForNearbyHelpFromType(50, "Etna");
                    }

                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    if (this.alpha == true)
                    {
                        this.Attack(4, 7);
                        this.callForNearbyHelpFromType(50, "Etna");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.Attack(2, 2);
                        this.callForNearbyHelpFromType(50, "Etna");
                    }
                    else
                    {
                        this.Attack(4, 5);
                        this.callForNearbyHelpFromType(50, "Etna");
                    }

                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }
                else
                {
                    this.pointTowards({X: this.initX, Y: this.initY});
                    this.moveInRelationToThing({X: this.initX, Y: this.initY});
                }
            }

            //ANIMATIONS
            var szx = 1.6
            if (this.alive == true)
            {
                if (this.target != "none")
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(7, 0.100, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.costumeEngine(3, 0.110, true);
                        }
                    }
                }
                else
                {
                    this.costume = 0;
                }



                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 289, 358, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 289, 358, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 661, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 335, 359, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 661, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 386, 359, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 661, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 436, 360, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(nognog, 484, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(nognog, 546, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    this.other = Math.round(Math.random());
                }
                else if (theCostume >= 6)
                {
                    if (this.other)
                    {
                        this.drawUnit(nognog, 385, 359, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 484, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 613, 361, 39, 37, -1/2 * 39 * this.alphaSize * szx - this.xAdjustment, -1/2 * 37 * this.alphaSize * szx - this.yAdjustment, 39 * this.alphaSize * szx, 37 * this.alphaSize * szx);
            }
        }
        //NEEV
        if (this.type == "Neev")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 11 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 55 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (55 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("neevFlesh", this.X, this.Y), 3], [new Item("neevFur", this.X, this.Y), 2]];
            }
            else
            {
                if (Math.max(0, 4.5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("neevFlesh", this.X, this.Y), 1], [new Item("neevFur", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(800, true);
            }
            else
            {
                this.rangeOfSightCalculator(650, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                //NEEV BRAIN
                //Process

                if (this.DTP() <= 1/6 * this.rangeOfSight && player.inebriation >= 100 + (player.getToughness() * 3) || player.subtlety)
                {
                    this.disturbedTime = new Date().getTime();
                }

                if (this.disturbed == false) //if not frightened...
                {
                    this.mofuTargetFood = "none";
                    this.moving = false;
                    this.attacking = false;

                    if (player.inebriation < 100 + (player.getToughness() * 3) && this.DTP() <= 1/12 * this.rangeOfSight || player.subtlety) //somehow this: && this.disturbed == false actually fixes the running around...
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else
                    {
                        for (var i = 0; i < worldItems.length; i++) //look for any item but quest items to eat/steal.
                        {
                            if (worldItems[i][0].utility != "questItem" && worldItems[i][0].dmx == this.dmx)
                            {
                                if (this.distanceFinder(this, worldItems[i][0]) <= this.rangeOfSight)
                                {
                                    if (this.mofuTargetFood == "none")
                                    {
                                        this.mofuTargetFood = worldItems[i][0];
                                    }
                                    else
                                    {
                                        if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                    }
                                }
                            }
                        }
                        if (this.mofuTargetFood != "none")
                        {
                            if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                            {
                                this.eating = true;

                                //Actually eat the thing at the right frame.
                                if (Math.floor(this.costume) <= 1)
                                {
                                    this.mofuFeastPrepped = true;
                                }
                                else if (Math.floor(this.costume) <= 2)
                                {
                                    if (this.mofuFeastPrepped == true)
                                    {
                                        for (var i = 0; i < worldItems.length; i++)
                                        {
                                            if (worldItems[i][0] === this.mofuTargetFood)
                                            {
                                                this.mofuFood += 1;
                                                if (worldItems[i][1] > 1)
                                                {
                                                    worldItems[i][1] -= 1;
                                                    break;
                                                }
                                                else
                                                {
                                                    this.mofuTargetFood = "none";
                                                    worldItems.splice(i, 1);
                                                    break;
                                                }
                                            }
                                        }
                                        this.mofuFeastPrepped = false;
                                    }
                                }
                                //end of eating item code block
                            }
                            else
                            {
                                this.eating = false;
                                this.pointTowards(this.mofuTargetFood);
                                this.moveInRelationToThing(this.mofuTargetFood);
                            }
                        }
                        else
                        {
                            this.eating = false;
                        }
                    }
                }
                else if (this.disturbed == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(8, 3);
                        this.callForNearbyHelpFromType(2000, "Neev");
                    }
                    else
                    {
                        this.Attack(3, 1.5);
                        this.callForNearbyHelpFromType(2000, "Neev");
                    }

                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                //FOR NEEVS ANIMATION STARTER IS MOVED RIGHT HERE
                if (this.moving && !this.attacking && !this.eating) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.09, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.20, true);
                    }
                }
                else if (this.eating) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.11, true);
                    }
                }
            }
            else
            {
                if (this.doOnDeathOnce)
                {
                    if (this.ID == "Easter")
                    {
                        quests.theMasterThiefOfTeshirNeevSlain = true;
                    }

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true && player.inebriation >= 100 + (player.getToughness() * 3) || this.alive == true && player.subtlety || this.petrified)
            {
                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(poly, 284, 46, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else if (this.eating)
                    {
                        this.drawUnit(poly, 235, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(poly, 186, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(poly, 235, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else if (this.eating)
                    {
                        this.drawUnit(poly, 285, 1, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(poly, 387, 4, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(poly, 234, 45, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else if (this.eating)
                    {
                        this.drawUnit(poly, 331, 4, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(poly, 186, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking || this.eating)
                    {
                        this.drawUnit(poly, 234, 45, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(poly, 439, 6, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                    }
                }
            }
            else if (this.alive == false)
            {
                this.drawUnit(poly, 124, 7, 65, 41, -35 - this.xAdjustment, -22 - this.yAdjustment, 65 * this.alphaSize, 41 * this.alphaSize);
            }
        }
        //GRIB
        if (this.type == "Grib")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (45 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("gribPelt", this.X, this.Y), 2], [new Item("rawGribFlesh", this.X, this.Y), 3]];
            }
            else
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 24 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 24 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                this.drops = [[new Item("gribPelt", this.X, this.Y), 1], [new Item("rawGribFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(400, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(350, "mildy");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(9, 4);
                    this.callForNearbyHelpFromType(400, "Grib");
                }
                else
                {
                    this.Attack(5, 3);
                    this.callForNearbyHelpFromType(350, "Grib");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1636, 154, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1226, 155, 49, 29, -35 - this.xAdjustment, -22 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1451, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1305, 155, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1513, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1373, 156, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1578, 154, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1513, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1451, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 1145, 143, 53, 44, -35 - this.xAdjustment, -22 - this.yAdjustment, 53 * this.alphaSize, 44 * this.alphaSize);
            }

        }
        //BLACK BEAR
        if (this.type == "BlackBear")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 20 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 99 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (99 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 5)
                {
                    this.drops = [[new Item("medBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 2], [new Item("rawBearTongue", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("medBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 2]];
                }
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 70 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1111 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1111 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("lrgBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 13]];
            }
            else
            {
                if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 62 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 62 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                if (player.getIntelligence() >= 5)
                {
                    this.drops = [[new Item("smlBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 1], [new Item("rawBearTongue", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("smlBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(425, "mildly");
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(650, true);
            }
            else
            {
                this.rangeOfSightCalculator(400, false);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(13, 7);
                    this.callForNearbyHelpFromType(300, "BlackBear");
                }
                else if (this.alpha == "giant")
                {
                    this.Attack(40, 30);
                    this.callForNearbyHelpFromType(250, "BlackBear");
                }
                else
                {
                    this.Attack(7, 6);
                    this.callForNearbyHelpFromType(300, "BlackBear");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.085, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.110, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 224, 8, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 0, 5, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 301, 9, 61, 40, -34 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 67, 8, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 384, 10, 61, 40, -31 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 0, 5, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 301, 9, 61, 40, -33 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 141, 7, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 224, 8, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polypol, 471, 16, 61, 40, -35 - this.xAdjustment, -22 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
            }
        }
        //VIPER
        if (this.type == "Viper")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 92 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (92 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 23)
                {
                    this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 6], [new Item("viperVenomGland", this.X, this.Y), 1], [new Item("viperSnakeSkin", this.X, this.Y), 6]];
                }
                else
                {
                    this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 6], [new Item("viperSnakeSkin", this.X, this.Y), 6]];
                }
            }
            else if (this.alpha == "giant")
            {
                if (Math.max(0, 51 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 499 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (499 * ((player.getIntelligence() / 50) + 1)) / 10;
                }


                this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 17], [new Item("viperSnakeSkin", this.X, this.Y), 17]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                if (player.getIntelligence() >= 23)
                {
                    this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 1], [new Item("viperVenomGland", this.X, this.Y), 1], [new Item("viperSnakeSkin", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 1], [new Item("viperSnakeSkin", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, "mildly");
            }
            else if (this.alpha == "giant")
            {
                this.rangeOfSightCalculator(900, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(260, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(9, 4);
                }
                else if (this.alpha == "giant")
                {
                    this.Attack(34, 17);
                }
                else
                {
                    this.Attack(3, 1);
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(7, 0.090, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(7, 0.145, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 438, 5, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 5, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 518, 6, 70, 30, -34 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 33, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 598, 5, 70, 30, -31 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 5, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 678, 7, 70, 30, -33 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 7, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 764, 9, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 120, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 850, 7, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 147, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
                else if (theCostume >= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(freeverse, 921, 7, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(freeverse, 438, 172, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(freeverse, 436, 199, 70, 30, -35 - this.xAdjustment, -22 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
            }

        }
        //TAIPAN
        if (this.type == "Taipan")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 92 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (92 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 24)
                {
                    this.drops = [[new Item("rawTaipanFlesh", this.X, this.Y), 2], [new Item("taipanVenomGland", this.X, this.Y), 2], [new Item("taipanSnakeSkin", this.X, this.Y), 2]];
                }
                else
                {
                    this.drops = [[new Item("rawTaipanFlesh", this.X, this.Y), 2], [new Item("taipanSnakeSkin", this.X, this.Y), 2]];
                }
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                }

                if (player.getIntelligence() >= 24)
                {
                    this.drops = [[new Item("rawTaipanFlesh", this.X, this.Y), 1], [new Item("taipanVenomGland", this.X, this.Y), 1], [new Item("taipanSnakeSkin", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("rawTaipanFlesh", this.X, this.Y), 1], [new Item("taipanSnakeSkin", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(340, "extremely");
            }
            else
            {
                this.rangeOfSightCalculator(300, "extremely");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(1, 2);
                    this.callForNearbyHelpFromType(390, "Taipan");
                }
                else
                {
                    this.Attack(0, 1);
                    this.callForNearbyHelpFromType(380, "Taipan");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(6, 0.13, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(8, 0.15, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.drawUnit(mufmuf, 94, 106, 45, 16, -1/2 * 45 * this.alphaSize - this.xAdjustment, -1/2 * 16 * this.alphaSize - this.yAdjustment, 45 * this.alphaSize, 16 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 170, 107, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 92, 106, 45, 16, -1/2 * 45 * this.alphaSize - this.xAdjustment, -1/2 * 16 * this.alphaSize - this.yAdjustment, 45 * this.alphaSize, 16 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 169, 130, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 88, 125, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 170, 107, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 87, 126, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 222, 107, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 85, 144, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 223, 130, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(mufmuf, 85, 143, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 222, 107, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 87, 106, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 90, 106, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
                else if (theCostume >= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mufmuf, 222, 107, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mufmuf, 168, 130, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mufmuf, 22, 141, 52, 17, -1/2 * 52 * this.alphaSize - this.xAdjustment, -1/2 * 17 * this.alphaSize - this.yAdjustment, 52 * this.alphaSize, 17 * this.alphaSize);
            }

        }
        //BERULN
        if (this.type == "Beruln")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 93 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (93 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("bigBerulnPelt", this.X, this.Y), 1], [new Item("berulnSkull", this.X, this.Y), 1], [new Item("rawBerulnFlesh", this.X, this.Y), 4]];
            }
            else
            {
                if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 81 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (81 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("berulnPelt", this.X, this.Y), 1], [new Item("berulnSkull", this.X, this.Y), 1], [new Item("rawBerulnFlesh", this.X, this.Y), 3]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(900, "extremely");
            }
            else
            {
                this.rangeOfSightCalculator(850, "extremely");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(14, 8);
                    this.callForNearbyHelpFromType(300, "Beruln");
                }
                else
                {
                    this.Attack(15, 7);
                    this.callForNearbyHelpFromType(300, "Beruln");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                    }
                    if (wKey)
                    {
                        this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)})
                    }
                    else
                    {
                        this.moving = false;
                        this.costume = 0;
                    }
                }
                else
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (player.getSurvivalism() >= 41)
                {
                    this.mount(0);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.100, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.095, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polyPNG, 92, 599, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polyPNG, 8, 658, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(polyPNG, 93, 655, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polyPNG, 94, 547, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                    }
                }
                else if (theCostume >= 2)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.drawUnit(polyPNG, 93, 709, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polyPNG, 11, 598, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
            }

        }
        //GRIFFIN
        if (this.type == "Griffin")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 900 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (900 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("griffinPelt", this.X, this.Y), 1], [new Item("griffinHeart", this.X, this.Y), 1], [new Item("griffinHeadMed", this.X, this.Y), 1]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 2200 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (2200 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("griffinPelt", this.X, this.Y), 2], [new Item("griffinHeart", this.X, this.Y), 1], [new Item("griffinHeadLrg", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 400 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (400 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("griffinPelt", this.X, this.Y), 1], [new Item("griffinHeadSml", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1000, true);
            }
            if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(1200, true);
            }
            else
            {
                this.rangeOfSightCalculator(900, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(15, 20);
                    this.callForNearbyHelpFromType(500, "Griffin");
                }
                if (this.alpha == "massive")
                {
                    this.Attack(15, 35);
                    this.callForNearbyHelpFromType(600, "Griffin");
                }
                else
                {
                    this.Attack(10, 15);
                    this.callForNearbyHelpFromType(450, "Griffin");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        if (this.action != "lunge" && !this.lunging)
                        {
                            this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                        }
                        else if (this.target != "none" && this.target != player)
                        {
                            this.pointTowards(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                    }
                    if (wKey)
                    {
                        if (this.action != "lunge" && !this.lunging)
                        {
                            this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)});
                        }
                        else if (this.target != "none" && this.target != player)
                        {
                            this.pointTowards(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                    }
                    else
                    {
                        if (this.action != "lunge" && !this.lunging)
                        {
                            this.moving = false;
                            this.costume = 0;
                        }
                        else if (this.target != "none" && this.target != player)
                        {
                            this.pointTowards(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                    }
                }
                else
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (player.getSurvivalism() >= 50)
                {
                    this.mount(0);
                }

                //action AI system
                if (this.target == player)
                {
                    if (this.DTP() > 475 && this.DTP() < 925 && this.lunging != true && this.DTP() <= this.rangeOfSight && this.team != "player")
                    {
                        this.speed = 0;
                        this.action = "lunge";
                    }
                    else if (!this.lunging)
                    {
                        this.speed = this.standardSpeed;
                        this.action = "swipe";
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) > 475 && this.DTU(this.target) < 925 && this.lunging != true && this.DTU(this.target) <= this.rangeOfSight)
                    {
                        this.speed = 0;
                        this.action = "lunge";
                    }
                    else if (!this.lunging)
                    {
                        this.speed = this.standardSpeed;
                        this.action = "swipe";
                    }
                }

                if (this.target == "none" || this.target == player && this.team == "player")
                {
                    this.lunging = false;
                    this.action = "swipe";
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.action == "lunge" && !this.lunging)
                {
                    this.attacking = true;
                    this.costumeEngine(4, 0.095, false);
                }
                else if (this.lunging)
                {
                    this.attacking = true;
                    this.speed = this.lungeSpeed;
                    this.costume = 0;

                    if (this.target == player && this.team != "player")
                    {
                        this.engagementRadius = this.standardEngagementRadius + 10;
                        if (this.DTP() < this.engagementRadius)
                        {
                            this.effect = "smashbackII";
                            this.attacking = true;
                            this.finalAttackCostume = true;
                            if (this.alpha == true)
                            {
                                this.Attack(25, 70);
                            }
                            else if (this.alpha == "massive")
                            {
                                this.Attack(30, 90);
                            }
                            else
                            {
                                this.Attack(20, 50);
                            }
                            this.lunging = false;
                            this.effect = "smashbackI";
                            this.speed = this.standardSpeed;
                        }
                    }
                    else if (this.target != "none")
                    {
                        this.engagementRadius = this.standardEngagementRadius + this.target.sizeRadius;
                        if (this.DTU(this.target) < this.engagementRadius)
                        {
                            this.effect = "smashbackII";
                            this.attacking = true;
                            this.finalAttackCostume = true;
                            if (this.alpha == true)
                            {
                                this.Attack(25, 70);
                            }
                            else if (this.alpha == "massive")
                            {
                                this.Attack(30, 90);
                            }
                            else
                            {
                                this.Attack(20, 50);
                            }
                            this.lunging = false;
                            this.effect = "smashbackI";
                            this.speed = this.standardSpeed;
                        }
                    }
                    this.engagementRadius = this.standardEngagementRadius;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.100, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (this.action == "swipe")
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                        {
                            this.costumeEngine(4, 0.095, true);
                        }
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        if (this.lunging)
                        {
                            this.drawUnit(atal, 997, 1310, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                        else if (this.action == "lunge")
                        {
                            this.drawUnit(atal, 990, 59, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                        else
                        {
                            if (this.damageDealt)
                            {
                                this.timeBetweenAttacks = new Date().getTime();
                            }
                            this.damageDealt = false;
                            this.drawUnit(atal, 990, 59, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(atal, 990, 310, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(atal, 990, 59, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        if (this.lunging)
                        {
                            this.drawUnit(atal, 997, 1310, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                        else if (this.action == "lunge")
                        {
                            this.drawUnit(atal, 993, 784, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(atal, 993, 1573, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                    }
                    else
                    {
                        this.drawUnit(atal, 990, 59, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        if (this.lunging)
                        {
                            this.drawUnit(atal, 997, 1310, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                        }
                        else if (this.action == "lunge")
                        {
                            this.drawUnit(atal, 1004, 1038, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                            if (theCostume >= 3)
                            {
                                this.lunging = true;
                            }
                        }
                        else
                        {
                            if (theCostume >= 3)
                            {
                                if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                                {
                                    this.finalAttackCostume = true; //deal the damage!
                                    this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                                }
                                this.drawUnit(atal, 993, 2073, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(atal, 995, 1824, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                            }
                        }
                    }
                    else
                    {
                        this.drawUnit(atal, 983, 545, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(atal, 1016, 2359, 308, 238, -1/2 * 308 * this.alphaSize - this.xAdjustment, -1/2 * 238 * this.alphaSize - this.yAdjustment, 308 * this.alphaSize, 238 * this.alphaSize);
            }

        }
        //OLKRIN
        if (this.type == "Olkrin")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                var randoom = Math.round(Math.random());
                if (Math.max(0, 57 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1400 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1400 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (randoom == 0)
                {
                    this.drops = [[new Item("goliathOlkrinSkull", this.X, this.Y), 1], [new Item("rawOlkrinFlesh", this.X, this.Y), 10]];
                }
                else
                {
                    this.drops = [[new Item("olkrinHorn", this.X, this.Y), 2], [new Item("rawOlkrinFlesh", this.X, this.Y), 12]];
                }
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 18 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 172 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (172 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawOlkrinFlesh", this.X, this.Y), 1]];
            }
            else
            {
                var randoom = Math.round(Math.random());
                if (Math.max(0, 36 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1000 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1000 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (randoom)
                {
                    this.drops = [[new Item("olkrinSkull", this.X, this.Y), 1], [new Item("rawOlkrinFlesh", this.X, this.Y), 4]];
                }
                else
                {
                    this.drops = [[new Item("olkrinArm", this.X, this.Y), 1], [new Item("olkrinHorn", this.X, this.Y), 2], [new Item("rawOlkrinFlesh", this.X, this.Y), 3]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)

            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1100, "very");
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(750, "very");
            }
            else
            {
                this.rangeOfSightCalculator(900, "very");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(28, 36);
                    this.callForNearbyHelpFromType(1000, "Olkrin");
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(8, 12);
                    this.callForNearbyHelpFromType(1600, "Olkrin");
                }
                else
                {
                    this.Attack(16, 24);
                    this.callForNearbyHelpFromType(1000, "Olkrin");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.070, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(15, 0.225, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 156, 904, 117, 157, -99 - this.xAdjustment, -131 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 143, 395, 117, 157, -106 - this.xAdjustment, -136 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 165, 1082, 117, 157, -87 - this.xAdjustment, -110 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 163, 1228, 117, 157, -92 - this.xAdjustment, -108 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 147, 551, 117, 157, -102 - this.xAdjustment, -108 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 4)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(verse, 163, 1228, 117, 157, -90 - this.xAdjustment, -109 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 5)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.drawUnit(verse, 163, 1228, 117, 157, -92 - this.xAdjustment, -108 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 165, 1082, 117, 157, -87 - this.xAdjustment, -110 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 156, 904, 117, 157, -99 - this.xAdjustment, -131 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                } // back to frame 0 here.
                else if (theCostume == 9)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 30, 902, 117, 157, -100 - this.xAdjustment, -155 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 10)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 38, 1071, 117, 157, -88 - this.xAdjustment, -163 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 11)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }

                        this.drawUnit(verse, 43, 1228, 117, 157, -90 - this.xAdjustment, -171 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 12)
                {
                    if (this.attacking)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.
                        this.drawUnit(verse, 38, 1071, 117, 157, -88 - this.xAdjustment, -163 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 13)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 30, 902, 117, 157, -100 - this.xAdjustment, -155 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
                else if (theCostume == 14)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                    }
                }
            }
            else
            {
                if (this.alpha == false)
                {
                    this.drawUnit(verse, 10, 1413, 133, 92, -186 - this.xAdjustment, -80 - this.yAdjustment, 133 * this.alphaSize, 92 * this.alphaSize);
                }
                else if (this.alpha == true)
                {
                    this.drawUnit(verse, 10, 1413, 133, 92, -186 - this.xAdjustment, -80 - this.yAdjustment, 133 * this.alphaSize, 92 * this.alphaSize);
                }
                else if (this.alpha == "baby")
                {
                    this.drawUnit(verse, 10, 1413, 133, 92, -156 - this.xAdjustment, -100 - this.yAdjustment, 133 * this.alphaSize, 92 * this.alphaSize);
                }
            }

        }
        //NAAPRID
        if (this.type == "Naaprid")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (20 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("naapridPelt", this.X, this.Y), 1], [new Item("rawNaapridFlesh", this.X, this.Y), 1], [new Item("naapridHorn", this.X, this.Y), 1]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 6 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (6 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawYoungNaapridFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 6 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 14 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (14 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
                this.drops = [[new Item("naapridPelt", this.X, this.Y), 1], [new Item("rawNaapridFlesh", this.X, this.Y), 1], [new Item("naapridHorn", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(345, "mildy");
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(285, "very");
            }
            else
            {
                this.rangeOfSightCalculator(300, "very");
            }
            //Milking Naaprid
            if (this.alpha == false && player.getSurvivalism() >= 10 && X - mouseX + 1/2 * CCC.width < this.X + this.sizeRadius && X - mouseX + 1/2 * CCC.width > this.X - this.sizeRadius && Y - mouseY + 1/2 * CCC.height < this.Y + this.sizeRadius && Y - mouseY + 1/2 * CCC.height > this.Y - this.sizeRadius)
            {
                if (this.DTP() <= this.sizeRadius + 70 && dClick && new Date().getTime() > this.milkTime + 40000)
                {
                    this.milkTime = new Date().getTime();
                    this.doBreak = false;
                    this.yaTiene = false;

                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < naapridConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + naapridConversionList[j][0]);
                            if (Inventory[i][0].type == naapridConversionList[j][0])
                            {
                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == naapridConversionList[j][1])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(naapridConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(naapridConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    if (this.disturbed || player.getSurvivalism() < 10 || player.weaponEquipped != "none")
                    {
                        this.Attack(7, 2);
                        this.callForNearbyHelpFromType(385, "Naaprid");
                    }
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(2, 0);
                    this.callForNearbyHelpFromType(300, "Naaprid");
                }
                else
                {
                    if (this.disturbed || player.getSurvivalism() < 10|| player.weaponEquipped != "none")
                    {
                        this.Attack(5, 1);
                        this.callForNearbyHelpFromType(350, "Naaprid");
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                    }
                    if (wKey)
                    {
                        this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)})
                    }
                    else
                    {
                        this.moving = false;
                        this.costume = 0;
                    }
                }
                else
                {
                    if (this.alpha == true)
                    {
                        if (this.target == player)
                        {
                            this.pointTowardsPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointTowards(this.target);
                        }
                    }
                    else if (this.alpha == "baby")
                    {
                        if (this.target == player)
                        {
                            this.pointAwayFromPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                    else
                    {
                        if (this.disturbed == true && this.health > (this.healthMAX * (3/4)) || player.weaponEquipped == "none" && player.getSurvivalism() >= 10 && this.disturbed == false)
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointTowards(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    if (this.target == player && player.getSurvivalism() < 10 || this.target == player && this.disturbed || this.target == player && player.weaponEquipped != "none")
                    {
                        if (this.team == "herd" || this.team == "player")
                        {
                            this.moveInRelationToPlayer();
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.team == "herd" || this.team == "player")
                        {
                            this.moveInRelationToThing(this.target);
                        }

                    }
                }

                if (player.getSurvivalism() >= 3 && this.alpha != "baby" && this.alpha != false)
                {
                    this.mount(0);
                }

            }
            else if (this.doOnDeathOnce)
            {
                this.doOnDeathOnce = false;
                if (this.team == "Freynor")
                {
                    if (!this.killNotByPlayer || this.killByPlayerTeam)
                    {
                        player.freynorFaction -= 50;
                    }
                }
                else if (this.team == "Nirwaden")
                {
                    if (!this.killNotByPlayer || this.killByPlayerTeam)
                    {
                        player.nirwadenFaction -= 50;
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.140, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(6, 0.225, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2849, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 2849, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2928, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 3088, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false && this.alpha == true || this.alpha != "baby" && this.disturbed == true && this.health > (this.healthMAX * (3/4)) && this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(verse, 2852, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 3005, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2935, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                }
                else if (theCostume == 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2852, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 3007, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(verse, 3080, 90, 71, 48, -55 - this.xAdjustment, -32 - this.yAdjustment, 71 * this.alphaSize, 48 * this.alphaSize);
            }

        }
        //WAANTI
        if (this.type == "Waanti")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 6 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (6 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawWaantiFlesh", this.X, this.Y), 2], [new Item("waantiPelt", this.X, this.Y), 2]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawWaantiFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 6 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (3 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawWaantiFlesh", this.X, this.Y), 2], [new Item("waantiPelt", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)

            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(500, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(350, false);
            }
            else
            {
                this.rangeOfSightCalculator(450, false);
            }
            //Milking Waanti
            if (this.alpha == false && player.getSurvivalism() >= 12 && X - mouseX + 1/2 * CCC.width < this.X + this.sizeRadius && X - mouseX + 1/2 * CCC.width > this.X - this.sizeRadius && Y - mouseY + 1/2 * CCC.height < this.Y + this.sizeRadius && Y - mouseY + 1/2 * CCC.height > this.Y - this.sizeRadius)
            {
                if (this.DTP() <= this.sizeRadius + 70 && dClick && new Date().getTime() > this.milkTime + 90000)
                {
                    this.milkTime = new Date().getTime();
                    this.doBreak = false;
                    this.yaTiene = false;

                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < waantiConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + waantiConversionList[j][0]);
                            if (Inventory[i][0].type == waantiConversionList[j][0])
                            {
                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == waantiConversionList[j][1])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(waantiConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(waantiConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
            }

            //AI
            if (this.alive == true) //Waanti's attack is used for grazing not attacking. //grazing heals them.
            {
                if (this.alpha == true)
                {
                    this.callForNearbyHelpFromType(500, "Waanti");
                }
                else if (this.alpha == "baby")
                {
                    this.callForNearbyHelpFromType(450, "Waanti");
                }
                else
                {
                    this.callForNearbyHelpFromType(350, "Waanti");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();
                if (this.alpha == true)
                {
                    if (player.weaponEquipped == "none" && player.getSurvivalism() >= 12 && !this.disturbed)
                    {
                        if (this.target == player)
                        {
                            this.pointTowardsPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointTowards(this.target);
                        }
                    }
                    else
                    {
                        if (this.target == player)
                        {
                            this.pointAwayFromPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                }
                else if (this.alpha == "baby")
                {
                    if (player.weaponEquipped == "none" && player.getSurvivalism() >= 12 && !this.disturbed)
                    {
                        if (this.target == player)
                        {
                            this.pointTowardsPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                    else
                    {
                        if (this.target == player)
                        {
                            this.pointAwayFromPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                }
                else
                {
                    if (player.weaponEquipped == "none" && player.getSurvivalism() >= 12 && !this.disturbed)
                    {
                        if (this.target == player)
                        {
                            this.pointTowardsPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                    else
                    {
                        if (this.target == player)
                        {
                            this.pointAwayFromPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                }
                if (this.target == player && player.getSurvivalism() < 12 || this.target == player && this.disturbed || this.target == player && player.weaponEquipped != "none")
                {
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(2, 0.155, false);
                }
                else
                {
                    this.goatEatness += 1;
                    if(this.goatEatness > (this.attackWait * 100))
                    {
                        this.costumeEngine(4, 0.045, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.goatly == true)
                    {
                        this.goatEatness = 0;
                        this.goatly = false;
                    }
                    if (this.moving  && !this.attacking)
                    {
                        this.drawUnit(furr, 263, 12, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(furr, 269, 109, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(furr, 268, 64, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                    else
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.
                        this.drawUnit(furr, 271, 191, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(furr, 269, 109, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                    else
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.health = Math.min(this.healthMAX, this.health + 0.2);
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(furr, 271, 147, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(furr, 269, 109, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                    else
                    {
                        this.goatly = true;
                        this.drawUnit(furr, 271, 147, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(furr, 268, 236, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
            }

            if (this.X != this.plantedX || this.Y != this.plantedY)
            {
                console.log(this.plantedX + " " + this.X)
                this.attacking = false;
            }
            else
            {
                this.attacking = true;
            }

            this.plantedX = this.X;
            this.plantedY = this.Y;

        }
        //LEECH
        if (this.type == "Leech") //leeech
        {
            //Set Drops and experience
            if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 1 * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            this.drops = [];

            //RANGE OF SIGHT (anything related to range of sight)

            this.rangeOfSightCalculator(210, false);

            //AI
            if (this.alive == true)
            {

                this.callForNearbyHelpFromType(320, "Leech");


                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                    if (!player.antiLeech && player.armourTotal < 10)
                    {
                        if (this.DTP() <= this.engagementRadius)
                        {
                            player.leeches += 1;
                            ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this), 1);
                        }
                    }
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);

                    if (this.target.antiLeech != true && this.target.armour < 10 && this.target.flying != true)
                    {
                        if (this.DTU(this.target) <= (this.engagementRadius + this.target.sizeRadius + 2))
                        {
                            this.target.leeches += 1;
                            ArtificialIntelligenceAccess.splice(ArtificialIntelligenceAccess.indexOf(this), 1);
                        }
                    }
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                this.costumeEngine(3, 0.09, false);

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    this.drawUnit(dmil, 369, 659, 44, 24, -1/2 * 44 * this.alphaSize - this.xAdjustment, -1/2 * 24 * this.alphaSize - this.yAdjustment, 44 * this.alphaSize, 24 * this.alphaSize);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(dmil, 433, 659, 44, 24, -1/2 * 44 * this.alphaSize - this.xAdjustment, -1/2 * 24 * this.alphaSize - this.yAdjustment, 44 * this.alphaSize, 24 * this.alphaSize);
                }
                else if (theCostume >= 2)
                {
                    this.drawUnit(dmil, 495, 658, 44, 24, -1/2 * 44 * this.alphaSize - this.xAdjustment, -1/2 * 24 * this.alphaSize - this.yAdjustment, 44 * this.alphaSize, 24 * this.alphaSize);
                }
            }
            else
            {
                this.drawUnit(dmil, 368, 710, 44, 24, -1/2 * 44 * this.alphaSize - this.xAdjustment, -1/2 * 24 * this.alphaSize - this.yAdjustment, 44 * this.alphaSize, 24 * this.alphaSize);
            }
        }
        //HORSE
        if (this.type == "Horse") //caballo
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 16 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (16 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("horseHair", this.X, this.Y), 3], [new Item("rawHorseFlesh", this.X, this.Y), 3]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 10 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("horseHair", this.X, this.Y), 1], [new Item("rawHorseFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 15 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (15 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
                this.drops = [[new Item("horseHair", this.X, this.Y), 2], [new Item("rawHorseFlesh", this.X, this.Y), 3]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(375, "mildy");
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(300, "very");
            }
            else
            {
                this.rangeOfSightCalculator(350, "very");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    if (this.disturbed || player.getSurvivalism() < 29 || player.weaponEquipped != "none")
                    {
                        this.callForNearbyHelpFromType(400, "Horse");
                    }
                }
                else if (this.alpha == "baby")
                {
                    if (this.disturbed || player.getSurvivalism() < 29 || player.weaponEquipped != "none")
                    {
                        this.callForNearbyHelpFromType(400, "Horse");
                    }
                }
                else
                {
                    if (this.disturbed || player.getSurvivalism() < 29 || player.weaponEquipped != "none")
                    {
                        this.callForNearbyHelpFromType(400, "Horse");
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                    }
                    if (wKey)
                    {
                        this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)})
                    }
                    else
                    {
                        this.moving = false;
                        this.costume = 0;
                    }
                }
                else
                {
                    if (this.alpha == true)
                    {
                        if (!this.disturbed && player.getSurvivalism() > 29 && player.weaponEquipped == "none")
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    else if (this.alpha == "baby")
                    {
                        if (!this.disturbed && player.getSurvivalism() > 29 && player.weaponEquipped == "none")
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    else
                    {
                        if (!this.disturbed && player.getSurvivalism() > 29 && player.weaponEquipped == "none")
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    if (this.disturbed || player.getSurvivalism() < 29 || player.weaponEquipped != "none" || this.team == "player")
                    {
                        if (this.team == "herd" || this.team == "player")
                        {
                            this.moveInRelationToPlayer();
                        }
                    }
                    else if (this.target != "none")
                    {
                        if (this.team == "herd" || this.team == "player")
                        {
                            this.moveInRelationToThing(this.target);
                        }
                    }
                }

                if (player.getSurvivalism() >= 7 && this.alpha != "baby")
                {
                    this.mount(0);
                }

            }
            else if (this.doOnDeathOnce)
            {
                this.doOnDeathOnce = false;
                if (this.team == "Nirwaden")
                {
                    if (!this.killNotByPlayer || this.killByPlayerTeam)
                    {
                        player.nirwadenFaction -= 65;
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.09, false);
                }
                else
                {
                    this.goatEatness += 2;
                    if(this.goatEatness > (this.attackWait * 100))
                    {
                        this.costumeEngine(6, 0.14, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.goatly == true)
                    {
                        this.goatEatness = 0;
                        this.goatly = false;
                    }
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 14, 17, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(atal, 333, 14, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(atal, 14, 15, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 16, 178, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(atal, 333, 177, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        if (this.damageDealt == false && this.alpha == true || this.alpha != "baby" && this.disturbed == true && this.health > (this.healthMAX * (3/4)) && this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(atal, 16, 178, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(atal, 641, 174, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.damageDealt = false;
                        this.drawUnit(atal, 10, 312, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(atal, 642, 17, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(atal, 10, 312, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.health = Math.min(this.healthMAX, this.health + 0.5);
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                    }
                    else
                    {
                        this.drawUnit(atal, 333, 14, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.attacking)
                    {
                        this.goatly = true;
                        this.drawUnit(atal, 10, 312, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(atal, 333, 177, 258, 91, -1/2 * 258 * this.alphaSize - this.xAdjustment, -1/2 * 91 * this.alphaSize - this.yAdjustment, 258 * this.alphaSize, 91 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(atal, 351, 327, 216, 134, -1/2 * 216 * this.alphaSize - this.xAdjustment, -1/2 * 134 * this.alphaSize - this.yAdjustment, 216 * this.alphaSize, 134 * this.alphaSize);
            }

            if (this.X != this.plantedX || this.Y != this.plantedY)
            {
                console.log(this.plantedX + " " + this.X)
                this.attacking = false;
            }
            else
            {
                this.attacking = true;
            }

            this.plantedX = this.X;
            this.plantedY = this.Y;
        }
        //ZARBU
        if (this.type == "Zarbu")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 70 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (70 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawZarbuFlesh", this.X, this.Y), 5], [new Item("zarbuPelt", this.X, this.Y), 2], [new Item("zarbuTuft", this.X, this.Y), 2]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 15 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (15 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawZarbuFlesh", this.X, this.Y), 1], [new Item("zarbuTuft", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 30 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 33 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (33 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawZarbuFlesh", this.X, this.Y), 3], [new Item("zarbuPelt", this.X, this.Y), 1], [new Item("zarbuTuft", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)

            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(600, "mildly");
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(400, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(550, "mildly");
            }

            //AI
            if (this.alive == true) //Zarbu's attack is used for grazing not attacking. //grazing heals them.
            {
                if (this.alpha == true)
                {
                    this.callForNearbyHelpFromType(600, "Zarbu");
                }
                else if (this.alpha == "baby")
                {
                    this.callForNearbyHelpFromType(600, "Zarbu");
                }
                else
                {
                    this.callForNearbyHelpFromType(600, "Zarbu");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                    }
                    if (wKey)
                    {
                        this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)})
                    }
                    else
                    {
                        this.moving = false;
                        this.costume = 0;
                    }
                }
                else
                {
                    if (this.alpha == true)
                    {
                        if (player.weaponEquipped == "none" && player.getSurvivalism() >= 30 && !this.disturbed)
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointTowards(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    else if (this.alpha == "baby")
                    {
                        if (player.weaponEquipped == "none" && player.getSurvivalism() >= 30 && !this.disturbed)
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    else
                    {
                        if (player.weaponEquipped == "none" && player.getSurvivalism() >= 30 && !this.disturbed)
                        {
                            if (this.target == player)
                            {
                                this.pointTowardsPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                        else
                        {
                            if (this.target == player)
                            {
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                            }
                        }
                    }
                    if (this.target == player && player.getSurvivalism() < 30 || this.target == player && this.disturbed || this.target == player && player.weaponEquipped != "none" || this.team == "player" && this.target == player)
                    {
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (player.getSurvivalism() >= 33 && this.alpha != "baby")
                {
                    this.mount(0);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.1200, false);
                }
                else
                {
                    this.goatEatness += 1;
                    if(this.goatEatness > (this.attackWait * 100))
                    {
                        this.costumeEngine(8, 0.085, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.goatly == true)
                    {
                        this.goatEatness = 0;
                        this.goatly = false;
                    }
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(polux, 590, 159, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.
                        this.drawUnit(polux, 599, 362, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(polux, 597, 258, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polux, 805, 363, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(polux, 806, 160, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.health = Math.min(this.healthMAX, this.health + 1);
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }
                        this.drawUnit(polux, 591, 458, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(polux, 805, 253, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else
                    {
                        this.goatly = true;
                        this.drawUnit(polux, 591, 458, 195, 92, -1/2 * 195 * this.alphaSize - this.xAdjustment, -1/2 * 92 * this.alphaSize - this.yAdjustment, 195 * this.alphaSize, 92 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polux, 823, 456, 167, 109, -1/2 * 167 * this.alphaSize - this.xAdjustment, -1/2 * 109 * this.alphaSize - this.yAdjustment, 167 * this.alphaSize, 109 * this.alphaSize);
            }

            if (this.X != this.plantedX || this.Y != this.plantedY)
            {
                console.log(this.plantedX + " " + this.X);
                this.attacking = false;
            }
            else
            {
                this.attacking = true;
            }

            this.plantedX = this.X;
            this.plantedY = this.Y;

        }
        //SEAL
        if (this.type == "Seal")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 3 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (10 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawSealFlesh", this.X, this.Y), 3], [new Item("blubber", this.X, this.Y), 1], [new Item("sealSkin", this.X, this.Y), 1]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawSealFlesh", this.X, this.Y), 1], [new Item("babySealSkin", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 100 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 2 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (2 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawSealFlesh", this.X, this.Y), 2], [new Item("blubber", this.X, this.Y), 1], [new Item("sealSkin", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)

            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(600, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(400, false);
            }
            else
            {
                this.rangeOfSightCalculator(500, false);
            }

            //AI
            if (this.alive == true) //Seal's attack is used for eating fish, not for attacking
            {
                if (this.alpha == true)
                {
                    this.callForNearbyHelpFromType(800, "Seal");
                }
                else if (this.alpha == "baby")
                {
                    this.callForNearbyHelpFromType(800, "Seal");
                }
                else
                {
                    this.callForNearbyHelpFromType(800, "Seal");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                //eating fish
                if (this.attacking && this.disturbed) // makes running priority when disturbed
                {
                    this.attacking = false;
                }

                if (this.disturbed == false && player.weaponEquipped == "none" && player.getSurvivalism() >= 5 || this.disturbed == false && this.DTP() > 225 || this.team == "player" && tKey == false && fKey == false && rKey == false) //if not frightened...
                {
                    this.targetFood = "none";
                    this.moving = false;

                    for (var i = 0; i < worldItems.length; i++) //look for food... (grains and breads)
                    {
                        if (worldItems[i][0].dmx == this.dmx)
                        {
                            if (worldItems[i][0].type == "crabFlesh" || worldItems[i][0].type == "rawCrabClaw" || worldItems[i][0].type == "rawRedCrombal" || worldItems[i][0].type == "rawThab" || worldItems[i][0].type == "rawJuurgo" || worldItems[i][0].type == "rawRazorfin" || worldItems[i][0].type == "rawCloimidFlesh" || worldItems[i][0].type == "rawSaskriit" || worldItems[i][0].type == "rawRiulpo" || worldItems[i][0].type == "rawKald" || worldItems[i][0].type == "rawPolxetp" || worldItems[i][0].type == "rawTridite" || worldItems[i][0].type == "rawSalmon" || worldItems[i][0].type == "rawSlol" || worldItems[i][0].type == "rawRedBelliedFalder" || worldItems[i][0].type == "rawCrawdid" || worldItems[i][0].type == "rawDuskfish")
                            {
                                if (this.distanceFinder(this, worldItems[i][0]) <= (this.rangeOfSight + 250)) //seals can smell raw fish to eat from a while off.
                                {
                                    if (this.targetFood == "none")
                                    {
                                        this.targetFood = worldItems[i][0];
                                    }
                                    else
                                    {
                                        if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.targetFood))
                                        {
                                            this.targetFood = worldItems[i][0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.targetFood != "none")
                    {
                        if (this.distanceFinder(this, this.targetFood) <= this.engagementRadius)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            //attacking is reset to false at the end of the eating animation
                            this.pointTowards(this.targetFood);
                            this.moveInRelationToThing(this.targetFood);
                        }
                    }
                    else if (player.weaponEquipped == "none" && player.getSurvivalism() >= 5 && this.DTP() > 225)
                    {
                        if (this.target == player)
                        {
                            this.pointTowardsPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                    else
                    {
                        if (this.target == player)
                        {
                            this.pointAwayFromPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                        }
                    }
                }
                else
                {
                    if (this.target == player)
                    {
                        this.pointAwayFromPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                    }
                }

                if (this.attacking == false)
                {
                    if (this.target == player && player.getSurvivalism() < 5 || this.target == player && this.disturbed || this.target == player && player.weaponEquipped != "none" || this.DTP() < 210)
                    {
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.moveInRelationToThing(this.target);
                    }
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.15, true);
                }
                else if (this.attacking)
                {
                    this.costumeEngine(6, 0.06, true);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.sealy == true)
                    {
                        this.attacking = false;
                    }
                    if (this.moving  && !this.attacking)
                    {
                        this.drawUnit(norc, 59, 1, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 59, 1, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(norc, 121, 2, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 123, 41, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(norc, 57, 36, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 60, 78, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(norc, 121, 2, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else
                    {
                        this.feastPrepped = true;
                        this.drawUnit(norc, 120, 81, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(norc, 59, 1, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                    else
                    {

                        if (this.feastPrepped == true)
                        {
                            this.sealy = true;
                            for (var i = 0; i < worldItems.length; i++)
                            {
                                if (worldItems[i][0] === this.targetFood)
                                {
                                    this.health = Math.min(this.healthMAX, this.health + 4);
                                    if (worldItems[i][0].ability == "poisonI" || worldItems[i][0].ability == "poisonII" || worldItems[i][0].ability == "poisonIII" || worldItems[i][0].ability == "poisonIV" || worldItems[i][0].ability == "poisonV")
                                    {
                                        this.health = 0;
                                    }
                                    if (worldItems[i][1] > 1)
                                    {
                                        worldItems[i][1] -= 1;
                                        break;
                                    }
                                    else
                                    {
                                        this.targetFood = "none";
                                        worldItems.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                            this.feastPrepped = false;
                        }
                        this.drawUnit(norc, 120, 81, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                }
                else if (theCostume >= 5)
                {
                    if (this.moving && !this.attacking)
                    {
                        this.drawUnit(furr, 269, 109, 76, 46, -1/2 * 76 * this.alphaSize - this.xAdjustment, -1/2 * 46 * this.alphaSize - this.yAdjustment, 76 * this.alphaSize, 46 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(norc, 120, 81, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(norc, 1, 76, 53, 28, -1/2 * 53 * this.alphaSize - this.xAdjustment, -1/2 * 28 * this.alphaSize - this.yAdjustment, 53 * this.alphaSize, 28 * this.alphaSize);
            }

        }
        //MOFU
        if (this.type == "Mofu") //pronounced moe-foo
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawLargeMofuFlesh", this.X, this.Y), 1], [new Item("mofuFeather", this.X, this.Y), Math.floor(Math.random() * 5) + 1], [new Item("mofuFoot", this.X, this.Y), 2]];
            }
            else if (this.alpha == "baby")
            {
                this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawMofflingFlesh", this.X, this.Y), 1]];
            }
            else
            {
                this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawMofuFlesh", this.X, this.Y), 1], [new Item("mofuFeather", this.X, this.Y), Math.floor(Math.random() * 2) + 1], [new Item("mofuFoot", this.X, this.Y), 2]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1000, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(400, false);
            }
            else
            {
                this.rangeOfSightCalculator(800, false);
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                //Growth by food (leveling/evolution)
                if (this.alpha == "baby")
                {
                    if (this.mofuFood >= 14)
                    {
                        this.mofuFood = 0;
                        this.alpha = false;

                        //new stats below:
                        //----------------

                        this.healthMAX = 4;
                        this.health = this.healthMAX;
                        this.engagementRadius = 12;
                        this.sizeRadius = 9;
                        this.attackWait = 3;
                        this.alphaSize = 1;
                    }
                }
                else if (this.alpha == false)
                {
                    if (this.mofuFood >= 26)
                    {
                        this.mofuFood = 0;
                        this.alpha = true;

                        //new stats below:
                        //----------------

                        this.healthMAX = 7 + Math.round(Math.random());
                        this.health = this.healthMAX;
                        this.engagementRadius = 24;
                        this.sizeRadius = 18;
                        this.attackWait = 2.5;
                        this.alphaSize = 2;
                    }
                }
                else if (this.alpha == true)
                {
                    if (this.mofuFood >= 66)
                    {
                        this.drops = [[new Item("rawLargeMofuFlesh", this.X, this.Y), 1], [new Item("mofuFeather", this.X, this.Y), Math.floor(Math.random() * 5) + 1], [new Item("mofuFoot", this.X, this.Y), 2], [new Item("fattyMofuLiver", this.X, this.Y), 1]];
                    }
                }

                if (this.alpha == false || this.alpha == true)
                {
                    //egg laying
                    this.eggTimer += 1 * (TTD / 16.75);
                    if (this.eggTimer >= 10000)
                    {
                        this.eggTimer = 0;

                        var canPlace = true;
                        var hits = 0;
                        for (var j = 0; j < scenicList.length; j++)
                        {
                            //5 is the radius of mofuEgg Scenery Object.
                            if (scenicList[j].X - 5 <= this.X + scenicList[j].radius && scenicList[j].X + 5 >= this.X - scenicList[j].radius && scenicList[j].Y - 5 <= this.Y + scenicList[j].radius && scenicList[j].Y + 5 >= this.Y - scenicList[j].radius)
                            {
                                canPlace = false;
                            }
                        }

                        if (canPlace == true)
                        {
                            scenicList.push(new Scenery("fertilizedMofuEgg", this.X, this.Y, (Math.random() * (2 * Math.PI)), false));
                        }

                        this.mofuFood = Math.max(0, this.mofuFood - 1)
                    }
                }

                //BIRD BRAIN
                //Process
                if (this.team != "player")
                {
                    if (this.DTP() <= 1/3 * this.rangeOfSight && shiftKey == true && wKey == true && player.getSurvivalism() < 40 || this.alpha != true && this.DTP() <= 28 && this.attacking == false && altKey == false || this.alpha == true && this.DTP() <= 41 && this.attacking == false && altKey == false || this.DTU(this.target) <= 36 && this.target != player)
                    {
                        this.disturbedTime = new Date().getTime();
                    }
                }

                if (this.disturbed == false) //if not frightened...
                {
                    this.mofuTargetFood = "none";
                    this.moving = false;
                    this.attacking = false;
                    this.flying = false;
                    if (this.alpha == false)
                    {
                        this.speed = 1;
                    }
                    else if (this.alpha == true)
                    {
                        this.speed = 1.35;
                    }
                    else if (this.alpha == "baby")
                    {
                        this.speed = 0.85;
                    }
                    for (var i = 0; i < worldItems.length; i++) //look for food... (grains and breads)
                    {
                        if (worldItems[i][0].dmx == this.dmx)
                        {
                            if (worldItems[i][0].type == "santhGrain" || worldItems[i][0].type == "harstGrain" || worldItems[i][0].type == "santhBread"|| worldItems[i][0].type == "butteredSanthBread" || worldItems[i][0].type == "harstBread" || worldItems[i][0].type == "butteredHarstBread")
                            {
                                if (this.distanceFinder(this, worldItems[i][0]) <= (this.rangeOfSight / 2)) // if grains are easy to get to go after them.
                                {
                                    if (this.mofuTargetFood == "none")
                                    {
                                        this.mofuTargetFood = worldItems[i][0];
                                    }
                                    else
                                    {
                                        if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.mofuTargetFood != "none")
                    {
                        if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            this.attacking = false;
                            this.pointTowards(this.mofuTargetFood);
                            this.moveInRelationToThing(this.mofuTargetFood);
                        }
                    }
                }
                else
                {
                    this.attacking = false;
                    this.flying = true;
                    if (this.alpha == false)
                    {
                        this.speed = 5;
                    }
                    else if (this.alpha == true)
                    {
                        this.speed = 6.5;
                    }
                    else if (this.alpha == "baby")
                    {
                        this.speed = 3.85;
                    }

                    if (this.target == player)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking && this.disturbed == false) //walking (towards food)
                {
                    this.costumeEngine(2, 0.05, false);
                }
                else if (this.moving && !this.attacking && this.disturbed == true) //flying (away from player)
                {
                    this.costumeEngine(2, 0.065, false);
                }
                else if (this.attacking) //eating food (off the ground)
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.04, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(mofu, 108, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                    else if (this.moving && !this.flying)
                    {
                        this.drawUnit(mofu, 194, 10, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                    else if (this.flying)
                    {
                        this.drawUnit(mofu, 163, 48, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 108, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        this.mofuFeastPrepped = true;
                        this.drawUnit(mofu, 152, 10, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                    else if (!this.flying)
                    {
                        this.drawUnit(mofu, 236, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 205, 47, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        if (this.mofuFeastPrepped == true)
                        {
                            for (var i = 0; i < worldItems.length; i++)
                            {
                                if (worldItems[i][0] === this.mofuTargetFood)
                                {
                                    this.mofuFood += 1;
                                    if (worldItems[i][1] > 1)
                                    {
                                        worldItems[i][1] -= 1;
                                        break;
                                    }
                                    else
                                    {
                                        this.mofuTargetFood = "none";
                                        worldItems.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                            this.mofuFeastPrepped = false;
                        }
                        this.drawUnit(mofu, 152, 10, 40, 36, -1 / 2 * 40 * this.alphaSize - this.xAdjustment, -1 / 2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(mofu, 108, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(mofu, 348, 5, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
            }

        }
        //FLETTER
        if (this.type == "Fletter")
        {
            //Set Drops and experience
            this.experience = (1 * ((player.getIntelligence() / 50) + 1));
            if (this.hunger >= 7)
            {
                this.drops = [[new Item("fletterWing", this.X, this.Y), Math.round(Math.random() + 1)], [new Item("vel", this.X, this.Y), 1]];
            }
            else if (this.hunger > 0)
            {
                this.drops = [[new Item("fletterWing", this.X, this.Y), Math.round(Math.random() + 1)]];
            }


            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(3000, false);
            }
            else
            {
                this.rangeOfSightCalculator(3000, false);
            }

            //AI
            if (this.alive == true)
            {
                this.hunger -= 0.0002 * (TTD / 16.75);
                if (this.hunger < 0)
                {
                    this.killNotByPlayer = true; //if starving it will not drop things or give exp
                    this.health -= 0.0005 * (TTD / 16.75);
                }

                //eat from plants (non-fungi)
                var plantsToTarget = this.nearbyPlants(1, "fungi", true, false);
                var plantTarget = "none";
                if (plantsToTarget.length >= 1)
                {
                    plantTarget = plantsToTarget[0];
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() < 100 && player.getSurvivalism() >= 2 && this.hunger > 5 || this.DTP() < 290 && player.getSurvivalism() < 2 && this.hunger > 5)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.hunger <= 8)
                    {
                        if (plantTarget != "none")
                        {
                            this.pointTowards(plantTarget);
                            this.moveInRelationToThing(plantTarget);
                            if (this.DTU(plantTarget) <= this.engagementRadius && plantTarget.nectarNum >= 1)
                            {
                                this.attacking = true;
                            }
                            else
                            {
                                this.attacking = false;
                            }
                        }
                    }
                    else //fly around in circles to waste time
                    {
                        this.newRotation += this.rotationSpeed;
                        this.moveInRelationToPlayer();
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) < 900 && this.hunger > 5)
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                    else if (this.hunger < 8)
                    {
                        if (plantTarget != "none")
                        {
                            this.pointTowards(plantTarget);
                            this.moveInRelationToThing(plantTarget);
                            if (this.DTU(plantTarget) <= this.engagementRadius && plantTarget.nectarNum >= 1)
                            {
                                this.attacking = true;
                            }
                            else
                            {
                                this.attacking = false;
                            }
                        }
                    }
                    else //fly around in circles to waste time
                    {
                        this.newRotation -= this.rotationSpeed;
                        this.moveInRelationToThing(this.target);
                    }
                }
            }

            //ANIMATIONS
            var szx = 1.6;
            if (this.alive == true)
            {
                this.costumeEngine(4, 0.5, false);

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    this.other = true;
                    this.drawUnit(nognog, 774, 135, 28, 28, -1/2 * 28 * this.alphaSize * szx - this.xAdjustment, -1/2 * 28 * this.alphaSize * szx - this.yAdjustment, 28 * this.alphaSize * szx, 28 * this.alphaSize * szx);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(nognog, 812, 135, 28, 28, -1/2 * 28 * this.alphaSize * szx - this.xAdjustment, -1/2 * 28 * this.alphaSize * szx - this.yAdjustment, 28 * this.alphaSize * szx, 28 * this.alphaSize * szx);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(nognog, 849, 135, 28, 28, -1/2 * 28 * this.alphaSize * szx - this.xAdjustment, -1/2 * 28 * this.alphaSize * szx - this.yAdjustment, 28 * this.alphaSize * szx, 28 * this.alphaSize * szx);
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        if (this.other)
                        {
                            this.attacking = false;
                            this.other = false;
                            plantTarget.nectarNum -= 1;
                            this.hunger = Math.min(this.hungerMAX, this.hunger + 1);
                        }
                    }
                    this.drawUnit(nognog, 812, 135, 28, 28, -1/2 * 28 * this.alphaSize * szx - this.xAdjustment, -1/2 * 28 * this.alphaSize * szx - this.yAdjustment, 28 * this.alphaSize * szx, 28 * this.alphaSize * szx);
                }
            }
            else
            {
                this.drawUnit(nognog, 838, 103, 28, 28, -1/2 * 28 * this.alphaSize * szx - this.xAdjustment, -1/2 * 28 * this.alphaSize * szx - this.yAdjustment, 28 * this.alphaSize * szx, 28 * this.alphaSize * szx);
            }

        }

        //HOFFALGRE
        if (this.type == "Hoffalgre")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                this.experience = (25 * ((player.getIntelligence() / 50) + 1));
                if (this.hunger > 0)
                {
                    if (this.sex == "Male")
                    {
                        this.drops = [[new Item("hoffalgrePelt", this.X, this.Y), 2], [new Item("rawHoffalgreFlesh", this.X, this.Y), 2], [new Item("hoffalgreTendrils", this.X, this.Y), 1]];
                    }
                    else if (this.horniness == 100)
                    {
                        this.drops = [[new Item("hoffalgrePelt", this.X, this.Y), 1], [new Item("rawHoffalgreFlesh", this.X, this.Y), 2], [new Item("hoffalgreTendrils", this.X, this.Y), 2]];
                    }
                    else
                    {
                        this.drops = [[new Item("hoffalgrePelt", this.X, this.Y), 1], [new Item("rawHoffalgreFlesh", this.X, this.Y), 1], [new Item("hoffalgreTendrils", this.X, this.Y), 2]];
                    }
                }
            }
            else if (this.alpha == "baby")
            {
                this.experience = (3 * ((player.getIntelligence() / 50) + 1));
                if (this.hunger > 0)
                {
                    this.drops = [[new Item("rawHoffalgreFlesh", this.X, this.Y), 1]];
                }
            }
            else
            {
                this.experience = (15 * ((player.getIntelligence() / 50) + 1));
                if (this.hunger > 0)
                {
                    this.drops = [[new Item("hoffalgrePelt", this.X, this.Y), 1], [new Item("rawHoffalgreFlesh", this.X, this.Y), 1], [new Item("hoffalgreTendrils", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(2500, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(2000, false);
            }
            else
            {
                this.rangeOfSightCalculator(2500, false);
            }

            //AI
            if (this.alive == true)
            {
                //Growth by food (leveling/evolution)
                if (this.alpha == "baby")
                {
                    if (this.sustenance >= 10)
                    {
                        this.alpha = false;

                        //new stats below:
                        //----------------
                        this.alphaSize = 1;

                        this.magicalResistance = 0;
                        this.heatResistance = -2.5;
                        this.attackStyle = "chunked";
                        this.attackRate = 0;  //this is for rapid style combat only.
                        this.healthMAX = Math.floor(Math.random() * 5) + 7;
                        this.health = this.healthMAX;
                        this.armour = 0;
                        this.speed = 1.9;
                        this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                        this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                        this.engagementRadius = 25;
                        this.sizeRadius = 13.75;
                        this.negateArmour = 0;
                        this.attackWait = 1.5;
                        this.horniness = 0;
                        this.hungerMAX = 20;
                        this.hunger = 20;
                        this.sustenance = 0;
                    }
                }
                else if (this.alpha == false)
                {
                    if (this.sustenance >= 35)
                    {
                        this.alpha = true;

                        //new stats below:
                        //----------------

                        if (Math.round(Math.random()))
                        {
                            this.sex = "Female";
                            this.magicalResistance = 0;
                            this.heatResistance = -2.5;
                            this.attackStyle = "chunked";
                            this.attackRate = 0;  //this is for rapid style combat only.
                            this.healthMAX = Math.floor(Math.random() * 6) + 12;
                            this.health = this.healthMAX;
                            this.armour = 0;
                            this.speed = 2.1;
                            this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                            this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                            this.engagementRadius = 39;
                            this.sizeRadius = 15.5;
                            this.negateArmour = 0;
                            this.attackWait = 1.5;
                            this.horniness = 0;
                            this.hungerMAX = 55;
                            this.hunger = 55;
                            this.sustenance = -1000000;
                        }
                        else
                        {
                            this.sex = "Male";
                            this.magicalResistance = 0;
                            this.heatResistance = -2.5;
                            this.attackStyle = "chunked";
                            this.attackRate = 0;  //this is for rapid style combat only.
                            this.healthMAX = Math.floor(Math.random() * 8) + 15;
                            this.health = this.healthMAX;
                            this.armour = 0;
                            this.speed = 2.4;
                            this.rangeOfSight = 640; //This is just to set the variable initially. The rest is variable.
                            this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                            this.engagementRadius = 44;
                            this.sizeRadius = 17;
                            this.negateArmour = 0;
                            this.attackWait = 1.5;
                            this.horniness = 0;
                            this.hungerMAX = 25;
                            this.hunger = 25;
                            this.sustenance = -1000000;
                        }
                    }
                }

                if (this.sex == "Female" && this.horniness == 100)
                {
                    //egg laying
                    this.eggTimer += 1 * (TTD / 16.75);
                    if (this.eggTimer >= 4000)
                    {
                        this.horniness = 0;
                        this.eggTimer = 0;
                        var babyAmt = Math.floor(Math.random() * 2) + 1;
                        for (var i = 0; i < babyAmt; i++)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Hoffalgre", "baby", "Unit Generated Hoffalgre"));
                        }
                        this.hunger = Math.max(0, this.hunger - 15);
                    }
                }

                //Hoffalgre Brain
                var mate = {horniness: 0};
                var mother = "none";
                if (this.alpha == "baby")
                {
                    var closestMother = 1000000;
                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        if (ArtificialIntelligenceAccess[i].type == "Hoffalgre")
                        {
                            if (ArtificialIntelligenceAccess[i].sex == "Female")
                            {
                                if (this.DTU(ArtificialIntelligenceAccess[i]) < closestMother)
                                {
                                    mother = ArtificialIntelligenceAccess[i];
                                }
                            }
                        }
                    }
                }

                //hunger and tittling
                var hungering = true;
                if (mother != "none")
                {
                    if (this.DTU(mother) > (this.engagementRadius + this.sizeRadius + mother.sizeRadius) || this.hunger > 9.75 || mother.hunger < 10)
                    {
                        this.suckling = false;
                    }
                    else
                    {
                        hungering = false;
                        this.suckling = true;
                    }
                }

                if (hungering)
                {
                    this.hunger -= 0.0002 * (TTD / 16.75);
                    if (this.hunger < 0)
                    {
                        this.killNotByPlayer = true; //if starving nothing is gained from its death.
                        this.health -= 0.0005 * (TTD / 16.75);
                    }
                }

                //male sex drive
                if (this.sex == "Male")
                {
                    this.horniness += 0.001 * (TTD / 16.75);
                }

                //eat from plants (non-fungi)
                var plantsToTarget = this.nearbyPlants(1, "fungi", false, true);
                var plantTarget = "none";
                if (plantsToTarget.length >= 1)
                {
                    plantTarget = plantsToTarget[0];
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() < this.rangeOfSight / 10)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                        this.suckling = false;
                    }
                    else if (this.alpha == "baby")
                    {
                        if (mother != "none")
                        {
                            if (this.DTU(mother) > this.engagementRadius + this.sizeRadius + mother.sizeRadius)
                            {
                                this.pointTowards(mother);
                                this.moveInRelationToThing(mother);
                            }
                            else
                            {
                                this.pointTowards(mother);
                                this.moving = false;
                            }
                        }
                        else
                        {
                            this.suckling = false;
                        }
                    }
                    else if (this.horniness > 10 && this.sex == "Male")
                    {
                        var mateDist = 1000000;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].type == "Hoffalgre")
                            {
                                if (ArtificialIntelligenceAccess[i].sex == "Female" && ArtificialIntelligenceAccess[i].horniness == 0)
                                {
                                    if (this.DTU(ArtificialIntelligenceAccess[i]) < mateDist)
                                    {
                                        mate = ArtificialIntelligenceAccess[i];
                                    }
                                }
                            }
                        }
                        this.pointTowards(mate);
                        this.moveInRelationToThing(mate);
                        if (this.DTU(mate) <= this.engagementRadius)
                        {
                            this.sexing = true;
                        }
                    }
                    else if (this.hunger <= this.hungerMAX - 5)
                    {
                        if (plantTarget != "none")
                        {
                            this.pointTowards(plantTarget);
                            this.moveInRelationToThing(plantTarget);
                            if (this.DTU(plantTarget) <= this.engagementRadius && plantTarget.phase != "picked")
                            {
                                this.attacking = true;
                            }
                            else
                            {
                                this.attacking = false;
                            }
                        }
                    }
                    else
                    {
                        this.moving = false;
                    }
                }
                else if (this.target != "none")
                {
                    if (this.DTU(this.target) < this.rangeOfSight / 10)
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                        this.suckling = false;
                    }
                    else if (this.alpha == "baby")
                    {
                        if (mother != "none")
                        {
                            if (this.DTU(mother) > this.engagementRadius + this.sizeRadius + mother.sizeRadius)
                            {
                                this.pointTowards(mother);
                                this.moveInRelationToThing(mother);
                            }
                            else
                            {
                                this.moving = false;
                                this.pointTowards(mother);
                            }
                        }
                        else
                        {
                            this.suckling = false;
                        }
                    }
                    else if (this.horniness > 10 && this.sex == "Male")
                    {
                        var mateDist = 1000000;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].type == "Hoffalgre")
                            {
                                if (ArtificialIntelligenceAccess[i].sex == "Female" && ArtificialIntelligenceAccess[i].horniness == 0)
                                {
                                    if (this.DTU(ArtificialIntelligenceAccess[i]) < mateDist)
                                    {
                                        mate = ArtificialIntelligenceAccess[i];
                                    }
                                }
                            }
                        }
                        this.pointTowards(mate);
                        this.moveInRelationToThing(mate);
                        if (this.DTU(mate) <= this.engagementRadius * 1.5)
                        {
                            this.sexing = true;
                        }
                    }
                    else if (this.hunger <= this.hungerMAX - 5)
                    {
                        if (plantTarget != "none")
                        {
                            this.pointTowards(plantTarget);
                            this.moveInRelationToThing(plantTarget);
                            if (this.DTU(plantTarget) <= this.engagementRadius && plantTarget.phase != "picked")
                            {
                                this.attacking = true;
                            }
                            else
                            {
                                this.attacking = false;
                            }
                        }
                    }
                    else
                    {
                        this.moving = false;
                    }
                }
            }

            //ANIMATIONS
            var szx = 1.6;
            if (this.alive == true)
            {
                if (this.attacking || this.sexing || this.suckling)
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(7, 0.20, true);
                    }
                }
                else if (this.moving && !this.attacking)
                {
                    this.costumeEngine(4, 0.15, false);
                }
                else
                {
                    this.costume = 0;
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    this.other = true;
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 49, 9, 56, 19, -1/2 * 56 * this.alphaSize * szx - this.xAdjustment, -1/2 * 19 * this.alphaSize * szx - this.yAdjustment, 56 * this.alphaSize * szx, 19 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 532, 9, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.drawUnit(nognog, 49, 9, 56, 19, -1/2 * 56 * this.alphaSize * szx - this.xAdjustment, -1/2 * 19 * this.alphaSize * szx - this.yAdjustment, 56 * this.alphaSize * szx, 19 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 91, 9, 56, 19, -1/2 * 56 * this.alphaSize * szx - this.xAdjustment, -1/2 * 19 * this.alphaSize * szx - this.yAdjustment, 56 * this.alphaSize * szx, 19 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 582, 9, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 138, 10, 56, 19, -1/2 * 56 * this.alphaSize * szx - this.xAdjustment, -1/2 * 19 * this.alphaSize * szx - this.yAdjustment, 56 * this.alphaSize * szx, 19 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 421, 10, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 191, 10, 51, 19, -1/2 * 51 * this.alphaSize * szx - this.xAdjustment, -1/2 * 19 * this.alphaSize * szx - this.yAdjustment, 51 * this.alphaSize * szx, 19 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 469, 10, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 241, 10, 55, 19, -1/2 * 55 * this.alphaSize * szx - this.xAdjustment, -1/2 * 19 * this.alphaSize * szx - this.yAdjustment, 55 * this.alphaSize * szx, 19 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 532, 9, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 302, 10, 62, 21, -1/2 * 62 * this.alphaSize * szx - this.xAdjustment, -1/2 * 21 * this.alphaSize * szx - this.yAdjustment, 62 * this.alphaSize * szx, 21 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 582, 9, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                }
                else if (theCostume >= 6)
                {
                    if (this.attacking || this.sexing || this.suckling)
                    {
                        this.drawUnit(nognog, 362, 9, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }
                    else if (this.moving)
                    {
                        this.drawUnit(nognog, 421, 10, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
                    }

                    if (this.sexing)
                    {
                        this.sexing = false;
                        mate.horniness = 100;
                        this.horniness = 0;
                    }

                    if (this.suckling && this.hunger <= 9.75 && this.alpha == "baby")
                    {
                        if (this.other)
                        {
                            this.other = false;
                            mother.hunger -= 0.25;
                            this.hunger += 0.25;
                            this.sustenance += 0.25;
                            this.suckling = false;
                        }
                    }

                    if (this.attacking)
                    {
                        if (this.other)
                        {
                            this.attacking = false;
                            this.other = false;
                            plantTarget.phase = "picked";
                            this.hunger = Math.min(this.hungerMAX, this.hunger + 5);
                            this.sustenance += 5;
                        }
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 798, 7, 58, 23, -1/2 * 58 * this.alphaSize * szx - this.xAdjustment, -1/2 * 23 * this.alphaSize * szx - this.yAdjustment, 58 * this.alphaSize * szx, 23 * this.alphaSize * szx);
            }
        }

        //ARDIL
        if (this.type == "Ardil")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawArdilFlesh", this.X, this.Y), 2], [new Item("ardilPelt", this.X, this.Y), 1]];
            }
            else if (this.alpha == "baby")
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1));
            }
            else
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawArdilFlesh", this.X, this.Y), 1], [new Item("ardilPelt", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(800, false);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(700, false);
            }
            else
            {
                this.rangeOfSightCalculator(800, false);
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                //Growth by food (leveling/evolution)
                if (this.alpha == "baby")
                {
                    if (this.mofuFood >= 10)
                    {
                        this.mofuFood = 0;
                        this.alpha = false;

                        //new stats below:
                        //----------------

                        this.healthMAX = 1;
                        this.health = this.healthMAX;
                        this.engagementRadius = 12;
                        this.sizeRadius = 11;
                        this.attackWait = 2;
                        this.alphaSize = 1;
                        this.speed = 3.4
                    }
                }
                else if (this.alpha == false)
                {
                    if (this.mofuFood >= 22)
                    {
                        this.mofuFood = 0;
                        this.alpha = true;

                        //new stats below:
                        //----------------

                        if (Math.round(Math.random()))
                        {
                            this.healthMAX = 4;
                            this.health = this.healthMAX;
                            this.engagementRadius = 24;
                            this.sizeRadius = 16;
                            this.attackWait = 3;
                            this.alphaSize = 1.65;
                            this.speed = 3;
                            this.sex = "Female";
                        }
                        else
                        {
                            this.healthMAX = 3;
                            this.health = this.healthMAX;
                            this.engagementRadius = 24;
                            this.sizeRadius = 14;
                            this.attackWait = 2;
                            this.alphaSize = 1.45;
                            this.speed = 4;
                            this.sex = "Male";
                        }
                    }
                }

                if (this.sex == "Female")
                {
                    //egg laying
                    this.eggTimer += 1 * (TTD / 16.75);
                    if (this.eggTimer >= 20000)
                    {
                        this.eggTimer = 0;
                        var babyAmt = Math.floor(Math.random() * 3) + 1;
                        for (var i = 0; i < babyAmt; i++)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Ardil", "baby", "Unit Generated Ardil"));
                        }
                        this.mofuFood = Math.max(0, this.mofuFood - 22)
                    }
                }

                //Ardil BRAIN
                //Process
                if (this.team != "player")
                {
                    if (this.DTP() <= 1/2 * this.rangeOfSight && wKey == true && player.getSurvivalism() < 40 || this.DTU(this.target) <= 1/2 * this.rangeOfSight && this.target != player && this.target.type != "Ardil")
                    {
                        this.disturbedTime = new Date().getTime();
                    }
                }
                else
                {
                    if (this.DTP() <= this.rangeOfSight || this.DTU(this.target) <= 1/2 * this.rangeOfSight && this.target != player && this.target.type != "Ardil")
                    {
                        this.disturbedTime = new Date().getTime();
                    }
                }

                if (this.disturbed == false) //if not frightened...
                {
                    this.mofuTargetFood = "none";
                    this.moving = false;
                    this.attacking = false;

                    for (var i = 0; i < worldItems.length; i++) //look for food... (grains and breads)
                    {
                        if (worldItems[i][0].dmx == this.dmx)
                        {
                            if (worldItems[i][0].type == "santhGrain" || worldItems[i][0].type == "harstGrain" || worldItems[i][0].type == "santhBread" || worldItems[i][0].type == "butteredSanthBread" || worldItems[i][0].type == "harstBread" || worldItems[i][0].type == "butteredHarstBread" || worldItems[i][0].type == "akerBerries" || worldItems[i][0].type == "pluttBerries" || worldItems[i][0].type == "bushkaBerries" || worldItems[i][0].type == "gojiiBerries" || worldItems[i][0].type == "luufBerries" || worldItems[i][0].type == "suuliMelonSlice" || worldItems[i][0].type == "darbBerries" || worldItems[i][0].type == "callopBerries" || worldItems[i][0].type == "torniBerries" || worldItems[i][0].type == "yaihefBerries")
                            {
                                if (this.distanceFinder(this, worldItems[i][0]) <= (this.rangeOfSight / 2)) // if grains are easy to get to go after them.
                                {
                                    if (this.mofuTargetFood == "none")
                                    {
                                        this.mofuTargetFood = worldItems[i][0];
                                    }
                                    else
                                    {
                                        if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.mofuTargetFood != "none")
                    {
                        if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            this.attacking = false;
                            this.pointTowards(this.mofuTargetFood);
                            this.moveInRelationToThing(this.mofuTargetFood);
                        }
                    }
                }
                else
                {
                    this.attacking = false;

                    if (this.target == player)
                    {
                        if (this.ID == "Irene's Pet Ardil")
                        {
                            if (wKey == true && shiftKey == false || wKey == false)
                            {
                                this.pointTowardsPlayer();
                            }
                            else
                            {
                                this.pointAwayFromPlayer();
                                this.moveInRelationToPlayer();
                            }
                        }
                        else
                        {
                            this.pointAwayFromPlayer();
                            this.moveInRelationToPlayer();
                        }
                    }
                    else if (this.target != "none")
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //walking (towards food)
                {
                    this.costumeEngine(2, 0.05, false);
                }
                else if (this.attacking) //eating food (off the ground)
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(3, 0.05, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    this.drawUnit(theCrack, 864, 700, 41, 22, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 22 * this.alphaSize);
                }
                else if (theCostume == 1)
                {
                    this.drawUnit(theCrack, 928, 700, 41, 22, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 22 * this.alphaSize);
                    if (this.attacking)
                    {
                        this.mofuFeastPrepped = true
                    }
                }
                else if (theCostume >= 2)
                {
                    if (this.attacking)
                    {
                        if (this.mofuFeastPrepped == true)
                        {
                            for (var i = 0; i < worldItems.length; i++)
                            {
                                if (worldItems[i][0] === this.mofuTargetFood)
                                {
                                    this.mofuFood += 1;
                                    if (worldItems[i][0].ability == "poisonI" || worldItems[i][0].ability == "poisonII" || worldItems[i][0].ability == "poisonIII" || worldItems[i][0].ability == "poisonIV" || worldItems[i][0].ability == "poisonV")
                                    {
                                        this.health = 0;
                                    }
                                    if (worldItems[i][1] > 1)
                                    {
                                        worldItems[i][1] -= 1;
                                        break;
                                    }
                                    else
                                    {
                                        this.mofuTargetFood = "none";
                                        worldItems.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                            this.mofuFeastPrepped = false;
                        }
                        this.drawUnit(theCrack, 864, 700, 41, 22, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 22 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(theCrack, 864, 700, 41, 22, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 22 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(theCrack, 928, 700, 41, 22, -1/2 * 41 * this.alphaSize - this.xAdjustment, -1/2 * 22 * this.alphaSize - this.yAdjustment, 41 * this.alphaSize, 22 * this.alphaSize);
            }

        }
        //LIZARD
        if (this.type == "Lizard")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("lizardTail", this.X, this.Y), 1]];
            }
            else
            {
                this.experience = (0.5 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("lizardTail", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(250, false);
            }
            else
            {
                this.rangeOfSightCalculator(225, false);
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointAwayFromPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointAway(this.target);
                    this.moveInRelationToThing(this.target);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //walking (towards food)
                {
                    this.costumeEngine(3, 0.12, false);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    this.drawUnit(polypol, 1452, 24, 21, 14, -1/2 * 21 * this.alphaSize - this.xAdjustment, -1/2 * 14 * this.alphaSize - this.yAdjustment, 21 * this.alphaSize, 14 * this.alphaSize);
                }
                else if (theCostume == 1)
                {
                    this.drawUnit(polypol, 1475, 25, 21, 14, -1/2 * 21 * this.alphaSize - this.xAdjustment, -1/2 * 14 * this.alphaSize - this.yAdjustment, 21 * this.alphaSize, 14 * this.alphaSize);
                }
                else if (theCostume >= 2)
                {
                    this.drawUnit(polypol, 1499, 26, 21, 14, -1/2 * 21 * this.alphaSize - this.xAdjustment, -1/2 * 14 * this.alphaSize - this.yAdjustment, 21 * this.alphaSize, 14 * this.alphaSize);
                }
            }
            else
            {
                this.drawUnit(polypol, 1521, 26, 21, 14, -1/2 * 21 * this.alphaSize - this.xAdjustment, -1/2 * 14 * this.alphaSize - this.yAdjustment, 21 * this.alphaSize, 14 * this.alphaSize);
            }

        }
        //CONEJO
        if (this.type == "Conejo")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rabbitFoot", this.X, this.Y), Math.floor(Math.random() * 2) + 1], [new Item("rawRabbitFlesh", this.X, this.Y), 2], [new Item("rabbitPelt", this.X, this.Y), 1]];
            }
            else
            {
                this.experience = (0.5 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rabbitFoot", this.X, this.Y), Math.floor(Math.random() * 2) + 1], [new Item("rawRabbitFlesh", this.X, this.Y), 1], [new Item("rabbitPelt", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(240, false);
            }
            else
            {
                this.rangeOfSightCalculator(190, false);
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    if (this.DTP() <= this.rangeOfSight && this.disturbed)
                    {
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                        this.wandering = false; //when the rabbit encounters a threat it forgets its previous movement objective.
                        this.wanderHold = false;
                    }
                    else
                    {
                        this.wander(unitX, unitY, 600, 1/2 * this.baseSight, true);
                        if (this.wanderHold)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            this.attacking = false;
                        }
                    }
                }
                else if (this.target != "none")
                {

                    if (this.DTU(this.target) <= this.rangeOfSight)
                    {
                        this.pointAway(this.target);
                        this.moveInRelationToThing(this.target);
                        this.wandering = false; //when the rabbit encounters a threat it forgets its previous movement objective.
                        this.wanderHold = false;
                    }
                    else
                    {
                        this.wander(unitX, unitY, 600, 1/2 * this.baseSight, true);
                        if (this.wanderHold)
                        {
                            this.attacking = true;
                        }
                        else
                        {
                            this.attacking = false;
                        }
                    }
                }
            }

            //ANIMATIONS
            var szx = 1.5;
            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //hopping
                {
                    this.costumeEngine(8, 0.12, false);
                }
                else if (this.attacking) //looking around then nibbling at something on the ground
                {
                    this.costumeEngine(12, 0.20, false);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = true;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 626, 194, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = true;
                        this.drawUnit(nognog, 776, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = false;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 660, 194, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = false;
                        this.drawUnit(nognog, 820, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = false;
                        this.drawUnit(nognog, 820, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 699, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = false;
                        this.drawUnit(nognog, 820, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 739, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = false;
                        this.drawUnit(nognog, 820, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 739, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else
                    {
                        this.rotatable = false;
                        this.drawUnit(nognog, 820, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 8)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 739, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else //movement cut off (backup only)
                    {
                        this.rotatable = true;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 9)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 739, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else //movement cut off (backup only)
                    {
                        this.rotatable = true;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume <= 10)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(nognog, 699, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else //movement cut off (backup only)
                    {
                        this.rotatable = true;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
                else if (theCostume >= 11)
                {
                    if (this.attacking)
                    {
                        this.wanderHold = false;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                    else //movement cut off (backup only)
                    {
                        this.rotatable = true;
                        this.drawUnit(nognog, 593, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
                    }
                }
            }
            else
            {
                this.drawUnit(nognog, 863, 193, 19, 13, -1/2 * 19 * this.alphaSize * szx - this.xAdjustment, -1/2 * 13 * this.alphaSize * szx - this.yAdjustment, 19 * this.alphaSize * szx, 13 * this.alphaSize * szx);
            }

        }
        //TUNSK
        if (this.type == "Tunsk")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawTunskFlesh", this.X, this.Y), 1]];
            }
            else
            {
                this.experience = (1 * ((player.getIntelligence() / 50) + 1));
                this.drops = [[new Item("rawTunskFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(375, false);
            }
            else
            {
                this.rangeOfSightCalculator(325, false);
            }

            //AI
            if (this.alive == true)
            {
                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    //this.pointAwayFromPlayer();
                    //this.moveInRelationToPlayer();
                    if (this.moving)
                    {
                        this.newRotation -= (Math.random() / 5) * this.tunskTurn;

                        if (Math.round(Math.random()))
                        {
                            this.pointAwayFromPlayer();
                        }
                    }
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    //this.pointAway(this.target);
                    //this.moveInRelationToThing(this.target);
                    if (this.moving)
                    {
                        this.newRotation -= (Math.random() / 5) * this.tunskTurn;

                        if (Math.round(Math.random()))
                        {
                            this.pointAway(this.target);
                        }
                    }
                    this.moveInRelationToThing(this.target);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //walking (towards food)
                {
                    this.costumeEngine(4, 0.135, false);
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                //manual damaging
                if (theCostume <= 0)
                {
                    this.drawUnit(mufmuf, 16, 3, 19, 15, -1/2 * 19 * this.alphaSize - this.xAdjustment, -1/2 * 15 * this.alphaSize - this.yAdjustment, 19 * this.alphaSize, 15 * this.alphaSize);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(mufmuf, 45, 3, 19, 15, -1/2 * 19 * this.alphaSize - this.xAdjustment, -1/2 * 15 * this.alphaSize - this.yAdjustment, 19 * this.alphaSize, 15 * this.alphaSize);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(mufmuf, 16, 3, 19, 15, -1/2 * 19 * this.alphaSize - this.xAdjustment, -1/2 * 15 * this.alphaSize - this.yAdjustment, 19 * this.alphaSize, 15 * this.alphaSize);
                }
                else if (theCostume >= 3)
                {
                    this.drawUnit(mufmuf, 75, 3, 19, 15, -1/2 * 19 * this.alphaSize - this.xAdjustment, -1/2 * 15 * this.alphaSize - this.yAdjustment, 19 * this.alphaSize, 15 * this.alphaSize);
                }
            }
            else
            {
                this.drawUnit(mufmuf, 104, 4, 19, 15, -1/2 * 19 * this.alphaSize - this.xAdjustment, -1/2 * 15 * this.alphaSize - this.yAdjustment, 19 * this.alphaSize, 15 * this.alphaSize);
            }

        }
        //BOG TROLL
        if (this.type == "BogTroll")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 90 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 1580 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (1580 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("hugeBogTrollSkull", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 12]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 12 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 116 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (116 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("babyBogTrollSkull", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 940 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (940 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("bogTrollSkull", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 7]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(1000, true);
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(600, false);
            }
            else
            {
                this.rangeOfSightCalculator(850, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.health <= this.healthMAX / 2)
                {
                    this.combatMode = 1;
                }
                else
                {
                    this.combatMode = 0;
                }
                if (this.alpha == true)
                {
                    //troll health regeneration
                    if (this.health < this.healthMAX)
                    {
                        this.health += 0.14;
                    }
                    else
                    {
                        this.health = this.healthMAX;
                    }

                    if (this.combatMode == 1)
                    {
                        this.damageFrame = "manual";
                        this.Attack(60, 40);
                        this.speed = 6.2;
                        this.rotationSpeed = 0.025; // was 0.05
                        this.engagementRadius = 141;
                        this.sizeRadius = 75;
                        this.negateArmour = 10;
                        this.attackWait = 3.7;
                    }
                    else
                    {
                        this.damageFrame = "automatic";
                        this.Attack(55, 35);
                        this.speed = this.keepSpeed;
                        this.rotationSpeed = 0.035; // was 0.05
                        this.engagementRadius = 97;
                        this.sizeRadius = 75;
                        this.negateArmour = 16;
                        this.attackWait = 4.5;
                    }
                }
                else if (this.alpha == "baby")
                {
                    this.callForNearbyHelpFromType(750, "Troll");

                    //troll health regeneration
                    if (this.health < this.healthMAX)
                    {
                        this.health += 0.025; //was 0.0185
                    }
                    else
                    {
                        this.health = this.healthMAX;
                    }

                    if (this.combatMode == 1)
                    {
                        this.damageFrame = "manual";
                        this.Attack(10, 4);
                        this.speed = 4.1;
                        this.rotationSpeed = 0.025; // was 0.05
                        this.engagementRadius = 47;
                        this.sizeRadius = 30;
                        this.negateArmour = 1;
                        this.attackWait = 2.7;
                    }
                    else
                    {
                        this.Attack(9, 3);
                        this.speed = this.keepSpeed;
                        this.rotationSpeed = 0.035; // was 0.05
                        this.engagementRadius = 42;
                        this.sizeRadius = 30;
                        this.negateArmour = 3;
                        this.attackWait = 3.5;
                        this.damageFrame = "automatic";

                    }
                }
                else
                {
                    //troll health regeneration
                    if (this.health < this.healthMAX)
                    {
                        this.health += 0.09;
                    }
                    else
                    {
                        this.health = this.healthMAX;
                    }

                    if (this.combatMode == 1)
                    {
                        this.damageFrame = "manual";
                        this.Attack(38, 23);
                        this.speed = 5.4;
                        this.rotationSpeed = 0.025; // was 0.05
                        this.engagementRadius = 92;
                        this.sizeRadius = 47;
                        this.negateArmour = 5;
                        this.attackWait = 3.7;
                    }
                    else
                    {
                        this.Attack(35, 20);
                        this.speed = this.keepSpeed;
                        this.rotationSpeed = 0.035; // was 0.05
                        this.engagementRadius = 72;
                        this.sizeRadius = 47;
                        this.negateArmour = 10;
                        this.attackWait = 4.5;
                        this.damageFrame = "automatic";
                    }
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {

                    this.costumeEngine(4, 0.065, false);

                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        if (this.combatMode == 0)
                        {
                            this.costumeEngine(5, 0.2, true);
                        }
                        else if (this.combatMode == 1)
                        {
                            this.costumeEngine(4, 0.2, false);
                        }
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (this.combatMode == 0)
                {
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3331, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3225, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3872, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);

                        }
                    }
                    else if (theCostume == 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3331, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3441, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3665, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 4)
                    {

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3558, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                }
                else if (this.combatMode == 1)
                {
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }

                    }
                    else if (theCostume == 1)
                    {

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3735, 138, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                            {
                                this.finalAttackCostume = true; //deal the damage!
                                this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                            }
                        }
                        else
                        {
                            this.drawUnit(verse, 3872, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);

                        }
                    }
                    else if (theCostume == 2)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3873, 138, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3735, 138, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3665, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 4)
                    {
                        this.drawUnit(verse, 11, 598, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(verse, 3586, 134, 115, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
            }
        }
        //WINTER WOLF
        if (this.type == "WinterWolf")
        {
            var rndm = Math.round(Math.random());
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 25 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 100 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (100 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (rndm)
                {
                    this.drops = [[new Item("massiveWinterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 3], [new Item("rawWolfLiver", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("massiveWinterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 3]];
                }
            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 49 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (49 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (rndm)
                {
                    this.drops = [[new Item("winterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 1], [new Item("rawWolfLiver", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("winterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(775, "very");
            }
            else
            {
                this.rangeOfSightCalculator(665, "very");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(19, 6);
                    this.callForNearbyHelpFromType(350, "WinterWolf");
                }
                else
                {
                    this.Attack(6, 4);
                    this.callForNearbyHelpFromType(640, "WinterWolf");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                    }
                    if (wKey)
                    {
                        this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)})
                    }
                    else
                    {
                        this.moving = false;
                        this.costume = 0;
                    }
                }
                else
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (player.getSurvivalism() >= 24)
                {
                    this.mount(17);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.100, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.1, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2853, 17, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 2853, 17, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                    {
                        this.finalAttackCostume = true; //deal the damage!
                        this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                    }

                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2911, 18, 49, 29, -89 - this.xAdjustment, -48 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 2730, 16, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.drawUnit(verse, 2968, 18, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(verse, 2791, 17, 49, 29, -89 - this.xAdjustment, -52 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 3027, 18, 49, 29, -89 - this.xAdjustment, -55 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(verse, 3083, 21, 49, 29, -89 - this.xAdjustment, -51 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(verse, 3139, 24, 49, 29, -93 - this.xAdjustment, -44 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
            }

        }
        //GREY WOLF
        if (this.type == "GreyWolf")
        {
            var rndm = Math.round(Math.random());
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 90 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (90 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (rndm)
                {
                    this.drops = [[new Item("massiveGreyWolfPelt", this.X, this.Y), 1], [new Item("rawGreyWolfFlesh", this.X, this.Y), 3], [new Item("rawWolfLiver", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("massiveGreyWolfPelt", this.X, this.Y), 1], [new Item("rawGreyWolfFlesh", this.X, this.Y), 3]];
                }
            }
            else
            {
                if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 38 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (38 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (rndm)
                {
                    this.drops = [[new Item("greyWolfPelt", this.X, this.Y), 1], [new Item("rawGreyWolfFlesh", this.X, this.Y), 1], [new Item("rawWolfLiver", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("greyWolfPelt", this.X, this.Y), 1], [new Item("rawGreyWolfFlesh", this.X, this.Y), 1]];
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, "very");
            }
            else
            {
                this.rangeOfSightCalculator(600, "very");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(17, 5);
                    this.callForNearbyHelpFromType(300, "GreyWolf");
                }
                else
                {
                    this.Attack(5, 3);
                    this.callForNearbyHelpFromType(550, "GreyWolf");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.mounted)
                {
                    if (shiftKey)
                    {
                        this.newRotation = Math.atan2((Y - mouseY + 1/2 * CCC.height) - this.Y, (X - mouseX + 1/2 * CCC.width) - this.X) + Math.PI;
                    }
                    if (wKey)
                    {
                        this.moveInRelationToThing({X: this.X + Math.cos(this.rotation) * (this.rangeOfSight - 1), Y: this.Y + Math.sin(this.rotation) * (this.rangeOfSight - 1)})
                    }
                    else
                    {
                        this.moving = false;
                        this.costume = 0;
                    }
                }
                else
                {
                    if (this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                }

                if (player.getSurvivalism() >= 22)
                {
                    this.mount(17);
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 0.100, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.1, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 2853, 17, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 2853, 17, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                    {
                        this.finalAttackCostume = true; //deal the damage!
                        this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                    }

                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 2911, 18, 49, 29, -89 - this.xAdjustment, -48 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 2730, 16, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 2968, 18, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 2791, 17, 49, 29, -89 - this.xAdjustment, -52 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 3027, 18, 49, 29, -89 - this.xAdjustment, -55 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 3083, 21, 49, 29, -89 - this.xAdjustment, -51 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 3139, 24, 49, 29, -93 - this.xAdjustment, -44 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
            }

        }
        //GULFREY
        if (this.type == "Gulfrey")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 21 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (21 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("gulfreyShell", this.X, this.Y), 3], [new Item("rawGulfreyFlesh", this.X, this.Y), 3], [new Item("gulfreyMandibles", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 8 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (8 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("rawGulfreyFlesh", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(490, true);
            }
            else
            {
                this.rangeOfSightCalculator(440, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(6, 4);
                    this.callForNearbyHelpFromType(300, "Gulfrey");
                }
                else
                {
                    this.Attack(2, 2);
                    this.callForNearbyHelpFromType(440, "Gulfrey");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.125, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(4, 0.09, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 103, 172, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 242, 10, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 103, 92, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 103, 172, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 103, 172, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 241, 94, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                }
                else if (theCostume >= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 100, 12, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 241, 173, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 163, 225, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
            }

        }
        //Ghoul Fly
        if (this.type == "GhoulFly")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 11 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 50 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (50 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("ghoulFlyWings", this.X, this.Y), 1], [new Item("rawGhoulFlyStomach", this.X, this.Y), 1]];
            }
            else if (this.alpha == "massive")
            {
                if (Math.max(0, 35 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 290 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (290 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("ghoulFlyWings", this.X, this.Y), 1], [new Item("rawGhoulFlyStomach", this.X, this.Y), 1]];
            }
            else
            {
                if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 16 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (16 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("ghoulFlyWings", this.X, this.Y), 1], [new Item("rawGhoulFlyStomach", this.X, this.Y), 1]];
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(700, true);
            }
            else if (this.alpha == "massive")
            {
                this.rangeOfSightCalculator(900, true);
            }
            else
            {
                this.rangeOfSightCalculator(650, true);
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(4, 7);
                    this.callForNearbyHelpFromType(350, "GhoulFly");
                }
                else if (this.alpha == "massive")
                {
                    this.Attack(16, 19);
                    this.callForNearbyHelpFromType(400, "GhoulFly");
                }
                else
                {
                    this.Attack(3, 4);
                    this.callForNearbyHelpFromType(300, "GhoulFly");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();


                var kk = false;
                for (var k = 0; k < ArtificialIntelligenceAccess.length; k++)
                {
                    if (this.DTU(ArtificialIntelligenceAccess[k]) <= this.sizeRadius && ArtificialIntelligenceAccess[k].type == "GhoulFly" && ArtificialIntelligenceAccess[k] !== this)
                    {
                        kk = true;
                        if (this.target == player)
                        {
                            this.X += Math.cos(Math.atan2(Y - this.Y, X - this.X) * this.redirectAng) * this.speed * this.stunned * timeSpeed / this.timeResistance;
                            this.Y += Math.sin(Math.atan2(Y - this.Y, X - this.X) * this.redirectAng) * this.speed * this.stunned * timeSpeed / this.timeResistance;
                        }
                        else if (this.target != "none")
                        {
                            this.X += Math.cos(Math.atan2(this.target.Y - this.Y, this.target.X - this.X) * this.redirectAng) * this.speed * this.stunned * timeSpeed / this.timeResistance;
                            this.Y += Math.sin(Math.atan2(this.target.Y - this.Y, this.target.X - this.X) * this.redirectAng) * this.speed * this.stunned * timeSpeed / this.timeResistance;
                        }
                        if (this.redirectAng < 0 && ArtificialIntelligenceAccess[k].redirectAng < 0 || this.redirectAng >= 0 && ArtificialIntelligenceAccess[k].redirectAng >= 0)
                        {
                            if (this.redirKK == false)
                            {
                                this.redirKK = true;
                                this.redirectAng = -1 * this.redirectAng;
                            }
                        }
                    }
                }
                if (kk == false)
                {
                    this.redirectAng = -1/2 * Math.PI + (Math.random() * Math.PI);
                    this.redirKK = false;
                }

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.flying = true;
                    this.costumeEngine(4, 0.5, true);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    this.flying = false;
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.20, false);
                    }
                }
                else
                {
                    this.flying = false;
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(dmil, 14, 15, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(dmil, 14, 15, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                }
                else if (theCostume <= 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(dmil, 461, 15, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(dmil, 117, 15, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                }
                else if (theCostume <= 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(dmil, 605, 15, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(dmil, 214, 14, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                }
                else if (theCostume <= 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(dmil, 14, 15, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(dmil, 328, 14, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                }
                else if (theCostume <= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(dmil, 13, 140, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(dmil, 328, 14, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(dmil, 139, 141, 109, 100, -1/2 * 109 - this.xAdjustment, -1/2 * 100 - this.yAdjustment, 109 * this.alphaSize, 100 * this.alphaSize);
            }
        }
        //TORPER
        if (this.type == "Torper")
        {
            //Set Drops and experience
            var rndmzr = Math.floor(Math.random() * 3);
            if (this.alpha == true)
            {
                if (Math.max(0, 14 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 75 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (75 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 42)
                {
                    this.drops = [[new Item("torperFuzz", this.X, this.Y), 1], [new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 2]];
                }
                else
                {
                    if (rndmzr == 2)
                    {
                        this.drops = [[new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 2]];
                    }
                    else
                    {
                        this.drops = [[new Item("rawTorperFlesh", this.X, this.Y), 2]];
                    }
                }

            }
            else
            {
                if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (45 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                if (player.getIntelligence() >= 48)
                {
                    this.drops = [[new Item("torperFuzz", this.X, this.Y), 1], [new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 1]];
                }
                else
                {
                    if (rndmzr == 2)
                    {
                        this.drops = [[new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("rawTorperFlesh", this.X, this.Y), 1]];
                    }
                }
            }

            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(675, "unrelenting");
            }
            else
            {
                this.rangeOfSightCalculator(575, "unrelenting");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(10, 4);
                    this.callForNearbyHelpFromType(675, "Torper");
                }
                else
                {
                    this.Attack(7, 3);
                    this.callForNearbyHelpFromType(575, "Torper");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(3, 1/3, true);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(5, 0.150, true);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1592, 40, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1304, 38, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1671, 42, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1409, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1740, 40, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(oldverse, 1504, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1808, 40, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                }
                else if (theCostume >= 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(oldverse, 1877, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(oldverse, 1967, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
            }
        }
        //NARTHWARP
        if (this.type == "Narthwarp")
        {
            //Set Drops and experience
            if (this.alpha == true)
            {
                if (Math.max(0, 21 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 95 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (95 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("lrgNarthwarpMouth", this.X, this.Y), 1]];
            }
            else if (this.alpha == "baby")
            {
                if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 4 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (4 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [];
            }
            else
            {
                if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 36 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (36 * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                this.drops = [[new Item("narthwarpMouth", this.X, this.Y), 1]];
            }


            //RANGE OF SIGHT (anything related to range of sight)
            if (this.alpha == true)
            {
                this.rangeOfSightCalculator(550, "mildly");
            }
            else if (this.alpha == "baby")
            {
                this.rangeOfSightCalculator(300, "mildly");
            }
            else
            {
                this.rangeOfSightCalculator(425, "mildly");
            }

            //AI
            if (this.alive == true)
            {
                if (this.alpha == true)
                {
                    this.Attack(14, 7);
                    this.callForNearbyHelpFromType(550, "Narthwarp");
                }
                else if (this.alpha == "baby")
                {
                    this.Attack(1, 1);
                    this.callForNearbyHelpFromType(300, "Narthwarp");
                }
                else
                {
                    this.Attack(5, 4);
                    this.callForNearbyHelpFromType(425, "Narthwarp");
                }

                //this.deathChecker();
                this.disturbedTimer();
                this.visibleSight();
                this.friendDecider();
                this.targeting();

                if (this.target == player)
                {
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }
                else if (this.target != "none")
                {
                    this.pointTowards(this.target);
                    this.moveInRelationToThing(this.target);
                }

            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costumeEngine(4, 0.145, false);
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        this.costumeEngine(8, 0.4, false);
                    }
                }

                // the frames/stages/costumes of the animation.
                var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
                //manual damaging
                if (theCostume <= 0)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 29, 400, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                    else
                    {
                        if (this.moving == false)
                        {
                            this.drawUnit(polypol, 29, 400, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 115, 401, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                }
                else if (theCostume == 1)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 32, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 212, 404, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
                else if (theCostume == 2)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 122, 491, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 308, 403, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
                else if (theCostume == 3)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 32, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                    else
                    {
                        this.drawUnit(polypol, 409, 404, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
                else if (theCostume == 4)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 29, 400, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
                else if (theCostume == 5)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 217, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
                else if (theCostume == 6)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 318, 489, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
                else if (theCostume >= 7)
                {
                    if (this.attacking)
                    {
                        this.drawUnit(polypol, 217, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                    }
                }
            }
            else
            {
                this.drawUnit(polypol, 416, 489, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
            }
        }
        //PERSON
        if (this.type == "Person")
        {
            if (this.alive)
            {
                this.friendDecider();
                this.targeting();

                if (this.team == "player")
                {
                    this.follower = true;
                }
                else
                {
                    this.follower = false;
                }
            }
            //RANGE OF SIGHT (anything related to range of sight)

            this.rangeOfSightCalculator(600, "true");

            //other faction-like stuff
            if (this.ultra.faction == "Freynor")
            {
                if (player.title == "Royalty" && player.raceName == "Freynor")
                {

                }
            }
            else if (this.ultra.faction == "Nirwaden")
            {
                if (this.disdained != true && this.disturbed != true)
                {
                    if (this.playerSeen)
                    {
                        if (player.class != "Priest")
                        {
                            for (var mmggkk = 0; mmggkk < magicList.length; mmggkk++)
                            {
                                if (magicList[mmggkk].castedByPlayer)
                                {
                                    this.callForNearbyHelpFromType(1850, "Soldier");
                                    break;
                                }
                            }
                            if (!this.disturbed)
                            {
                                for (var mmggkk = 0; mmggkk < tertiarySpells.length; mmggkk++)
                                {
                                    if (tertiarySpells[mmggkk].equipped == true)
                                    {
                                        this.callForNearbyHelpFromType(1850, "Soldier");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            //Unique Characters and special type -- drops and experience
            if (this.ID == "Laandeg the Alchemist")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 12]];
            }
            if (this.ID == "Gamden the Alchemist")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 5]];
            }
            if (this.ID == "Bjorn")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 1]];
            }
            if (this.ID == "Svehn the Smith")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 95 + (quests.bobithNewWealth / 2)]];
            }
            else if (this.ID == "Medlia the Merchant")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 109 + (quests.medliaNewWealth / 2)]];
            }
            else if (this.ID == "Feniglio")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 10]];
            }
            else if (this.ID == "Customs Master Ilimo")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 134]];
            }
            else if (this.ID == "Harbourmaster Sebastian")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 250]];
            }
            else if (this.ID == "Micael the Banker")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 190]];
            }
            else if (this.ID == "Maai the Herbalist")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 69]];
            }
            else if (this.ID == "Siggi the Harborman")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 28]];
            }
            else if (this.ID == "Saana the Produce Vender")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 20]];
            }
            else if (this.ID == "Fuyumi the Banker")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 215]];
            }
            else if (this.ID == "Katja the Tailor")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 59]];
            }
            else if (this.ID == "Aari the Blacksmith")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 100]];
            }
            else if (this.ID == "[ " + quests.hilmundChildName + " ]") //this sets stats for the player child with Hilmund
            {
                if (this.aiTimer > 4)
                {
                    this.disturbedTime = new Date().getTime(); //this is so that your child is inclined to follow you
                    if (shiftKey && wKey || fKey || tKey) //runs when player runs or when directed to go somewhere
                    {
                        if (!this.stay)
                        {
                            this.speed = 1.2;
                        }
                    }
                    else //walks when player walks
                    {
                        if (!this.stay)
                        {
                            this.speed = 0.6;
                        }
                    }
                }
            }
            else if (this.ID == "[ " + quests.cherylChildName + " ]") //this sets stats for the player child with Hilmund
            {
                if (this.aiTimer > 4)
                {
                    if (this.team == "player")
                    {
                        this.disturbedTime = new Date().getTime(); //this is so that your child is inclined to follow you
                    }
                    if (shiftKey && wKey || fKey || tKey) //runs when player runs or when directed to go somewhere
                    {
                        if (!this.stay)
                        {
                            this.speed = 1.25;
                        }
                    }
                    else //walks when player walks
                    {
                        if (!this.stay)
                        {
                            this.speed = 0.55;
                        }
                    }
                }
            }
            else if (this.ID == "[ " + quests.rannukChildName + " ]") //this sets stats for the player child with Hilmund
            {
                if (this.aiTimer > 4)
                {
                    if (this.team == "player")
                    {
                        this.disturbedTime = new Date().getTime(); //this is so that your child is inclined to follow you
                    }
                    if (shiftKey && wKey || fKey || tKey) //runs when player runs or when directed to go somewhere
                    {
                        if (!this.stay)
                        {
                            this.speed = 1.15;
                        }
                    }
                    else //walks when player walks
                    {
                        if (!this.stay)
                        {
                            this.speed = 0.50;
                        }
                    }
                }
            }
            else if (this.ID == "Cheryl the Tailor")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 29]];
            }
            else if (this.ID == "Gerlach the Butcher")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 40]];
                this.customEXP = true;
                this.experience = 18 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Ederhal the Innkeeper")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 39]];
                this.customEXP = true;
                this.experience = 5 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Seeth the Innkeeper")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 16]];
                this.customEXP = true;
                this.experience = 8 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Brunelda the Merchant")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 65]];
            }
            else if (this.ID == "Bamey the Huntsman")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 33], [new Item("longbow", this.X, this.Y), 1], [new Item("steelArrow", this.X, this.Y), 9]];
                this.customEXP = true;
                this.experience = 75 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Garld the Crazy Beggar" || this.ID == "Garld, Sage of Gemith")
            {
                if (quests.garldCrazyScroll == "obtained")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 10]];
                }
                else if (quests.garldCrazyScroll == "obtained1")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 11]];
                }
                else if (quests.garldCrazyScroll == "obtained100")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 110]];
                }
                else
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 10], [new Item("summonFrich", this.X, this.Y), 1]];
                }
            }
            else if (this.ID == "Drohfor")
            {
                this.drops = [[new Item("longbow", this.X, this.Y), 1], [new Item("arrow", this.X, this.Y), 19]];
                this.customEXP = true;
                this.experience = 65 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Maggy the Tailor")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 115]];
            }
            else if (this.ID == "Hidalgo Lucelius")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 319]];
            }
            else if (this.ID == "Mechelo the Steward")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 215]];
            }
            else if (this.ID == "Libo the Servant Boy")
            {
                if (quests.aFeastForFewerQuest == true)
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 80]];
                }
                else
                {
                    this.drops = [];
                }

            }
            else if (this.ID == "Marta the Cook")
            {
                this.drops = [[new Item("rawSalmon", this.X, this.Y), 1]];
            }
            else if (this.ID == "Bishop Emmanuel")
            {
                this.drops = [[new Item("nirwadenPriestRobes", this.X, this.Y), 1]];
            }
            else if (this.ID == "High Lord Basilio Altezor")
            {
                this.drops = [[new Item("nirwadenNobleOutfit", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), 5500]];
            }
            else if (this.ID == "High Dame Emylia Altezor")
            {
                this.drops = [[new Item("nirwadenNobleDress", this.X, this.Y), 1]];
            }
            else if (this.ID == "Vela the Baker")
            {
                this.drops = [[new Item("nirwadenClothingF", this.X, this.Y), 1]];
            }
            else if (this.ID == "Lelaila")
            {
                this.drops = [[new Item("polyapaTart", this.X, this.Y), 1]];
            }
            else if (this.ID == "Cristobal the Innkeeper")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 83], [new Item("nirwadenClothingM", this.X, this.Y), 1]];
            }
            else if (this.ID == "Master Blacksmith Quixote")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 150], [new Item("hammer", this.X, this.Y), 1]];
            }
            else if (this.ID == "Francil the Stablemaster")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 95]];
            }
            else if (this.ID == "Tirbutin the Tax Officiator")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 233]];
            }
            else if (this.ID == "Guild Master Manolo")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 312]];
            }
            else if (this.ID == "Ergoku")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 200]];
            }
            else if (this.ID == "Ilihim")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 110]];
            }
            else if (this.ID == "Aarni the Stablemaster")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 96]];
            }
            else if (this.ID == "Odee the Banker")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 145]];
            }
            else if (this.ID == "Naoko the Banker")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 210]];
            }
            else if (this.ID == "Toggin")
            {
                if (quests.teshirNorthRoadQuest != "complete")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 20], [new Item("timberAxe", this.X, this.Y), 1]];
                    this.customEXP = true;
                    this.experience = 25 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 77]];
                    this.customEXP = true;
                    this.experience = 14 * ((player.getIntelligence() / 50) + 1);
                }
            }
            else if (this.ID == "Kedwin")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 2], [new Item("pintGlass", this.X, this.Y), 1]];
                this.customEXP = true;
                this.experience = 6 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Neculai the Merchant")
            {
                if (quests.bankruptNeculai != true || quests.medliaCompetitionControlCompletionStyle == "friendly" && quests.medliaCompetitionControlQuest == "complete")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 17 + (quests.neculaiNewWealth / 2)]];
                }
                else
                {
                    this.drops = [];
                }

                if (quests.theBalgurMercenariesQuest == true)
                {
                    this.drops.push([new Item("neculaisEar", this.X, this.Y), 1]);
                }



                if (this.health < this.healthMAX && quests.medliaCompetitionControlCompletionStyle != "friendly" && quests.medliaCompetitionControlQuest == true)
                {
                    quests.medliaCompetitionControlCompletionStyle = "violence";
                }
            }
            else if (this.ID == "Roselin the Tailor")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 13]];
            }
            else if (this.ID == "Fenwik the Smith")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 38]];
            }
            else if (this.ID == "Cedrico the Carpenter")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 12]];
            }
            else if (this.ID == "Herman the Butcher")
            {
                this.drops = [[new Item("meatCleaver", this.X, this.Y), 1]];
            }
            else if (this.ID == "Ernesto the Engineer")
            {
                this.drops = [[new Item("engineerOutfit", this.X, this.Y), 1]];
            }
            else if (this.ID == "Hugo the Inventor")
            {
                if (quests.inventorsFeudStage == "realPlans" || quests.inventorsFeudCompletionStyle == "rightPlans")
                {
                    this.drops = [[new Item("engineerOutfit", this.X, this.Y), 1], [new Item("copper", this.X, this.Y), 1]];
                }
                else
                {
                    this.drops = [[new Item("engineerOutfit", this.X, this.Y), 1], [new Item("copper", this.X, this.Y), 1], [new Item("inventionPlans", this.X, this.Y), 1]];
                }
            }
            else if (this.ID == "Chieftan Schuylar")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 97], [new Item("kellishClaymore", this.X, this.Y), 1]];
                this.customEXP = true;
                this.experience = 91 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Dagmar the Smith")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 90 + Math.floor(Math.random() * 41)], [new Item("longsword", this.X, this.Y), 1]];
                this.customEXP = true;
                this.experience = 81 * ((player.getIntelligence() / 50) + 1);
            }
            else if (this.ID == "Lennard the Smith")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 30 + Math.floor(Math.random() * 10)]];
            }
            else if (this.ID == "Johanna the Herbalist")
            {
                this.drops = [[new Item("coins", this.X, this.Y), 50]];
            }
            else
            {
                this.drops = [];
            }

            if (this.customEXP == false)
            {
                if (Math.max(0, (this.ultra.weapon[1][1] + this.ultra.weapon[1][0]) - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 5 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (5 * ((player.getIntelligence() / 50) + 1)) / 10;
                }
            }

            //AI
            if (this.alive == true)
            {

                if (this.disturbed == true || this.DTU(this.target) <= this.baseSight)
                {
                    if (this.disturbed == true)
                    {
                        this.hostile = true; //let the games animation know to display the person's name in red.
                    }

                    if (this.ultra.personality == "violent")
                    {
                        if (this.target == player && this.disturbed || this.target == player && this.follower)
                        {
                            this.pointTowardsPlayer();
                            this.moveInRelationToPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointTowards(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                        else
                        {
                            this.offended = false;
                        }

                        if (this.ranged == false)
                        {
                            if (this.target == player && this.disturbed || this.target != player)
                            {
                                this.Attack(this.ultra.weapon[1][1], this.ultra.weapon[1][0]);
                            }
                        }

                        if (this.disturbed == true)
                        {
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                if (this.baseTeam != "player")
                                {
                                    if (this.disdained != true)
                                    {
                                        this.callForNearbyHelpFromType(1850, "Soldier");
                                    }
                                }
                            }
                        }
                        else
                        {
                            //this.callForHelp(1850, "Soldier");
                        }
                    }
                    else if (this.ultra.personality == "calculated")
                    {
                        if (player.weaponEquipped == "none" && player.armourTotal < 0.5 || this.target != player)
                        {
                            this.fleeing = false;
                            this.ranged = this.ultra.ranged[0];

                            if (this.target == player && this.disturbed || this.target == player && this.follower)
                            {
                                this.pointTowardsPlayer();
                                this.moveInRelationToPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointTowards(this.target);
                                this.moveInRelationToThing(this.target);
                            }
                            else
                            {
                                this.offended = false;
                            }

                            if (this.ranged == false)
                            {
                                if (this.target == player && this.disturbed || this.target != player)
                                {
                                    this.Attack(this.ultra.weapon[1][1], this.ultra.weapon[1][0]);
                                }
                            }

                            if (this.disturbed == true)
                            {
                                if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                                {
                                    if (this.baseTeam != "player")
                                    {
                                        if (this.disdained != true)
                                        {
                                            this.callForNearbyHelpFromType(1850, "Soldier");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //this.callForHelp(1850, "Soldier");
                            }
                        }
                        else
                        {
                            this.ranged = false;
                            this.attacking = false;
                            if (this.target == player && this.disturbed || this.target == player && this.follower)
                            {
                                this.moveInRelationToPlayer();
                                this.pointAwayFromPlayer();
                            }
                            else if (this.target != "none")
                            {
                                this.pointAway(this.target);
                                this.moveInRelationToThing(this.target);
                            }
                            else
                            {
                                this.offended = false;
                            }

                            if (this.disturbed == true)
                            {
                                if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                                {
                                    if (this.baseTeam != "player")
                                    {
                                        if (this.disdained != true)
                                        {
                                            this.callForNearbyHelpFromType(1850, "Soldier");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //this.callForHelp(1850, "Soldier");
                            }
                        }
                    }
                    else if (this.ultra.personality == "scared")
                    {
                        this.ranged = false;
                        if (this.target == player && this.disturbed)
                        {
                            this.moveInRelationToPlayer();
                            this.pointAwayFromPlayer();
                        }
                        else if (this.target != "none")
                        {
                            this.pointAway(this.target);
                            this.moveInRelationToThing(this.target);
                        }
                        else
                        {
                            this.offended = false;
                        }

                        if (this.disturbed == true)
                        {
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                if (this.baseTeam != "player")
                                {
                                    if (this.disdained != true)
                                    {
                                        this.callForNearbyHelpFromType(1850, "Soldier");
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (this.baseTeam != "player")
                            {
                                //this.callForHelp(1850, "Soldier");
                            }
                        }
                    }
                }
                else
                {
                    this.hostile = false;
                    this.attacking = false;
                    this.fleeing = false;
                    this.dtp = this.DTP();
                    if (this.dtp > 35)
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moving = false;
                    }
                }

                //this.deathChecker();
                this.switchToSwimming();
                this.disturbedTimer();
                this.visibleSight();
            }
            else
            {
                if (this.doOnDeathOnce == true)
                {
                    //Faction relation decreases
                    if (this.ultra.faction == "Freynor" && this.killNotByPlayer == false || this.ultra.faction == "Freynor" && this.killByPlayerTeam)
                    {
                        player.freynorFaction -= 25;
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(1850, "Soldier");
                        }
                    }
                    else if (this.ultra.faction == "Orgell" && this.killNotByPlayer == false || this.ultra.faction == "Orgell" && this.killByPlayerTeam)
                    {
                        player.orgellFaction -= 25;
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(1850, "Soldier");
                        }
                    }
                    else if (this.ultra.faction == "Vardan" && this.killNotByPlayer == false || this.ultra.faction == "Vardan" && this.killByPlayerTeam)
                    {
                        player.vardanFaction -= 25;
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(1850, "Soldier");
                        }
                    }
                    else if (this.ultra.faction == "Kel" && this.killNotByPlayer == false || this.ultra.faction == "Kel" && this.killByPlayerTeam)
                    {
                        player.kelFaction -= 25;
                        this.callForNearbyHelpFromType(1850, "Soldier");
                    }
                    else if (this.ultra.faction == "Thengar" && this.killNotByPlayer == false || this.ultra.faction == "Thengar" && this.killByPlayerTeam)
                    {
                        player.thengarFaction -= 25;
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(1850, "Soldier");
                        }
                    }
                    else if (this.ultra.faction == "Aldrek" && this.killNotByPlayer == false || this.ultra.faction == "Aldrek" && this.killByPlayerTeam)
                    {
                        player.aldrekFaction -= 25;
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(1850, "Soldier");
                        }
                    }
                    else if (this.ultra.faction == "Cephrite" && this.killNotByPlayer == false || this.ultra.faction == "Cephrite" && this.killByPlayerTeam)
                    {
                        player.cephriteFaction -= 25;
                        this.callForNearbyHelpFromType(1850, "Soldier");
                    }
                    else if (this.ultra.faction == "Nirwaden" && this.killNotByPlayer == false || this.ultra.faction == "Nirwaden" && this.killByPlayerTeam)
                    {
                        if (this.disdained != true)
                        {
                            player.nirwadenFaction -= 25;
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(1850, "Soldier");
                            }
                        }
                    }
                    //Minor Factions
                    if (this.ultra.faction == "TheBalgurMercenaries")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.theBalgurMercenariesFaction -= 25;
                        }
                    }
                    if (this.ultra.faction == "EstolGang")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction -= 25;
                        }
                    }
                    if (this.ultra.faction == "Sylkeem")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.sylkeemRepublicansFaction -= 25;
                        }
                    }

                    //Unique Characters Permanent Death
                    if (this.ID == "Laandeg the Alchemist")
                    {
                        uniqueChars.laandegLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 6;
                        }
                    }
                    if (this.ID == "Gamden the Alchemist")
                    {
                        uniqueChars.gamdenLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 3;
                        }
                    }
                    if (this.ID == "Bjorn")
                    {
                        uniqueChars.bjornLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 1;
                        }
                    }
                    if (this.ID == "Feniglio")
                    {
                        uniqueChars.feniglioLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 2;
                        }
                    }
                    if (this.ID == "Agustin the Doctor")
                    {
                        uniqueChars.agustinLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 40;
                        }
                    }
                    if (this.ID == "Joaquin the Barkeep")
                    {
                        uniqueChars.joaquinLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction -= 7;
                        }
                    }
                    if (this.ID == "Jimena the Tailor")
                    {
                        uniqueChars.jimenaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 10;
                        }
                    }
                    if (this.ID == "Ernesto the Engineer")
                    {
                        uniqueChars.ernestoLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 11;
                        }
                    }
                    if (this.ID == "Customs Master Ilimo")
                    {
                        uniqueChars.ilimoLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 40;
                        }
                    }
                    if (this.ID == "Harbourmaster Sebastian")
                    {
                        uniqueChars.sebastianLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 23;
                        }
                    }
                    if (this.ID == "Micael the Banker")
                    {
                        uniqueChars.micaelLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 19;
                        }
                    }
                    if (this.ID == "Garld the Crazy Beggar" || this.ID == "Garld, Sage of Gemesh")
                    {
                        uniqueChars.garldLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (this.ID == "Garld, Sage of Gemesh")
                            {
                                player.freynorFaction -= 17;
                            }
                            else
                            {
                                player.freynorFaction += 10;
                            }

                        }
                    }
                    if (this.ID == "Svehn the Smith")
                    {
                        uniqueChars.bobithLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 9;
                        }
                    }
                    else if (this.ID == "Medlia the Merchant")
                    {
                        uniqueChars.medliaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 12;
                        }
                    }
                    else if (this.ID == "Maai the Herbalist")
                    {
                        uniqueChars.maaiLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 10;
                        }
                    }
                    else if (this.ID == "Seeth the Innkeeper")
                    {
                        uniqueChars.seethLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 5;
                        }
                    }
                    else if (this.ID == "Siggi the Harborman")
                    {
                        uniqueChars.siggiLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 30;
                        }
                    }
                    else if (this.ID == "Saana the Produce Vender")
                    {
                        uniqueChars.saanaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 5;
                        }
                    }
                    else if (this.ID == "Fuyumi the Banker")
                    {
                        uniqueChars.fuyumiLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction += 12;
                        }
                    }
                    else if (this.ID == "Katja the Tailor")
                    {
                        uniqueChars.katjaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 19;
                        }
                    }
                    else if (this.ID == "Aari the Blacksmith")
                    {
                        uniqueChars.aariLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 11;
                        }
                    }
                    else if (this.ID == "Hildegard")
                    {
                        uniqueChars.hildegardLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (quests.thePlightOfLethikQuest && quests.thePlightOfLethikWitchInterrogated)
                            {
                                player.thengarFaction += 25;
                            }
                        }
                    }
                    else if (this.ID == "Axel")
                    {
                        uniqueChars.axelLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 3;
                        }
                    }
                    else if (this.ID == "Cheryl the Tailor")
                    {
                        uniqueChars.cherylLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 9;
                        }
                    }
                    else if (this.ID == "Gerlach the Butcher")
                    {
                        uniqueChars.gerlachLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 8;
                        }
                    }
                    else if (this.ID == "Ederhal the Innkeeper")
                    {
                        uniqueChars.ederhalLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 6;
                        }
                    }
                    else if (this.ID == "Brunelda the Merchant")
                    {
                        uniqueChars.bruneldaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 4;
                        }
                    }
                    else if (this.ID == "Bamey the Huntsman")
                    {
                        uniqueChars.bameyLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 7;
                        }
                    }
                    else if (this.ID == "Kedwin")
                    {
                        uniqueChars.kedwinLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 7;
                        }
                    }
                    else if (this.ID == "Teber the Deserter" || this.ID == "Teber the Artisan")
                    {
                        uniqueChars.teberLDS = false;
                    }
                    else if (this.ID == "Hilmund the Innkeeper")
                    {
                        uniqueChars.hilmundLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 15;
                        }
                    }
                    else if (this.ID == "[ " + quests.hilmundChildName + " ]")
                    {
                        uniqueChars.hilmundChildLDS = false;
                    }
                    else if (this.ID == "[ " + quests.cherylChildName + " ]")
                    {
                        uniqueChars.cherylChildLDS = false;
                    }
                    else if (this.ID == "[ " + quests.rannukChildName + " ]")
                    {
                        uniqueChars.rannukChildLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 1150;
                            quests.killedStambjordHeir = true;
                        }
                    }
                    else if (this.ID == "Drohfor")
                    {
                        uniqueChars.drohforLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 2;
                        }
                    }
                    else if (this.ID == "Maggy the Tailor")
                    {
                        uniqueChars.maggyLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 14;
                        }
                    }
                    else if (this.ID == "Hidalgo Lucelius")
                    {
                        uniqueChars.luceliusLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 75;
                        }
                    }
                    else if (this.ID == "Mechelo the Steward")
                    {
                        uniqueChars.mecheloLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 85;
                        }
                    }
                    else if (this.ID == "Suspected Regicide" || this.ID == "Off Duty Altezor Soldier" && this.ultra.faction == "EstolGang")
                    {
                        uniqueChars.altezorInfiltratorLDS = false;

                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction += 30;
                        }
                    }
                    if (this.ID == "Ser Belgos of Atalin" || this.ID == "Belgos" || this.ID == "Belgos the Disgraced" || this.ID == "Belgos the Disgraced One" || this.ID == "Belgos of Atalin")
                    {
                        uniqueChars.belgosLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (this.ID == "Belgos the Disgraced" || this.ID == "Belgos the Disgraced One")
                            {
                                player.nirwadenFaction -= 50;
                            }
                            else if (this.ID == "Belgos")
                            {
                                player.nirwadenFaction -= 100;
                            }
                            else
                            {
                                player.nirwadenFaction -= 150;
                            }
                        }
                    }
                    else if (this.ID == "Libo the Servant Boy")
                    {
                        uniqueChars.liboLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 0;
                        }
                    }
                    else if (this.ID == "Marta the Cook")
                    {
                        uniqueChars.martaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 3;
                        }
                    }
                    else if (this.ID == "Bishop Emmanuel")
                    {
                        uniqueChars.emmanuelLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 275;
                        }
                    }
                    else if (this.ID == "High Lord Basilio Altezor")
                    {
                        uniqueChars.basilioAltezorLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 1475;
                        }
                    }
                    else if (this.ID == "High Dame Emylia Altezor")
                    {
                        uniqueChars.emyliaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 475;
                        }
                    }
                    else if (this.ID == "Lailiona")
                    {
                        uniqueChars.lailionaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 475;
                        }
                    }
                    else if (this.ID == "Vela the Baker")
                    {
                        uniqueChars.velaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 4;
                        }
                    }
                    else if (this.ID == "Lelaila")
                    {
                        uniqueChars.lelailaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 2;
                        }
                    }
                    else if (this.ID == "Cristobal the Innkeeper")
                    {
                        uniqueChars.cristobalLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 19;
                        }
                    }
                    else if (this.ID == "Master Blacksmith Quixote")
                    {
                        uniqueChars.quixoteLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 68;
                        }
                    }
                    else if (this.ID == "Francil the Stablemaster")
                    {
                        uniqueChars.francilLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 25;
                        }
                    }
                    else if (this.ID == "Tirbutin the Tax Officiator")
                    {
                        uniqueChars.tirbutinLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 26;
                        }
                    }
                    else if (this.ID == "Guild Master Manolo")
                    {
                        uniqueChars.manoloLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 76;
                        }
                    }
                    else if (this.ID == "Ergoku") //purchased Hidalgo title (highfolk)
                    {
                        uniqueChars.ergokuLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 92;
                        }
                    }
                    else if (this.ID == "Ilihim") //Nephew of Ergoku
                    {
                        uniqueChars.ilihimLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 76;
                        }
                    }
                    else if (this.ID == "Aarni the Stablemaster")
                    {
                        uniqueChars.aarniLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 9;
                        }
                    }
                    else if (this.ID == "Odee the Banker")
                    {
                        uniqueChars.odeeLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 11;
                        }
                    }
                    else if (this.ID == "Naoko the Banker")
                    {
                        uniqueChars.naokoLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 8;
                        }
                    }
                    else if (this.ID == "Toggin")
                    {
                        uniqueChars.togginLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (this.ultra.faction == "Freynor")
                            {
                                player.freynorFaction -= 6;
                            }
                        }
                    }
                    else if (this.ID == "Neculai the Merchant" || this.ID == "Neculai the Beggar")
                    {
                        uniqueChars.neculaiLDS = false;
                    }
                    else if (this.ID == "Fenwik the Smith")
                    {
                        uniqueChars.fenwikLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.kelFaction -= 10;
                        }
                    }
                    else if (this.ID == "Irene")
                    {
                        uniqueChars.ireneLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.kelFaction -= 50;
                        }
                    }
                    else if (this.ID == "Roselin the Tailor")
                    {
                        uniqueChars.roselinLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.kelFaction -= 12;
                        }
                    }
                    else if (this.ID == "Chieftan Schuylar")
                    {
                        uniqueChars.schuylarLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.kelFaction -= 100;
                        }
                    }
                    else if (this.ID == "Cedrico the Carpenter")
                    {
                        uniqueChars.cedricoLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 6;
                        }
                    }
                    else if (this.ID == "Herman the Butcher")
                    {
                        uniqueChars.hermanLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 5;
                        }
                    }
                    else if (this.ID == "Hugo the Inventor")
                    {
                        uniqueChars.hugoLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 22;
                        }
                    }
                    else if (this.ID == "Dagmar the Smith")
                    {
                        uniqueChars.dagmarLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 15;
                        }
                    }
                    else if (this.ID == "Lennard the Smith")
                    {
                        uniqueChars.lennardLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 5;
                        }
                    }
                    else if (this.ID == "Johanna the Herbalist")
                    {
                        uniqueChars.johannaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 12;
                        }
                    }
                    else if (this.ID == "Lena")
                    {
                        uniqueChars.lenaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 14;
                        }
                    }

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving == false && this.attacking == false)
                {
                    this.costume = 0;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costume = 0;
                    // the right leg goes back 25 pixles and the left goes forward 25.
                    if (this.lLegY < 23 && this.legSwitch == 0 )
                    {
                        // this makes the legs extend
                        this.lLegY += 11 / (16.75 - (0.17 / 2 * 80));
                        this.rLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                        //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                    }
                    else
                    {
                        //switch to the right leg forward routine.
                        this.legSwitch = 1;
                    }

                    // the left leg goes back 25 pixles and the right goes forward 25.
                    if (this.lLegY > -23 && this.legSwitch == 1)
                    {
                        // this makes the legs extend
                        this.lLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                        this.rLegY += 11 / (16.75 - (0.17 / 2 * 80));
                        //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                    }
                    else
                    {
                        // switch to the left leg forward routine.
                        this.legSwitch = 0;
                    }

                    //to put it simply, this function draws two lines that represent the main character's legs.
                    this.drawLegs = function()
                    {
                        if (!this.petrified)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                            XXX.rotate(this.rotation - 1/2 * Math.PI);
                            XXX.beginPath();
                            XXX.strokeStyle ="black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(-4, 0);
                            XXX.lineTo(-4, 0 + this.lLegY);
                            XXX.stroke();
                            XXX.beginPath();
                            XXX.strokeStyle ="black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(4, 0);
                            XXX.lineTo(4, 0 + this.rLegY);
                            XXX.stroke();
                            XXX.restore();
                        }
                    };
                    this.drawLegs();
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        if (this.weapon == "none")
                        {
                            this.costumeEngine(6, 0.2, true);
                        }
                        else if (this.weapon == "freydicSword")
                        {
                            this.costumeEngine(7, 0.2, true);
                        }
                        else if (this.weapon == "freydicSpear")
                        {
                            this.costumeEngine(5, 0.18, true);
                        }
                        else if (this.weapon == "freydicGreatSword")
                        {
                            this.costumeEngine(8, 0.23, true);
                        }
                        else if (this.weapon == "timberAxe")
                        {
                            this.costumeEngine(7, 0.25, true);
                        }
                        else if (this.weapon == "rasper")
                        {
                            this.costumeEngine(5, 0.20, true);
                        }
                        else if (this.weapon == "longSpikedMorningStar")
                        {
                            this.costumeEngine(7, 0.125, true);
                        }
                        else if (this.weapon == "kellishSword")
                        {
                            this.costumeEngine(7, 0.21, true);
                        }
                        else if (this.weapon == "warHammer")
                        {
                            this.costumeEngine(9, 0.22, true);
                        }
                        else if (this.weapon == "kellishClaymore")
                        {
                            this.costumeEngine(14, 0.32, true);
                        }
                        else if (this.weapon == "flail")
                        {
                            this.costumeEngine(11, 0.18, false);
                        }
                        else if (this.weapon == "thenganSword")
                        {
                            this.costumeEngine(8, 0.2, true);
                        }
                        else if (this.weapon == "hammer")
                        {
                            this.costumeEngine(8, 0.24, true);
                        }
                        else if (this.weapon == "thenganWarhammer")
                        {
                            this.effect = "smashbackII";
                            this.costumeEngine(7, 0.15, true);
                        }
                        else if (this.weapon == "smashStick")
                        {
                            this.costumeEngine(7, 0.19, true);
                        }
                        else if (this.weapon == "kellishSawClub")
                        {
                            this.costumeEngine(7, 0.21, true);
                        }
                        else if (this.weapon == "kellishSpear")
                        {
                            this.costumeEngine(5, 0.21, true);
                        }
                        else if (this.weapon == "meatCleaver")
                        {
                            this.costumeEngine(7, 0.26, true);
                        }
                        else if (this.weapon == "iceSpikes")
                        {
                            this.costumeEngine(7, 0.20, false);
                        }
                        else if (this.weapon == "electricBolt")
                        {
                            this.costumeEngine(8, 0.25, false);
                        }
                        else if (this.weapon == "mace")
                        {
                            this.costumeEngine(6, 0.15, true);
                        }
                        else if (this.weapon == "burningSmashStick")
                        {
                            this.effect = "fire";
                            this.costumeEngine(7, 0.23, true);
                        }
                        else if (this.weapon == "fishingpole")
                        {
                            this.costumeEngine(6, 0.15, true);
                        }
                        else if (this.weapon == "crateLight" || this.weapon == "crateDark" || this.weapon == "basketDark" || this.weapon == "basketLight")
                        {
                            this.costumeEngine(2, 0.15, true);
                        }
                        else if (this.weapon == "nirineseSabre")
                        {
                            this.costumeEngine(9, 0.3, true);
                        }
                        else if (this.weapon == "burningHands")
                        {
                            this.effect = "fire";
                            this.costumeEngine(6, 0.2, true);
                        }
                        else if (this.weapon == "estoc")
                        {
                            this.costumeEngine(6, 0.15, true);
                        }
                        else if (this.weapon == "vardanianHalberd")
                        {
                            this.costumeEngine(9, 0.20, true);
                        }
                        else if (this.weapon == "thenganDagger")
                        {
                            this.costumeEngine(6, 0.22, true);
                        }
                    }
                }

                this.drawHumanOutfitBelow(this.outfit, false);

                //draw some weapons underneath the body
                if (this.wepLayer == "under" || this.weapon == "swimming" || this.weapon == "freydicSword" || this.weapon == "longbow" || this.weapon == "crossbow" || this.weapon == "kellishClaymore" || this.weapon == "estoc" || this.weapon == "vardanianHalberd" || this.weapon == "shotgun" || this.weapon == "m16Carbine")
                {
                    this.drawHumanArms();
                }

                //Draw the Person's body
                this.drawHuman();

                //draw the others over it.
                if (this.wepLayer == "standard" || this.weapon == "swimming" || this.weapon != "freydicSword" && this.weapon != "longbow" && this.weapon != "crossbow" && this.weapon != "longSpikedMorningStar" && this.weapon != "kellishClaymore" && this.weapon != "estoc" && this.weapon != "vardanianHalberd" && this.weapon != "shotgun" && this.weapon != "m16Carbine")
                {
                    this.drawHumanArms();
                }

                //draw the Person's Outfit.
                this.drawHumanOutfit(this.outfit, false);

                //draw some weapons over the outfit
                if (this.wepLayer == "over" || this.weapon == "longSpikedMorningStar")
                {
                    this.drawHumanArms();
                }
            }
            else
            {
                this.drawHuman();
                this.drawHumanOutfit("none", true);
                this.drawUnit(verse, 0, 302, 35, 80, -20.5, -20, 57, 100, 1/2 * Math.PI);
            }
        };
        //SOLDIER
        if (this.type == "Soldier") //soldado humano
        {
            //Set Drops and experience
            if (Math.max(0, (this.ultra.weapon[1][0] + this.ultra.weapon[1][1]) - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
            {
                this.experience = 20 * this.con * ((player.getIntelligence() / 50) + 1);
            }
            else
            {
                this.experience = (20 * this.con * ((player.getIntelligence() / 50) + 1)) / 10;
            }

            //AI
            if (this.alive == true)
            {
                this.friendDecider();
                this.targeting();
                //Soldiers under your control will follow you without wanting to kill you.
                if (this.team == "player")
                {
                    this.follower = true;
                }
                else
                {
                    this.follower = false;
                }

                //If you are enemies with a temporarily allied faction that faction abandons your team.
                if (this.ID == "Balgur Mercenary")
                {
                    if (this.team == "player" && !this.isCharmed)
                    {
                        if (player.theBalgurMercenariesFaction < 0 || player.theBalgurMercenariesPeace != true)
                        {
                            if (player.theBalgurMercenariesPeace != true)
                            {
                                this.disturbedTime = new Date().getTime();
                            }
                            this.baseTeam = "TheBalgurMercenaries";
                        }
                    }
                }
                else if (this.ID == "Tor Huskarl" || this.ID == "Tor Soldier" || this.ID == "Tor Captain" || this.ID == "Stambjord Soldier" || this.ID == "Stambjord Captain" || this.ID == "Stambjord Huskarl") //freydic nobles and royals can control the Tor family's army.
                {
                    if (this.team == "player" && !this.isCharmed)
                    {
                        if (player.freynorFaction < 0 || player.freynorPeace != true)
                        {
                            this.baseTeam = "Freynor";
                        }
                    }
                }
                else if (this.ID == "Beulingerr Soldier" || this.ID == "Beulingerr Captain") //thengan nobles and royals can control the Beulingerr family's army.
                {
                    if (this.team == "player" && !this.isCharmed)
                    {
                        if (player.thengarFaction < 0 || player.thengarPeace != true)
                        {
                            this.baseTeam = "Thengar";
                        }
                    }
                }
                else if (this.ID == "Altezor Soldier" || this.ID == "Altezor Captain") //nirwaden nobles and royals can control the Altezor family's army.
                {
                    if (this.team == "player" && !this.isCharmed)
                    {
                        if (player.nirwadenFaction < 0 || player.nirwadenPeace != true)
                        {
                            this.baseTeam = "Nirwaden";
                        }
                    }
                }
                //Soldier Definitions
                if (this.ID == "Doppelganger" || this.ID == "Unbound Doppelganger")
                {
                    if (this.disturbed)
                    {
                        this.health += 3 * (TTD / (45000 - 420 * Math.min(58.333, player.getEndurance()) * 2));
                    }
                    else
                    {
                        this.health += 6 * (TTD / (45000 - 420 * Math.min(58.333, player.getEndurance()) * 2));
                    }
                    if (this.health > this.healthMAX)
                    {
                        this.health = this.healthMAX;
                    }
                    if (this.ID == "Unbound Doppelganger")
                    {
                        this.disturbed = true;
                    }
                    this.rangeOfSightCalculator(600, false);

                    this.ranged = player.weaponIsRanged;
                    if (player.loadedAmmo != "none" && player.weaponEquipped != "shotgun" && player.weaponEquipped != "m16Carbine")
                    {
                        this.ultra.ranged[1] = player.loadedAmmo.type;
                        this.ultra.ranged[2] = player.weapon.speed;
                        this.ultra.ranged[3] = player.weapon.range;
                        this.ultra.ranged[4] = player.weapon.negateArmour;
                        this.ultra.ranged[5] = player.loadedAmmo.damage;
                        this.ultra.ranged[6] = player.loadedAmmo.magicalDamage;
                        this.ultra.ranged[7] = player.loadedAmmo.ability;
                        this.ultra.ranged[8] = player.weapon.rate;
                    }
                    else if (player.weaponEquipped == "shotgun")
                    {
                        this.ranged = true;
                        this.ultra.ranged[1] = "shotgunRound";
                        this.ultra.ranged[2] = player.weapon.speed;
                        this.ultra.ranged[3] = player.weapon.range;
                        this.ultra.ranged[4] = player.weapon.negateArmour;
                        this.ultra.ranged[5] = 19;
                        this.ultra.ranged[6] = 0;
                        this.ultra.ranged[7] = "none";
                        this.ultra.ranged[8] = player.weapon.rate / 100;
                    }
                    else if (player.weaponEquipped == "m16Carbine")
                    {
                        this.ranged = true;
                        this.ultra.ranged[1] = "5.56MMRound";
                        this.ultra.ranged[2] = player.weapon.speed;
                        this.ultra.ranged[3] = player.weapon.range;
                        this.ultra.ranged[4] = player.weapon.negateArmour;
                        this.ultra.ranged[5] = 29;
                        this.ultra.ranged[6] = 0;
                        this.ultra.ranged[7] = "none";
                        this.ultra.ranged[8] = player.weapon.rate / 100;
                    }

                    //Doppelgangers mirror the player every 2 seconds.
                    if (this.aiTimer > 2)
                    {
                        this.aiTimer = 0;

                        console.log(this);

                        this.con = player.getConstitution();
                        this.outfit = player.outfitEquipped;
                        if (player.spell != "none")
                        {
                            this.weapon = player.spell.ID;
                            this.ultra.weapon[1][0] = 0;
                            this.attackWait = player.spell.cooldown;
                            if (player.spell.spellRange == "Near")
                            {
                                this.engagementRadius = 24;
                            }
                            else
                            {
                                this.engagementRadius = 1000;
                            }
                            this.negateArmour = 0;
                        }
                        else if (player.weapon != "none")
                        {
                            this.weapon = player.weapon.type;
                            this.ultra.weapon[1][0] = player.weapon.damage;
                            this.attackWait = player.weapon.rate / 100;
                            if (player.weapon.type != "none")
                            {
                                if (this.ranged == true)
                                {
                                    this.engagementRadius = (player.weapon.range / 4);
                                }
                                else
                                {
                                    this.engagementRadius = player.weapon.distance;
                                }
                            }
                            else
                            {
                                this.engagementRadius = 24;
                            }
                            this.negateArmour = player.weapon.negateArmour;
                        }
                        this.ultra.weapon[1][1] = 0;
                        this.ultra.weapon[0] = this.weapon;
                        this.heatResistance = player.heatResistance;
                        this.healthMAX = this.con * 4 + 0.1;
                        this.armour = (player.naturalArmour + player.armour);
                        this.speed = ((1 / player.freeze) + ((1 / 250) * player.getDexterity() / player.freeze)) * (TTD / 16.75);
                        this.sizeRadius = 10;
                        this.swimSpeed = 0.6 * this.speed;
                        this.CNX = player.getConcentration(); //magic ability
                        this.magicalResistance = player.magicalResistanceTotal;
                    }
                }
                else if (this.ID == "Sellsword")
                {
                    //if the sellsword is actually a member of the estolgang
                    if (this.ultra.faction == "EstolGang" || this.ultra.faction == "EstolGang2")
                    {
                        if (player.estolgangFaction <= -50)
                        {
                            this.disturbed = true;
                            this.baseTeam = this.ultra.faction;
                        }
                    }

                    if (typeof(this.ultra.sightRadius) != "undefined")
                    {
                        this.rangeOfSightCalculator(this.ultra.sightRadius, true);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(550, true);
                    }

                    this.drops = [];
                    if (typeof(this.ultra.sellswordLight) != "undefined")
                    {
                        if (this.team == "player" || this.ultra.sellswordLight)
                        {
                            lights.push({X:this.X, Y: this.Y, size: 90, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                        }
                    }
                    else if (this.team == "player")
                    {
                        lights.push({X:this.X, Y: this.Y, size: 90, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                    }
                }
                else if (this.ultra.faction == "Freynor")
                {
                    if (this.ID == "Tor Soldier" || this.ID == "Tor Captain" || this.ID == "Tor Commissioner Stendor")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(750, "true");

                        //All of this factions guards drop this:
                        this.drops = [[new Item("coins", this.X, this.Y), 1 + Math.floor(Math.random() * 24)]];

                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                        // If the target has too low a level of relations with the faction they are an enemy.
                        if (player.freynorFaction <= -50)
                        {
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction || player.freynorFaction <= -500)
                            {
                                this.disturbed = true;
                            }
                            else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction || this.health >= this.healthMAX * 5/6 && player.title == "Nobility" && player.raceName == this.ultra.faction)
                            {
                                this.disturbed = false;
                            }
                        }
                        else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction || this.health >= this.healthMAX * 5/6 && player.title == "Nobility" && player.raceName == this.ultra.faction)
                        {
                            this.disturbed = false;
                        }

                        //Call for help from other guards unless the culprit is the royal leader.
                        if (this.disturbed == true)
                        {
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(2000, "Soldier");
                            }
                        }

                        this.switchToRanged("longbow");
                    }
                    else if (this.ID == "Tor Huskarl" || this.ID == "Jarl Orjov Tor" || this.ID == "Ser Olis Pynske") //no ranged attack
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(950, false);

                        //All of this factions guards drop this:
                        if (this.ID == "Jarl Orjov Tor")
                        {
                            this.drops = [[new Item("coins", this.X, this.Y), 2000], [new Item("jvostranPlateArmour", this.X, this.Y), 1], [new Item("freydicGreatSword", this.X, this.Y), 1]];
                        }
                        else if (this.ID == "Ser Olis Pynske")
                        {
                            this.drops = [[new Item("coins", this.X, this.Y), 450], [new Item("freydicGreatSword", this.X, this.Y), 1]];
                        }
                        else
                        {
                            this.drops = [[new Item("coins", this.X, this.Y), 45 + Math.floor(Math.random() * 56)]];
                        }

                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                        // If the target has too low a level of relations with the faction they are an enemy.
                        if (player.freynorFaction <= -50)
                        {
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction || player.freynorFaction <= -500)
                            {
                                this.disturbed = true;
                            }
                            else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction|| this.health >= this.healthMAX * 5/6 && player.title == "Nobility" && player.raceName == this.ultra.faction)
                            {
                                this.disturbed = false;
                            }
                        }
                        else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction|| this.health >= this.healthMAX * 5/6 && player.title == "Nobility" && player.raceName == this.ultra.faction)
                        {
                            this.disturbed = false;
                        }

                        //Call for help from other guards unless the culprit is the royal leader.
                        if (this.disturbed == true)
                        {
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(2500, "Soldier");
                            }
                        }
                    }
                    else
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(750, "true");

                        //All of this factions guards drop this:
                        if (this.ID == "Jarl Rannuk Stambjord")
                        {
                            this.drops = [[new Item("coins", false), 3000], [new Item("fineFreydicOutfitM", false), 1]];
                        }
                        else if (this.ID == "Ukko, Sage of Gemesh")
                        {
                            if (!quests.stolenScriptureScrollGiven)
                            {
                                this.drops = [[new Item("iceSpikes", this.X, this.Y), 1]];
                            }
                        }
                        else if (this.ID == "Stambjord Soldier")
                        {
                            this.drops = [[new Item("coins", this.X, this.Y), 4 + Math.floor(Math.random() * 31)]];
                        }
                        else if (this.ID == "Stambjord Captain")
                        {
                            this.drops = [[new Item("coins", this.X, this.Y), 50 + Math.floor(Math.random() * 61)]];
                        }
                        else if (this.ID == "Stambjord Huskarl")
                        {
                            this.drops = [[new Item("coins", this.X, this.Y), 39 + Math.floor(Math.random() * 51)]];
                        }
                        else
                        {
                            this.drops = [];
                        }

                        if (this.ID != "Rafaard the Looter")
                        {
                            lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                        }
                        
                        // If the target has too low a level of relations with the faction they are an enemy.
                        if (player.freynorFaction <= -50)
                        {
                            if (player.title != "Royalty" || player.raceName != this.ultra.faction || player.freynorFaction <= -500)
                            {
                                this.disturbed = true;
                            }
                            else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction)
                            {
                                this.disturbed = false;
                            }
                        }
                        else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction)
                        {
                            this.disturbed = false;
                        }

                        //Call for help from other guards unless the culprit is the royal leader.
                        if (this.disturbed == true)
                        {
                            if (player.title != "Royalty" || player.raceName != this.ultra.faction)
                            {
                                if (this.ID == "Stambjord Huskarl")
                                {
                                    this.callForNearbyHelpFromType(2500, "Soldier");
                                }
                                else
                                {
                                    this.callForNearbyHelpFromType(2000, "Soldier");
                                }
                            }
                        }

                        if (this.ID != "Jarl Rannuk Stambjord" && this.ID != "Ukko, Sage of Gemesh")
                        {
                            this.switchToRanged("longbow");
                        }
                    }
                }
                else if (this.ultra.faction == "Kel")
                {
                    //RANGE OF SIGHT (anything related to range of sight)
                    this.rangeOfSightCalculator(750, "true");

                    //All of this factions guards drop this:
                    this.drops = [];

                    lights.push({X: this.X, Y: this.Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
                    // If the target has too low a level of relations with the faction they are an enemy.
                    if (player.kelFaction <= -50)
                    {
                        this.disturbed = true;
                    }

                    //Call for help from other guards unless the culprit is the royal leader.
                    if (this.disturbed == true)
                    {
                        this.callForNearbyHelpFromType(2000, "Soldier");
                    }
                }
                else if (this.ultra.faction == "Thengar")
                {
                    //RANGE OF SIGHT (anything related to range of sight)
                    this.rangeOfSightCalculator(750, "true");

                    //All of this factions guards drop this:
                    if (this.ID == "Markos the Pit Master")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 90], [new Item("thenganPlateArmour", this.X, this.Y), 1], [new Item("flail", this.X, this.Y), 1]];
                    }
                    if (this.ID == "Rutgar the Warden")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 190], [new Item("thenganPlateArmour", this.X, this.Y), 1], [new Item("longsword", this.X, this.Y), 1]];
                    }
                    else if (this.ID == "Beulingerr Commander Friedrich")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 230], [new Item("thenganPlateArmour", this.X, this.Y), 1], [new Item("thenganWarhammer", this.X, this.Y), 1]];
                    }
                    else if (this.ID == "Beulingerr Soldier")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 10 + (Math.floor(Math.random() * 51))]];
                    }
                    else
                    {
                        this.drops = [];
                    }

                    lights.push({X: this.X, Y: this.Y, size: 140, extraStops: true, GRD: 0.7, Alpha: 0.775, showMe: false});
                    // If the target has too low a level of relations with the faction they are an enemy.
                    if (player.thengarFaction <= -50)
                    {
                        this.disturbed = true;
                    }

                    //Call for help from other guards unless the culprit is the royal leader.
                    if (this.disturbed == true)
                    {
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(2200, "Soldier");
                        }
                    }
                }
                else if (this.ultra.faction == "Nirwaden")
                {
                    //RANGE OF SIGHT (anything related to range of sight)
                    this.rangeOfSightCalculator(800, true);

                    //All of this factions guards drop this:
                    if (this.ID == "Emporer Leoneidus") //emporer of Nirwaden Empire
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 53150], [new Item("nirwadenNobleOutfit)", this.X, this.Y), 1]];
                        //this.switchToRanged("crossbow");
                    }
                    else if (this.ID == "Leon the Toll Master")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 150], [new Item("nirwadenPlateArmour)", this.X, this.Y), 1], [new Item("nirineseSabre", this.X, this.Y), 1]];
                        this.switchToRanged("crossbow");
                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.8, Alpha: 0.82, showMe: false});
                    }
                    else if (this.ID == "Ser Belgos of Atalin")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 340], [new Item("nirwadenPlateArmour)", this.X, this.Y), 1], [new Item("estoc", this.X, this.Y), 1]];
                        this.switchToRanged("crossbow");
                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.8, Alpha: 0.82, showMe: false});
                    }
                    else if (this.ID == "Altezor Knight")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 250], [new Item("nirwadenPlateArmour", this.X, this.Y), 1], [new Item("nirineseSabre", this.X, this.Y), 1]];
                        this.switchToRanged("crossbow");
                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.8, Alpha: 0.82, showMe: false});
                    }
                    else if (this.ID == "Altezor Captain")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 100], [new Item("nirwadenMorionArmour", this.X, this.Y), 1], [new Item("nirineseSabre", this.X, this.Y), 1]];
                        this.switchToRanged("crossbow");
                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.8, Alpha: 0.82, showMe: false});
                    }
                    else if (this.ID == "Altezor Soldier")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 38 + (Math.floor(Math.random() * 51))]];
                        this.switchToRanged("crossbow");
                        lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.8, Alpha: 0.82, showMe: false});
                    }
                    else if (this.ID == "Matilda")
                    {
                        this.rangeOfSightCalculator(300, true);
                        this.drops = [[new Item("slowTimeII", this.X, this.Y), 1], [new Item("fireHands", this.X, this.Y), 1]];
                        this.disdained = true;

                        if (this.disturbed == true)
                        {
                            this.ultra.faction = "hjbioibkbdbqkodalbjkabfjkah";
                            this.baseTeam = JSON.stringify(Math.random());
                        }
                    }
                    else
                    {
                        this.drops = [];
                    }

                    if (this.disdained != true && this.disturbed != true)
                    {
                        if (this.playerSeen)
                        {
                            if (player.class != "Priest")
                            {
                                for (var mmggkk = 0; mmggkk < magicList.length; mmggkk++)
                                {
                                    if (magicList[mmggkk].castedByPlayer)
                                    {
                                        this.disturbed = true;
                                        break;
                                    }
                                }
                                if (!this.disturbed)
                                {
                                    for (var mmggkk = 0; mmggkk < tertiarySpells.length; mmggkk++)
                                    {
                                        if (tertiarySpells[mmggkk].equipped == true)
                                        {
                                            this.disturbed = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    //map e4 toll bridge
                    if (player.title != "Royalty" && player.title != "Nobility")
                    {
                        if (player.title != "Highfolk" || player.raceName != "Nirwaden")
                        {
                            if (region == "e4" && player.toll == true && quests.atalinToll == false)
                            {
                                if (this.rangeOfSight >= this.DTP())
                                {
                                    this.disturbed = true;
                                }
                            }
                        }
                    }

                    // If the target has too low a level of relations with the faction they are an enemy.
                    if (player.nirwadenFaction <= -50)
                    {
                        if (this.disdained != true)
                        {
                            this.disturbed = true;
                        }
                    }

                    //Call for help from other guards unless the culprit is the royal leader.
                    if (this.disturbed == true)
                    {
                        if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                        {
                            if (this.disdained == false)
                            {
                                this.callForNearbyHelpFromType(20000, "Soldier");
                            }
                        }
                    }
                }
                else if (this.ultra.faction == "TheBalgurMercenaries")
                {
                    if (player.theBalgurMercenariesFaction <= -50)
                    {
                        this.disturbed = true;
                    }

                    if (this.ID == "Mercenary Captain Kronheime")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(325, false);

                        this.drops = [[new Item("balgurCaptainArmour", this.X, this.Y), 1], [new Item("berulnToothNecklace", this.X, this.Y), 1], [new Item("flail", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 140) + 43]];

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    else if (this.ID == "Mercenary Captain Barret")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(325, false);

                        this.drops = [[new Item("balgurCaptainArmour", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 101) + 35]];

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    else if (this.ID == "Balgur Mercenary")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(300, false);

                        this.drops = [[new Item("balgurMercArmour", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 14) + 5]];

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                }
                else if (this.ultra.faction == "EstolGang" || this.ultra.faction == "EstolGang2")
                {
                    if (player.estolgangFaction <= -50)
                    {
                        this.disturbed = true;
                    }

                    if (this.ID == "Jorge the Killer")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(500, false);

                        this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 18) + 1], [new Item("nirineseSabre", this.X, this.Y), 1], [new Item("kolumPowder", this.X, this.Y), 5]];

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    else if (this.ID == "Lo")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(600, false);

                        this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 78) + 1], [new Item("nirineseSabre", this.X, this.Y), 1], [new Item("kolumPowder", this.X, this.Y), 8]];

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    else if (this.ID == "Suspected Regicide" || this.ID == "Off Duty Altezor Soldier" && this.ultra.faction == "EstolGang")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(700, false);

                        this.drops = [[new Item("nirineseSabre", this.X, this.Y), 1], [new Item("estolPoisoningOrders", this.X, this.Y), 1]];

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    else
                    {

                    }
                }
                else if (this.ultra.faction == "Sylkeem")
                {
                    if (player.sylkeemRepublicansFaction <= -50)
                    {
                        this.disturbed = true;
                    }

                    //if (this.ID == "")
                    //{
                    //    //RANGE OF SIGHT (anything related to range of sight)
                    //    this.rangeOfSightCalculator(500, false);
                    //
                    //    this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 18) + 1]];
                    //
                    //    if (this.disturbed == true)
                    //    {
                    //        this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                    //    }
                    //}
                    //else
                    //{
                    //
                    //}
                }
                else if (this.ultra.faction == "hostile")
                {
                    if (this.ID == "Looter")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(460, false);

                        this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 12) + 1]];

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    if (this.ID == "Northern Pirate" || this.ID == "Salt-Blood Pirate")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(350, false);

                        this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 9) + 1]];

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    if (this.ID == "Salt-Blood Conspirator" || this.ID == "Stambjord Conspirator")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(170, false);

                        this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 20) + 1]];

                        if (this.DTP() <= this.rangeOfSight)
                        {
                            this.disturbedTime = new Date().getTime() + 90000;
                        }

                        if (this.disturbed == false && this.ID == "Stambjord Conspirator")
                        {
                            this.voiceFrequency = 1;
                            this.voice([conspBabb], 660, false, 450);
                            if (quests.aNobleConspiracyQuest == false)
                            {
                                quests.aNobleConspiracyQuest = true;
                                quests.activeQuests.push({name: "A Noble Conspiracy", description: "You have witnessed evidence that The Jarl of Venning permits piratry in exchange for a cut of the loot."});
                            }
                        }
                        else if (this.ID == "Stambjord Conspirator")
                        {
                            conspBabb.pause();
                        }

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight * 3.2, "Soldier");
                        }
                    }
                    if (this.ID == "Northern Bandit")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(325, false);

                        this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 5) + 1]];

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    if (this.ID == "Hetmer The Bandit Chief")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(350, false);

                        this.drops = [[new Item("hetmerArmour", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 33) + 6]];

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }

                        this.switchToRanged("longbow");
                    }
                    if (this.ID == "Nelgref the Flayer")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(325, false);

                        this.drops = [[new Item("skinAndBones", this.X, this.Y), 1], [new Item("rasper", this.X, this.Y), 1]];

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                        this.haste = true;
                        this.voiceFrequency = 8;

                        if (player.gender == "Male" && this.playerSeen)
                        {
                            this.voice([nelgrefSkin, nelgrefEyes, nelgrefDie], 1000, true, false);
                        }
                        else if (this.playerSeen)
                        {
                            this.voice([nelgrefSkin, nelgrefEyes, nelgrefDie, nelgrefKiss], 1000, true, false);
                        }

                        if (this.health <= 1/3 * this.healthMAX)
                        {
                            this.negateArmour = 1;
                            this.attackWait = 0.4;
                            this.rangeOfSightCalculator(425, false);
                            this.speed = 3.1;
                            this.armour = 6;
                            this.ultra.weapon[1][1] = 9;
                            this.ultra.weapon[1][0] = 4;
                        }
                    }
                    if (this.ID == "Captain Jalmari Salt-Blood")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(300, false);

                        this.drops = [[new Item("saltBloodArmour", this.X, this.Y), 1], [new Item("burningSmashStick", this.X, this.Y), 1]];

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    if (this.ID == "Nelgref's Pet Bandit")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(350, false);

                        if (quests.lostDeliveryPetsKilled == 1)
                        {
                            this.drops = [[new Item("blackBearLeatherArmour", this.X, this.Y), 1]];
                        }
                        else
                        {
                            this.drops = [];
                        }

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                    if (this.ID == "Nelgref Bandit Scout")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(315, false);

                        if (Math.random() > 0.6)
                        {
                            this.drops = [[new Item("steelBolt", this.X, this.Y), 2]];
                        }
                        else
                        {
                            this.drops = [];
                        }

                        this.disturbed = true;

                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                        }
                    }
                }
                else
                {
                    //RANGE OF SIGHT (anything related to range of sight)
                    this.rangeOfSightCalculator(750, false);

                    //Call for help from other guards unless the culprit is the royal leader.
                    if (this.disturbed == true)
                    {
                        if (player.title != "Royalty" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(2000, "Soldier");
                        }
                    }

                    this.drops = [];

                    if (this.ID == "Matilda")
                    {
                        this.rangeOfSightCalculator(250, false);
                        this.drops = [[new Item("slowTimeII", this.X, this.Y), 1], [new Item("fireHands", this.X, this.Y), 1]];
                    }
                    else if (this.ID == "Assassin")
                    {
                        this.effect = "poisonII";
                        if (this.team != "player")
                        {
                            this.target = player; //assassins are unifocused on killing the player.
                            this.disturbed = true;
                            if (player.weaponIsRanged == false && player.spell == "none")
                            {
                                if (this.DTP() < 100 && spaceKey || this.DTP() < 100 && eKey)
                                {
                                    if (Math.random() > 0.9)
                                    {
                                        this.X += Math.cos(Math.atan2(this.Y - Y, this.X - X)) * 110;
                                        this.Y += Math.sin(Math.atan2(this.Y - Y, this.X - X)) * 110;
                                        magicList.push(new Magic({ID:"smoke", CNX: 50}, false, {X: X, Y: Y, rotation: this.rotation}, false, true));
                                    }
                                }
                            }
                            else
                            {
                                if (Math.random() > 0.9)
                                {
                                    if (this.isSpaceKey != true)
                                    {
                                        if (this.DTP() < 900 && spaceKey == true || this.DTP() < 900 && eKey == true)
                                        {
                                            if (this.assassJump == 0)
                                            {
                                                this.X += Math.cos(Math.atan2(this.Y - Y, this.X - X) + -1/2 * Math.PI) * 45;
                                                this.Y += Math.sin(Math.atan2(this.Y - Y, this.X - X) + -1/2 * Math.PI) * 45;
                                            }
                                            else
                                            {
                                                this.X += Math.cos(Math.atan2(this.Y - Y, this.X - X) + 1/2 * Math.PI) * 45;
                                                this.Y += Math.sin(Math.atan2(this.Y - Y, this.X - X) + 1/2 * Math.PI) * 45;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (this.DTP() < 900 && spaceKey == false || this.DTP() < 900 && eKey == false)
                                        {
                                            if (this.assassJump == 0)
                                            {
                                                this.X += Math.cos(Math.atan2(this.Y - Y, this.X - X) + -1/2 * Math.PI) * 45;
                                                this.Y += Math.sin(Math.atan2(this.Y - Y, this.X - X) + -1/2 * Math.PI) * 45;
                                            }
                                            else
                                            {
                                                this.X += Math.cos(Math.atan2(this.Y - Y, this.X - X) + 1/2 * Math.PI) * 45;
                                                this.Y += Math.sin(Math.atan2(this.Y - Y, this.X - X) + 1/2 * Math.PI) * 45;
                                            }
                                        }
                                    }
                                }

                                if (spaceKey || eKey)
                                {
                                    this.isSpaceKey = true;
                                }
                                else
                                {
                                    this.isSpaceKey = false;
                                }
                            }
                        }
                        this.rangeOfSightCalculator(1100, false);
                        this.drops = [[new Item("assassinWrappings", this.X, this.Y), 1]];
                        this.switchToRanged("longbow");
                    }
                }

                if (this.disturbed == true || this.DTU(this.target) <= this.baseSight && this.target != player || this.follower)
                {
                    if (this.disturbed == true)
                    {
                        this.hostile = true; //let the games animation know to display the person's name in red.
                    }

                    if (this.target == player && this.disturbed || this.follower && this.target == player)
                    {
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }
                    else if (this.target != "none")
                    {
                        this.pointTowards(this.target);
                        this.moveInRelationToThing(this.target);
                    }
                    else
                    {
                        this.offended = false;
                    }

                    if (this.ranged == false)
                    {
                        if (this.target == player && this.disturbed || this.target != player)
                        {
                            this.Attack(this.ultra.weapon[1][1], this.ultra.weapon[1][0]);
                        }
                    }
                }
                else
                {

                    this.weapon = this.ultra.weapon[0];
                    this.hostile = false;
                    this.attacking = false;
                    this.dtp = this.DTP();
                    if (this.dtp > 35)
                    {
                        this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                    }
                    else
                    {
                        this.pointTowardsPlayer();
                        this.moving = false;
                    }
                }

                //this.deathChecker();
                this.switchToSwimming();
                this.disturbedTimer();
                this.visibleSight();
            }
            else
            {
                if (this.doOnDeathOnce == true)
                {
                    if (this.ultra.faction == "hostile")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (this.ID == "Northern Bandit" || this.ID == "Hetmer The Bandit Chief" || this.ID == "Nelgref's Pet Bandit" || this.ID == "Nelgref the Flayer")
                            {
                                this.callForNearbyHelpFromType(350, "Soldier");
                            }
                        }
                    }
                    else if (player.title != "Royalty" || player.raceName != this.ultra.faction)
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            //this.callForNearbyHelpFromType(2000, "Soldier");
                        }
                    }
                    //Faction relation decreases
                    if (this.ultra.faction == "Freynor")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Kel")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.kelFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Thengar")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Aldrek")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.aldrekFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Orgell")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.orgellFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Vardan")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.vardanFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Cephrite")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.cephriteFaction -= 50;
                        }
                    }
                    else if (this.ultra.faction == "Nirwaden")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (this.disdained != true)
                            {
                                player.nirwadenFaction -= 50;
                            }
                        }
                    }
                    //Minor Factions
                    if (this.ultra.faction == "TheBalgurMercenaries")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.theBalgurMercenariesFaction -= 50;
                        }
                    }
                    if (this.ultra.faction == "EstolGang")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction -= 50;
                        }
                    }
                    if (this.ultra.faction == "Sylkeem")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.sylkeemRepublicansFaction -= 50;
                        }
                    }

                    //Unique Characters Permanent Death
                    if (this.ID == "Hetmer The Bandit Chief")
                    {
                        uniqueChars.hetmerLDS = false;
                    }
                    else if (this.ID == "Captain Jalmari Salt-Blood")
                    {
                        uniqueChars.jalmariLDS = false;
                    }
                    else if (this.ID == "Mercenary Captain Kronheime")
                    {
                        uniqueChars.kronheimeLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.theBalgurMercenariesFaction -= 75;
                        }
                    }
                    else if (this.ID == "Mercenary Captain Barret")
                    {
                        uniqueChars.barretLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.theBalgurMercenariesFaction -= 75;
                        }
                    }
                    if (this.ID == "Leon the Toll Master")
                    {
                        uniqueChars.leonLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.nirwadenFaction -= 65;
                        }
                    }
                    if (this.ID == "Ser Belgos of Atalin" || this.ID == "Belgos" || this.ID == "Belgos the Disgraced" || this.ID == "Belgos the Disgraced One" || this.ID == "Belgos of Atalin")
                    {
                        uniqueChars.belgosLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (this.ID == "Belgos the Disgraced" || this.ID == "Belgos the Disgraced One")
                            {
                                player.nirwadenFaction -= 50;
                            }
                            else if (this.ID == "Belgos")
                            {
                                player.nirwadenFaction -= 100;
                            }
                            else
                            {
                                player.nirwadenFaction -= 150;
                            }
                        }
                    }
                    if (this.ID == "Matilda")
                    {
                        uniqueChars.matildaLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.magicalExperience += 5;
                            if (player.class == "Mage" || player.class == "Priest")
                            {
                                player.magicalExperience += 35;
                            }
                            player.nirwadenFaction += 5;
                        }
                    }
                    else if (this.ID == "Jorge the Killer")
                    {
                        uniqueChars.jorgeLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction -= 17;
                        }
                    }
                    else if (this.ID == "Suspected Regicide" || this.ID == "Off Duty Altezor Soldier" && this.ultra.faction == "EstolGang")
                    {
                        uniqueChars.altezorInfiltratorLDS = false;

                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction += 30;
                        }
                    }
                    else if (this.ID == "Lo") //the estolgang boss's girlfriend
                    {
                        uniqueChars.loLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.estolgangFaction -= 110;
                        }
                    }
                    else if (this.ID == "Adolf the Pit Fighter")
                    {
                        uniqueChars.adolfLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 10;
                        }
                    }
                    else if (this.ID == "Markos the Pit Master")
                    {
                        uniqueChars.markosLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 100;
                        }
                    }
                    if (this.ID == "Rutgar the Warden")
                    {
                        uniqueChars.rutgarLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.thengarFaction -= 90;
                        }
                    }
                    else if (this.ID == "Beulingerr Commander Friedrich")
                    {
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (quests.draftAndDieQuest == true)
                            {
                                if (uniqueChars.friedrichLDS == true)
                                {
                                    player.thengarFaction += 50;
                                }
                            }
                            else
                            {
                                player.thengarFaction -= 150;
                            }
                        }
                        else
                        {
                            quests.draftAndDiePlayersKill = false;
                        }
                        uniqueChars.friedrichLDS = false;
                    }
                    else if (this.ID == "Tor Commissioner Stendor")
                    {
                        uniqueChars.stendorLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 80;
                        }
                    }
                    else if (this.ID == "Ukko, Sage of Gemesh")
                    {
                        uniqueChars.ukkoLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 100;
                        }
                    }
                    else if (this.ID == "Ser Olis Pynske")
                    {
                        uniqueChars.pynskeLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            player.freynorFaction -= 125;
                        }
                    }
                    else if (this.ID == "Jarl Orjov Tor")
                    {
                        uniqueChars.OrjovTorLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (player.title == "Royalty" && player.faction == "Freynor")
                            {
                                player.freynorFaction -= 300;
                            }
                            else
                            {
                                player.freynorFaction -= 1200;
                            }
                        }
                    }
                    else if (this.ID == "Jarl Rannuk Stambjord")
                    {
                        uniqueChars.rannukLDS = false;
                        if (this.killNotByPlayer == false || this.killByPlayerTeam)
                        {
                            if (player.title == "Royalty" && player.faction == "Freynor")
                            {
                                player.freynorFaction -= 325;
                            }
                            else
                            {
                                player.freynorFaction -= 1300;
                            }
                        }
                    }
                    else if (this.ID == "Nelgref the Flayer") //also a bandit chieftain
                    {
                        uniqueChars.nelgrefLDS = false;
                    }

                    //track Deaths Of Certain Non-Unique Units During Certain Quests

                    //during the TeshirNorthRoadQuest the number of bandits you kill is tracked.
                    if (quests.teshirNorthRoadQuest == true)
                    {
                        if (this.ID == "Northern Bandit")
                        {
                            quests.teshirNorthRoadKillCount += 1;
                        }
                    }
                    if (this.ID == "Nelgref's Pet Bandit")
                    {
                        quests.lostDeliveryPetsKilled += 1;
                    }
                    if (quests.theBalgurMercenariesQuest == true)
                    {
                        if (this.ID == "Balgur Mercenary")
                        {
                            quests.theBalgurMercenariesMercsKilled += 1;
                        }
                    }

                    this.doOnDeathOnce = false;
                }
            }

            //ANIMATIONS

            if (this.alive == true)
            {
                if (this.moving == false && this.attacking == false)
                {
                    this.costume = 0;
                }
                else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                {
                    this.costume = 0;
                    // the right leg goes back 25 pixles and the left goes forward 25.
                    if (this.lLegY < 23 && this.legSwitch == 0)
                    {
                        // this makes the legs extend
                        this.lLegY += 11 / (16.75 - (0.17 / 2 * 80));
                        this.rLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                        //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                    }
                    else
                    {
                        //switch to the right leg forward routine.
                        this.legSwitch = 1;
                    }

                    // the left leg goes back 25 pixles and the right goes forward 25.
                    if (this.lLegY > -23 && this.legSwitch == 1)
                    {
                        // this makes the legs extend
                        this.lLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                        this.rLegY += 11 / (16.75 - (0.17 / 2 * 80));
                        //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                    }
                    else
                    {
                        // switch to the left leg forward routine.
                        this.legSwitch = 0;
                    }

                    //to put it simply, this function draws two lines that represent the main character's legs.
                    this.drawLegs = function ()
                    {
                        if (!this.petrified)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                            XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(-4, 0);
                            XXX.lineTo(-4, 0 + this.lLegY);
                            XXX.stroke();
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(4, 0);
                            XXX.lineTo(4, 0 + this.rLegY);
                            XXX.stroke();
                            XXX.restore();
                        }
                    };
                    this.drawLegs();
                }
                else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000 / timeSpeed * this.timeResistance))
                    {
                        if (this.weapon == "none")
                        {
                            this.costumeEngine(6, 0.2, true);
                        }
                        else if (this.weapon == "freydicSword")
                        {
                            this.costumeEngine(7, 0.2, true);
                        }
                        else if (this.weapon == "freydicSpear")
                        {
                            this.costumeEngine(5, 0.18, true);
                        }
                        else if (this.weapon == "freydicGreatSword")
                        {
                            this.costumeEngine(8, 0.23, true);
                        }
                        else if (this.weapon == "timberAxe")
                        {
                            this.costumeEngine(7, 0.25, true);
                        }
                        else if (this.weapon == "rasper")
                        {
                            this.costumeEngine(5, 0.20, true);
                        }
                        else if (this.weapon == "longSpikedMorningStar")
                        {
                            this.costumeEngine(7, 0.125, true);
                        }
                        else if (this.weapon == "kellishSword")
                        {
                            this.costumeEngine(7, 0.21, true);
                        }
                        else if (this.weapon == "warHammer")
                        {
                            this.costumeEngine(9, 0.22, true);
                        }
                        else if (this.weapon == "kellishClaymore")
                        {
                            this.costumeEngine(14, 0.32, true);
                        }
                        else if (this.weapon == "flail")
                        {
                            this.costumeEngine(11, 0.18, false);
                        }
                        else if (this.weapon == "thenganSword")
                        {
                            this.costumeEngine(8, 0.2, true);
                        }
                        else if (this.weapon == "hammer")
                        {
                            this.costumeEngine(8, 0.24, true);
                        }
                        else if (this.weapon == "thenganWarhammer")
                        {
                            this.effect = "smashbackII";
                            this.costumeEngine(7, 0.15, true);
                        }
                        else if (this.weapon == "smashStick")
                        {
                            this.costumeEngine(7, 0.19, true);
                        }
                        else if (this.weapon == "kellishSawClub")
                        {
                            this.costumeEngine(7, 0.21, true);
                        }
                        else if (this.weapon == "kellishSpear")
                        {
                            this.costumeEngine(5, 0.21, true);
                        }
                        else if (this.weapon == "meatCleaver")
                        {
                            this.costumeEngine(7, 0.26, true);
                        }
                        else if (this.weapon == "iceSpikes")
                        {
                            this.costumeEngine(7, 0.20, false);
                        }
                        else if (this.weapon == "electricBolt")
                        {
                            this.costumeEngine(8, 0.25, false);
                        }
                        else if (this.weapon == "mace")
                        {
                            this.costumeEngine(6, 0.15, true);
                        }
                        else if (this.weapon == "burningSmashStick")
                        {
                            this.effect = "fire";
                            this.costumeEngine(7, 0.23, true);
                        }
                        else if (this.weapon == "fishingpole")
                        {
                            this.costumeEngine(6, 0.15, true);
                        }
                        else if (this.weapon == "crateLight" || this.weapon == "crateDark" || this.weapon == "basketDark" || this.weapon == "basketLight")
                        {
                            this.costumeEngine(2, 0.15, true);
                        }
                        else if (this.weapon == "nirineseSabre")
                        {
                            this.costumeEngine(9, 0.3, true);
                        }
                        else if (this.weapon == "burningHands")
                        {
                            this.effect = "fire";
                            this.costumeEngine(6, 0.2, true);
                        }
                        else if (this.weapon == "estoc")
                        {
                            this.costumeEngine(6, 0.15, true);
                        }
                        else if (this.weapon == "vardanianHalberd")
                        {
                            this.costumeEngine(9, 0.20, true);
                        }
                        else if (this.weapon == "thenganDagger")
                        {
                            this.costumeEngine(6, 0.22, true);
                        }
                    }
                }
                //draw some weapons underneath the body
                if (this.wepLayer == "under" || this.weapon == "freydicSword" || this.weapon == "longbow" || this.weapon == "crossbow" || this.weapon == "kellishClaymore" || this.weapon == "estoc" || this.weapon == "vardanianHalberd" || this.weapon == "shotgun" || this.weapon == "m16Carbine")
                {
                    this.drawHumanArms();
                }

                //Draw the Person's body
                this.drawHuman();

                //draw the others over it.
                if (this.wepLayer == "standard" || this.weapon != "freydicSword" && this.weapon != "longbow" && this.weapon != "crossbow" && this.weapon != "longSpikedMorningStar" && this.weapon != "kellishClaymore" && this.weapon != "estoc" && this.weapon != "vardanianHalberd" && this.weapon != "shotgun" && this.weapon != "m16Carbine")
                {
                    this.drawHumanArms();
                }

                //draw the Person's Outfit.
                this.drawHumanOutfit(this.outfit, false);

                //draw some weapons over the outfit
                if (this.wepLayer == "over" || this.weapon == "longSpikedMorningStar")
                {
                    this.drawHumanArms();
                }
            }
            else
            {
                this.drawHuman();
                this.drawHumanOutfit("none", true);
                this.drawUnit(verse, 0, 302, 35, 80, -20.5, -20, 57, 100, 1 / 2 * Math.PI);
            }
        }
    };
    //OPERATION [all of the functions in this class are activated here]
    this.operation = function()
    {
        this.incrementAITimer(); //This counts up on the variable aiTimer which is used for making the ai do certain things at certainTimes
        this.wepLayer = false; //resets weapon layer variable so that weapons that do not use this variable will not be affected.
        this.activateUnits(); //this is what runs all normal unit code
        this.teamCommands(); //this is a list of specific key commands the player can use to control those on his/her team.

        if (this.alive == true)
        {
            this.turnToDestination();
            this.deathChecker();
            this.unStack();
            this.effected(this.resistances);
        }

        if (this.alive == true || new Date().getTime() - this.timeSinceDead < 1000)
        {
            if (!this.underground)
            {
                this.showHealthWhenHurt();
            }
        }
        else if (new Date().getTime() - this.timeSinceDead > 90000)
        {
            var me = deadAIList.indexOf(this);
            deadAIList.splice(me, 1);
        }

        //this is a test to see where the true center of the unit is.
        if (testingUnitCenters == true && this.alive == true)
        {
            this.testForCenter();
        }

        //Error Sponge: this sucks up the nasty draw errors that affect the last thing drawn.
        XXX.beginPath();
        XXX.lineWidth = 1;
        XXX.fillStyle = "black";
        XXX.arc(-100, -100, 5, 0, Math.PI);
        XXX.fill();
        XXX.stroke();

        //this is a test to see what the true size of the unit is.
        if (testingUnitSizes == true && this.alive == true)
        {
            this.testForSize();
        }

        //extra team stuff that happens in the loop
        if (this.teamByID == true)
        {
            this.teamByID = false;
            this.setTeamByID();
        }
        if (this.baseTeam == "arena3" || this.baseTeam == "arena4" || this.baseTeam == "arena5")
        {
            this.disturbedTime = new Date().getTime();
        }

        //Reset Certain Variables
        this.scared = false;
    };
};